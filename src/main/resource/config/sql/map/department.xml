<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
	"http://www.ibatis.com/dtd/sql-map-2.dtd">
	
<sqlMap namespace="department">
	
	<!-- 查询总公司 -->
	<select id="getAllCompanys" parameterClass="map" resultClass="hashmap">
		select t.decp_id DECP_ID,t.decp_name_cn  DECP_NAME_CN
		from t_dept_company t
		where t.legelr=1 and t.status=0
	</select>
	<!-- 根据ID查询分公司 -->
	<select id="getFenCompanys" parameterClass="map" resultClass="hashmap">
		select t.decp_id DECP_ID,t.decp_name_cn  DECP_NAME_CN
		from t_dept_company t
		where t.legelr=2 and t.status=0 and t.parent_id=#parentId#
	</select>	
	<!-- 根据ID查询公司下的部门 -->
	<select id="getDept" parameterClass="map" resultClass="hashmap">
		select t.id	ID,t.dept_name DEPT_NAME
		from t_dept_department t
		where t.decp_id=#parentId# and t.status=0 and t.parent_id=0
	</select>
	<!-- 根据ID查询部门下的部门 -->
	<select id="getFenDept" parameterClass="map" resultClass="hashmap">
		select t.id	ID,t.dept_name DEPT_NAME
		from t_dept_department t
		where t.parent_id=#parentId# and t.status=0
	</select>		
	<!-- 查询所有部门 -->
	<select id="getAllDepartments" parameterClass="map" resultClass="hashmap">
		select tdd1.id id,tdd1.dept_name dept_name
		from t_dept_department  tdd1
	    left join t_dept_department tdd2
	    on tdd1.id=tdd2.parent_id
	    where tdd2.id is null
		 order by tdd1.dept_name
	</select>
	
	<!-- 点击公司   插入公司信息 -->
	<insert id="create" parameterClass="map">
		insert into t_dept_department(dept_name,dept_code,memo,parent_id,create_date,DECP_ID,status)
		values(#deptName#,#deptCode#,#memo#,0,getdate(),#id#,0)
	</insert>
	<!-- 根据部门id查询该部门所在的公司 -->
	<select id="deptatcompany" parameterClass="map" resultClass="hashmap">
		select decp_id DECP_ID from t_dept_department where id=#id# and status=0
	</select>	
	<!-- 点击部门  插入公司信息 -->
	<insert id="create2" parameterClass="map">
		insert into t_dept_department(dept_name,dept_code,memo,parent_id,create_date,decp_id,status)
		values(#deptName#,#deptCode#,#memo#,#parentId#,getdate(),#decp_id#,0)
	</insert>	
	<!-- 根据部门id查询该部门 -->
	<select id="getDeptById" parameterClass="map" resultClass="hashmap">
		select t1.id  id, 	t1.dept_name dept_name,		t1.dept_code dept_code,
      		   t1.memo memo, 	t1.parent_id parent_id,		isnull(t2.dept_name,tdc.decp_name_cn) parent_name,tdc.decp_id decp_id
		  from t_dept_department t1
		  left join t_dept_department t2 on t1.parent_id = t2.id
		  left join t_dept_company tdc on  t1.decp_id=tdc.decp_id
		  where t1.id=#id# and t1.status=0  and tdc.status=0
	</select>
	
	<!-- 根据部门id查询该部门的上级部门  用于修改和删除 -->
	<select id="shang" parameterClass="map" resultClass="hashmap">
		select tdd.id, tdd.dept_name, tdd.parent_id, tdc.decp_id, tdc.decp_name_cn
		  from t_dept_department tdd
		  left join t_dept_company tdc on tdd.decp_id = tdc.decp_id
		  where tdd.id=#id# and tdd.status=0
	</select>
	<!-- 根据部门id查询该部门的上级部门ID和名称  用于修改和删除 -->
	<select id="shang2" parameterClass="map" resultClass="hashmap">
		select tdd.id, tdd.dept_name
		  from t_dept_department tdd
		  where tdd.id=#fu# and tdd.status=0
	</select> 	 
	<!-- 根据部门ID更新该部门信息 -->
	<update id="update" parameterClass="map">
		update t_dept_department set dept_name=#deptName#,dept_code=#deptCode#,memo=#memo#
		where id=#id#
	</update>
	<!-- 根据部门id查询该部门是否有下属部门 -->
	<select id="youDept" parameterClass="map" resultClass="hashmap">
		select id ID from t_dept_department  t where t.parent_id=#id# and t.status=0
	</select>
	<!-- 根据部门id查询该部门是否有员工 -->
	<select id="youUser" parameterClass="map" resultClass="hashmap">
		select id ID from t_user_user t where t.dept_id=#id# and t.status=0
	</select>		
	<!-- 根据部门ID删除该部门 -->
	<update id="delete" parameterClass="map">
		update t_dept_department set STATUS=-2  where id=#id#
	</update>
	<!-- 根据部门id取得这个部门的结构图 -->
	<select id="getDepartmentChart" parameterClass="map" resultClass="hashmap">	
		with myFor(id,dept_name,parent_id,level,status) as(
		select id,dept_name,parent_id,1 as level,status   from t_dept_department Where ID=#id#
		 union   all 
		select t.id,t.dept_name,t.parent_id,level+1,t.status  from t_dept_department t inner join myFor t1 on t.parent_id=t1.ID)
		select t2.id ID,t2.dept_name DEPT_NAME,t2.parent_id PARENT_ID,level LEVEL,Row_number() over(order by t2.id ) R  from myFor  t2 where t2.status=0
		order by t2.level
	</select>
	<!-- 取得所有部门的结构图-->
	<select id="getAllDeptmentChart" parameterClass="map" resultClass="hashmap">
		with myFor(id,dept_name,parent_id,level,status) as(
		select id,dept_name,parent_id,1 as level,status   from t_dept_department where parent_id=0
		 union   all 
		select t.id,t.dept_name,t.parent_id,level+1,t.status  from t_dept_department t inner join myFor t1 on t.parent_id=t1.ID)
		select t2.id ID,t2.dept_name DEPT_NAME,t2.parent_id PARENT_ID,level LEVEL,Row_number() over(order by t2.id ) R  from myFor  t2  where t2.status=0
		order by t2.level
		
	</select>
	
	<select id="getAllOffice" resultClass="com.brick.base.to.SelectionTo">
		select convert(nvarchar, DECP_ID) as option_value, 
			DECP_NAME_CN as display_name
		from T_DEPT_COMPANY decp
		where STATUS = 0 and LEGELR = 2
		and decp.DECP_ID != 1
		order by decp.[ORDER]
	</select>
	
	<select id="getAllDecp" resultClass="hashmap">
		select *
		from T_DEPT_COMPANY decp
		where STATUS = 0 and LEGELR = 2
		and decp.DECP_ID != 1
		order by decp.[ORDER]
	</select>
	
	<select id="getCurrentOffice" parameterClass="com.brick.base.to.BaseTo" resultClass="java.lang.String">
		select convert(nvarchar,dept_id) from T_USER_USER2COMPANY
		where USER_ID = #modify_by#
		and STATUS = 0
	</select>
	
	<select id="queryDeptCmpy" resultClass="com.brick.deptCmpy.to.DeptCmpyTO">
	    SELECT T1.ID deptId,T1.DEPT_NAME+'('+T3.DECP_NAME_CN+')' deptName,T4.DECP_ID upperCompanyId,
	           T1.UPPER_DEPT_ID upperDeptId,T2.DEPT_NAME+'('+T4.DECP_NAME_CN+')' upperDeptName,
	           T1.DEPT_MANAGER deptMgrId,T5.NAME deptMgrName,T2.DEPT_MANAGER upperDeptMgrId,
	           T6.NAME upperDeptMgrName,T1.CLASS_ID classId,T7.FLAG className
	      FROM T_DEPT_DEPARTMENT T1
	 LEFT JOIN T_DEPT_DEPARTMENT T2 ON T1.UPPER_DEPT_ID=T2.ID AND T2.STATUS=0
	 LEFT JOIN T_DEPT_COMPANY T3 ON T1.DECP_ID=T3.DECP_ID AND T3.STATUS=0
	 LEFT JOIN T_DEPT_COMPANY T4 ON T2.DECP_ID=T4.DECP_ID AND T4.STATUS=0
	 LEFT JOIN T_USER_USER T5 ON T1.DEPT_MANAGER=T5.ID AND T5.STATUS=0
	 LEFT JOIN T_USER_USER T6 ON T2.DEPT_MANAGER=T6.ID AND T6.STATUS=0
	 LEFT JOIN T_DATA_DICTIONARY T7 ON T7.TYPE=#type# AND T7.CODE=T1.CLASS_ID
	     WHERE T1.STATUS=0
	     <isNotEmpty property="companyId">
	       AND T1.DECP_ID=#companyId#
	     </isNotEmpty>
	     <isNotEmpty property="deptId">
	       AND T1.ID=#deptId#
	     </isNotEmpty>
	  ORDER BY T3.[ORDER]
	</select>
	
	<update id="batchUpdateDept">
		<isEqual property="flag" compareValue="1">
			UPDATE T_DEPT_DEPARTMENT
			   SET UPPER_DEPT_ID=#upperDeptId#,
			       DEPT_MANAGER=#deptMgr#,
			       CLASS_ID=#classId#
			 WHERE STATUS=0
			   AND ID IN ($ids$)
		</isEqual>
		<isEqual property="flag" compareValue="2">
			UPDATE T_DEPT_DEPARTMENT
			   SET UPPER_DEPT_ID=#upperDeptId#
			 WHERE STATUS=0
			   AND ID IN ($ids$)
		</isEqual>
		<isEqual property="flag" compareValue="3">
			UPDATE T_DEPT_DEPARTMENT
			   SET DEPT_MANAGER=#deptMgr#
			 WHERE STATUS=0
			   AND ID IN ($ids$)
		</isEqual>
		<isEqual property="flag" compareValue="4">
			UPDATE T_DEPT_DEPARTMENT
			   SET CLASS_ID=#classId#
			 WHERE STATUS=0
			   AND ID IN ($ids$)
		</isEqual>
		<isEqual property="flag" compareValue="5">
			UPDATE T_DEPT_DEPARTMENT
			   SET UPPER_DEPT_ID=#upperDeptId#,
			       DEPT_MANAGER=#deptMgr#
			 WHERE STATUS=0
			   AND ID IN ($ids$)
		</isEqual>
		<isEqual property="flag" compareValue="6">
			UPDATE T_DEPT_DEPARTMENT
			   SET DEPT_MANAGER=#deptMgr#,
			       CLASS_ID=#classId#
			 WHERE STATUS=0
			   AND ID IN ($ids$)
		</isEqual>
		<isEqual property="flag" compareValue="7">
			UPDATE T_DEPT_DEPARTMENT
			   SET UPPER_DEPT_ID=#upperDeptId#,
			       CLASS_ID=#classId#
			 WHERE STATUS=0
			   AND ID IN ($ids$)
		</isEqual>
	</update>
	
	<insert id="addDept">
		INSERT INTO T_DEPT_DEPARTMENT
		(DEPT_NAME,CREATE_DATE,STATUS,DECP_ID,UPPER_DEPT_ID,DEPT_MANAGER,CLASS_ID)
		VALUES
		(#ADD_DEPT_NAME#,GETDATE(),0,#ADD_COMPANY_ID#,#ADD_UPPER_DEPT_ID#,#ADD_DEPT_MGR_ID#,#ADD_CLASS_ID#)
	</insert>
</sqlMap>