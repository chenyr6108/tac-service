<?xml version="1.0" encoding="GBK" standalone="no"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
	"http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="decompose">
	<!--  查询所有来款信息的个数  -->
	<select id="queryAllIncomeInfo_count" parameterClass="map"
		resultClass="java.lang.Integer">
		<![CDATA[
 		select count(1) as cnt
		  from (select distinct fiin.fiin_id,
				                fiin.opposing_date,
				                fiin.income_money,
				                fiin.opposing_bankno,
				                fiin.opposing_unit,
				                fiin.opposing_type,
				                fiin.opposing_explain,
				                fiin.opposing_summary,
				                fiin.opposing_postscript,
				                fiin.opposing_bankname,
				                fiin.decompose_status,
				                fiin.receipt_bankno,
				                baba.account_no,
				                baba.bank_name
				  from t_fina_income fiin
				  left join (select tbba.account_no, tbbi.bank_name
				               from t_bank_bankaccount tbba
				               left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
				              where tbba.status = 0
				                and tbbi.status = 0) baba on fiin.receipt_bankno =
				                                             baba.account_no
				where fiin.status = 0
		]]>
		<dynamic prepend="and">
			<isNotEmpty prepend="and" property="search_startdate">
				<![CDATA[
				convert(datetime,convert(varchar,fiin.opposing_date,23))
				 >=
				  convert(datetime,convert(varchar,#search_startdate#,23)) 
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_enddate">
				<![CDATA[
					convert(datetime,convert(varchar,fiin.opposing_date,23))
					<= 
					convert(datetime,convert(varchar,#search_enddate#,23))   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_startmoney">
				<![CDATA[
				fiin.income_money >= #search_startmoney# 
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_endmoney">
				<![CDATA[
				fiin.income_money <= #search_endmoney#   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_content">
				<![CDATA[
				(fiin.opposing_bankno like '%$search_content$%'
				or fiin.opposing_unit like '%$search_content$%'
				or fiin.opposing_type like '%$search_content$%'
				or fiin.opposing_explain like '%$search_content$%'
				or fiin.opposing_summary like '%$search_content$%'
				or fiin.opposing_postscript like '%$search_content$%'
				or fiin.opposing_bankname like '%$search_content$%'
				or fiin.DEPOSE_CUSTOMER like '%$search_content$%')   
				]]>
			</isNotEmpty>
			<isNotEmpty property="search_status">
				<isNotEqual compareValue="0" prepend="and"
					property="search_status">
					<![CDATA[
						fiin.decompose_status=#search_status#
					]]>
				</isNotEqual>
			</isNotEmpty>
			<isNotEmpty property="search_bankname">
				<isNotEqual compareValue="全部" prepend="and"
					property="search_bankname">
					<![CDATA[
						baba.bank_name=#search_bankname#
					]]>
					<isNotEqual compareValue="全部" prepend="and"
						property="search_bankno">
						<![CDATA[
							baba.account_no=#search_bankno#
						]]>
					</isNotEqual>
				</isNotEqual>
			</isNotEmpty>
		</dynamic>
		<![CDATA[
			) t
		]]>
	</select>

	<!--  进入时查询所有来款信息   -->
	<!--  Modify By michael 2011 12/12 增加分解返回状态栏位   -->
	<select id="queryAllIncomeInfo" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
 		select *
		  from (select distinct fiin.fiin_id,
				                fiin.receipt_bankno,
				                fiin.receipt_unit,
				                fiin.opposing_bankno,
				                fiin.opposing_unit,
				                fiin.opposing_memo, 
				                fiin.opposing_unit_true,
				                fiin.opposing_bankname,
				                convert(varchar,fiin.opposing_date,23) opposing_date,
				                fiin.opposing_type,
				                fiin.opposing_flag,
				                fiin.opposing_address,
				                fiin.opposing_summary,
				                fiin.opposing_explain,
				                fiin.opposing_postscript,
				                fiin.income_money,
				                fiin.payment_money,
				                fiin.left_money,
				                fiin.commission_money,
				                fiin.locked,
				                fiin.decompose_status,
				                fiin.operate_remark,
				                fiin.operate_id,
				                usus.name operate_name,
				                fiin.operate_time,
				                fiin.finance_remark,
				                fiin.finance_id,
				                fiin.finance_time,
				                fiin.left_id,
				                fiin.transfer_id,
				                fiin.red_id,
				                fiin.red_type,
				                fiin.export_flag,
				                fiin.export_count,
				                fiin.export_name,
				                fiin.export_time,
				                fiin.type,
				                fiin.status,
				                fiin.upload_user_id,
				                fiin.upload_time,
				                fiin.upload_path,
				                fiin.modify__user_id,
				                fiin.modify_time,
				                fiin.virtual_code,
				                baba.account_no,
				                baba.bank_name,
				                abnormal_status,
				                fiin.DEPOSE_CUSTOMER,
				                fiin.MAIL_MEMO,
				                q.qty
				  from t_fina_income fiin
				  left join (
				  	select fiin_id,count(*) as qty from T_TRANSFERCERTIFICATE_FILE 
					where STATUS = 0
					group by fiin_id
				  
				  ) q on q.fiin_id = fiin.fiin_id
				  left join (select tbba.account_no, tbbi.bank_name
				               from t_bank_bankaccount tbba
				               left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
				              where tbba.status = 0
				                and tbbi.status = 0) baba on fiin.receipt_bankno =
				                                             baba.account_no
				  left join t_user_user usus on fiin.operate_id = usus.id
				 where fiin.status = 0
		]]>
		<dynamic prepend="and">
			<isNotEmpty prepend="and" property="search_startdate">
				<![CDATA[
			convert(datetime,convert(varchar,fiin.opposing_date,23))
			 >=
			  convert(datetime,convert(varchar,#search_startdate#,23))   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_enddate">
				<![CDATA[
			convert(datetime,convert(varchar,fiin.opposing_date,23))
			<= 
			convert(datetime,convert(varchar,#search_enddate#,23))
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_startmoney">
				<![CDATA[
				fiin.income_money >= #search_startmoney# 
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_endmoney">
				<![CDATA[
				fiin.income_money <= #search_endmoney#   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_content">
				<![CDATA[
				(fiin.opposing_bankno like '%$search_content$%'
				or fiin.opposing_unit like '%$search_content$%'
				or fiin.opposing_type like '%$search_content$%'
				or fiin.opposing_explain like '%$search_content$%'
				or fiin.opposing_summary like '%$search_content$%'
				or fiin.opposing_postscript like '%$search_content$%'
				or fiin.opposing_bankname like '%$search_content$%'
				or fiin.DEPOSE_CUSTOMER like '%$search_content$%')   
				]]>
			</isNotEmpty>
			<isNotEmpty property="search_status">
				<isEqual compareValue="2" prepend="and"
					property="search_status">
					<![CDATA[
						fiin.decompose_status in (1,2)
					]]>
				</isEqual>
				<isNotEqual compareValue="2"  property="search_status">
					<isNotEqual compareValue="0" prepend="and" property="search_status">
					    <![CDATA[
						  fiin.decompose_status in (#search_status#)
					   ]]>
				   </isNotEqual>
				</isNotEqual>
			</isNotEmpty>
			<isNotEmpty property="search_bankname">
				<isNotEqual compareValue="全部" prepend="and"
					property="search_bankname">
					<![CDATA[
						baba.bank_name=#search_bankname#
					]]>
					<isNotEqual compareValue="全部" prepend="and"
						property="search_bankno">
						<![CDATA[
							baba.account_no=#search_bankno#
						]]>
					</isNotEqual>
				</isNotEqual>
			</isNotEmpty>
		</dynamic>
		<![CDATA[
			) t
		 order by decompose_status, opposing_date desc
		]]>
	</select>
	<!--  查询所有银行名称   -->
	<select id="queryBankName" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
			select tbbi.bank_name
			  from t_bank_bankinfo tbbi
			where tbbi.status = 0
			 group by tbbi.bank_name
			 order by tbbi.bank_name
		]]>
	</select>
	<!--  根据银行名称查询该银行下的所有账号   -->
	<select id="queryBankAccount" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
			select tbba.account_no
			  from t_bank_bankaccount tbba
			  left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
			 where tbba.status = 0
			  and  tbbi.status = 0
		]]>
		<dynamic>
			<isNotEmpty prepend="and" property="search_bankname">
				<![CDATA[
					tbbi.bank_name=#search_bankname#
				]]>
			</isNotEmpty>
		</dynamic>
		<![CDATA[
			group by tbba.account_no
			 order by tbba.account_no
		]]>
	</select>
	<!--  查询所有承租人信息   -->
	<select id="queryCustInfo" parameterClass="map"
		resultClass="java.util.HashMap">
		<!--  Modify by Michael 2011 12/13 For处理之前已结清案件，留购款未销账案件
		 -->
		<![CDATA[
			select distinct rect.RECT_ID,rect.cust_name,
			                (case
			                  when rect.cust_type = 1 then
			                   '法人'
			                  else
			                   '自然人'
			                end) cust_type,
			                (case
			                  when rect.cust_type = 1 then
			                   '组织机构代码证'
			                  else
			                   '身份证号'
			                end) type_name,
			                (case
			                  when rect.cust_type = 1 then
			                   rect.corp_oragnization_code
			                  else
			                   rect.natu_idcard
			                end) type_no,
			                ta.name add_name,
			                rect.cust_name + '_' + (case
			                  when rect.cust_type = 1 then
			                   '法人'
			                  else
			                   '自然人'
			                end) + '_' + (case
			                  when rect.cust_type = 1 then
			                   rect.corp_oragnization_code
			                  else
			                   rect.natu_idcard
			                end) + '_' + ta.name custinfo,
			                rect.cust_code
			  from t_rent_contract rect
			  left join t_area ta on rect.province_id = ta.id
			  left join t_rent_collectionplan recp on rect.rect_id = recp.rect_id
			 where recp.recp_id is not null
			   and recp.status = 0 and recp.RECP_STATUS=0
			  order by rect.RECT_ID desc 
		]]>
	</select>
	<select id="queryRecpCodeInfo" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select distinct recp.recp_code,
			                rect.cust_name,
			                (case
			                  when rect.cust_type = 1 then
			                   '法人'
			                  else
			                   '自然人'
			                end) cust_type,
			                (case
			                  when rect.cust_type = 1 then
			                   '组织机构代码证'
			                  else
			                   '身份证号'
			                end) type_name,
			                (case
			                  when rect.cust_type = 1 then
			                   rect.corp_oragnization_code
			                  else
			                   rect.natu_idcard
			                end) type_no,
			                ta.name add_name,
			                rect.cust_code
			  from t_rent_collectionplan recp
			  left join t_rent_contract rect on rect.rect_id = recp.rect_id
			  left join t_area ta on rect.province_id = ta.id
			  LEFT JOIN T_RENT_SETTLE T3 ON T3.RECP_ID = recp.RECP_ID AND T3.STATUS = 0
			 where recp.recp_id is not null
			   and recp.fund_status = 5
			   and recp.status = 0
			   AND T3.STATE = 1
			 order by recp.recp_code
		]]>
	</select>
	<!--  分解来款ID查询该来款所有信息  -->
	<!-- Modify by Michael 2012 3-9 增加来款上传流水号 -->
	<select id="queryCustIncomeInfo" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
			select distinct fiin.income_finance_code,
							fiin.fiin_id,
			                fiin.receipt_bankno,
			                fiin.receipt_unit,
			                fiin.opposing_bankno,
			                fiin.opposing_unit,
			                fiin.opposing_bankname,
			                convert(datetime,convert(varchar,fiin.opposing_date, 23)) opposing_date,
			                fiin.opposing_type,
			                fiin.opposing_flag,
			                fiin.opposing_address,
			                fiin.opposing_summary,
			                fiin.opposing_explain,
			                fiin.opposing_postscript,
			                convert(decimal(18,2),fiin.income_money) income_money,
			                fiin.payment_money,
			                fiin.left_money,
			                fiin.commission_money,
			                fiin.locked,
			                fiin.decompose_status,
			                fiin.operate_remark,
			                fiin.operate_id,
			                fiin.operate_time,
			                fiin.finance_remark,
			                fiin.finance_id,
			                fiin.finance_time,
			                fiin.left_id,
			                fiin.transfer_id,
			                fiin.red_id,
			                fiin.red_type,
			                fiin.export_flag,
			                fiin.export_count,
			                fiin.export_name,
			                fiin.export_time,
			                fiin.type,
			                fiin.status,
			                fiin.upload_user_id,
			                fiin.upload_time,
			                fiin.upload_path,
			                fiin.modify__user_id,
			                fiin.modify_time,
			                baba.account_no,
			                baba.bank_name,
			                fiin.ficb_flag,
			                fiin3.next_left_id,
			                fiin3.next_left_status,
			                fiin5.next_red_id,
			                fiin5.next_red_status
			  from t_fina_income fiin
			  left join (select tbba.account_no, tbbi.bank_name
			               from t_bank_bankaccount tbba
			               left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
			              where tbba.status = 0
			                and tbbi.status = 0) baba on fiin.receipt_bankno =
			                                             baba.account_no
			  left join (select min(fiin2.fiin_id) next_left_id,
			                    fiin2.left_id,
			                    fiin2.decompose_status next_left_status
			               from t_fina_income fiin2
			              where fiin2.status = 0
			              group by fiin2.left_id, fiin2.decompose_status) fiin3 on fiin3.left_id =
			                                                                       fiin.fiin_id
			  left join (select min(fiin4.fiin_id) next_red_id,
			                    fiin4.red_id,
			                    fiin4.decompose_status next_red_status
			               from t_fina_income fiin4
			              where fiin4.status = 0
			              group by fiin4.red_id, fiin4.decompose_status) fiin5 on fiin5.red_id =
			                                                                      fiin.fiin_id
			where fiin.status = 0
		]]>
		<dynamic prepend="and">
			<isNotEmpty prepend="and" property="select_income_id">
				<![CDATA[
					fiin.fiin_id=#select_income_id#
				]]>
			</isNotEmpty>
		</dynamic>
	</select>
	<!--  根据承租人编号查询承租人姓名  -->
	<select id="queryCustNameByCode" parameterClass="map" resultClass="java.util.HashMap" >
		<![CDATA[
			select max(cust_name) cust_name
			  from t_rent_contract rect
			 where rect.cust_code = #cust_code#
		]]>
	</select>
	<!--  根据承租人编号查询该承租人下的所有应分解项  -->
	<select id="queryCustDecomposeInfo" parameterClass="map"
		resultClass="java.util.HashMap">
		<!--  罚金  -->
		<!--  Modify by Michael 2011 12/27 修改罚息销账逻辑，根据每期来款的实际日期来进行销账  -->
		<!--  <![CDATA[
		select * from (	
			select 0 as renttype,
			       2 as sorder,
			       '0000a'  as o,
			       rect_id as lease_id,
			       recp_id as paylist_id,
			       lease_code,
			       #opposing_date# as sdate,
			       recp_code as paylist_code,
			       '租金罚息' as sobj,
			       0 as recd_period,
			       '租金罚息' as ficb_item,
			       0 as recd_type,
			       sum(dudaly.fine) - isnull(tdfdr.derate_fine, 0) sprice 
			  from (select cust_id,
				       recp_id,
				       rect_id, 
				       lease_code,
                        recp_code,
				       sum(fine) fine   
				       from(      
           select  t1.cust_id, 
				   t1.recp_id,
                   t1.rect_id,
                   t1.lease_code,
                   t1.recp_code,
                   t1.warn_status recp_status,
                   t1.fine_type,
                   t1.fine_rate,
				   t1.last_date,
				   t1.dun_day,
				   t1.dun_price,
				   t1.opposing_date,
				   t1.pay_date,
                   t1.period_num,
				(case
                 when fine_type = 2 then
                  round(dun_price *
                        power(1 + fine_rate / 100, dun_day) -
                        dun_price,2)
                 else
                  round(dun_price * dun_day * fine_rate / 100,
                        2)
               end) fine
                  from (
                  select trcp.cust_id,
                         trcp.recp_id,
                         trcp.lease_code,
                         trcp.recp_code,
                         trcp.rect_id,
                         trcp.warn_status,
                         trcp.fine_type,
                         trcp.fine_rate,
                         trcp.pay_date,
                         tfcd.opposing_date,
                         (case
                         when tfcd.opposing_date is null or
                              tfcd.opposing_date <= trcp.pay_date then
                          trcp.pay_date
                         else
                          tfcd.opposing_date
                       end) last_date,
                       (case
                         when tfcd.opposing_date is null or
                              tfcd.opposing_date <= trcp.pay_date then
                          datediff(d,trcp.pay_date,#opposing_date#)
                         else
                          datediff(d,tfcd.opposing_date,#opposing_date#)
                       end) dun_day,
					   trcp.month_price-reduce_price as dun_price,
                       trcp.period_num
                                from (
                               select trc.cust_id,
                               trc.lease_code,
                               trcp.recp_code,
                               trcp.recp_id,
                               trcp.rect_id,
                               trcp.warn_status,
                               trcd.pay_date,
                               trcd.period_num, 
                               trcp.fine_type,
                               trcp.fine_rate,
                               isnull(trcd.IRR_MONTH_PRICE, 0) month_price,  
                               isnull(trcd.reduce_own_price, 0) reduce_price 
                          from t_rent_collectionplan trcp
                          left join t_rent_contract trc on trcp.rect_id =
                                                           trc.rect_id
                          left join t_rent_collectiondetail trcd on trcp.recp_id =
                                                                    trcd.recp_id
                         where trcp.status = 0 and trc.status=0
                            and (trcp.fund_status=0 or trcp.fund_status=1)
                           and  trcd.pay_date < = cast(#opposing_date# as datetime)-1
                         and isnull(trcd.IRR_MONTH_PRICE, 0)-isnull(trcd.reduce_own_price, 0)>0.001
                          and trcp.rect_id in (select trc.rect_id
			                                                  from t_rent_contract trc
			                                                 where trc.cust_code = #cust_code#
			                                                )
                          ) trcp 
                          left join  (select tfcb.recp_id, max(tfi.opposing_date) opposing_date
                            from t_fina_collectionbill tfcb
                            left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
                           where tfi.opposing_date <= cast(#opposing_date# as datetime)
                           and (tfcb.ficb_state=4 or tfcb.ficb_state=5)
                           and tfi.red_type is null
						   and tfcb.cust_code = #cust_code#
                           group by tfcb.recp_id ) tfcd 
                          on trcp.recp_id = tfcd.recp_id
                      where (case when tfcd.opposing_date is null or
                        tfcd.opposing_date <= trcp.pay_date then
                       datediff(d,trcp.pay_date,#opposing_date#) else
                         datediff(d,tfcd.opposing_date,#opposing_date#) end) > 0 ) t1 ) t2
         group by cust_id,
          rect_id,
          recp_id,
           lease_code,
          recp_code
			  ) dudaly 
			  left join t_dun_finederate tdfdr on dudaly.recp_id = tdfdr.repc_id
			                                  and convert(datetime,convert(varchar,tdfdr.derate_date,23)) =
			                                       convert(datetime,#opposing_date# )  
			                                  and tdfdr.status = 0
			                                  and tdfdr.state = 1
			 group by cust_id,
			          rect_id,
			          recp_id,
			          recp_code,
			          lease_code,
			          tdfdr.derate_fine
		]]>
		 -->
		<!--  Add By Michael  2011 12/27 运用新的逻辑计算罚息销账  -->
		<![CDATA[
		select * from (	
			select 0 as renttype,
				 2 as sorder,
				 '0000a'  as o,
				 trcpd.rect_id as lease_id,
			       trcpd.recp_id as paylist_id ,
			       lease_code,
			       trcpd.PAY_DATE as sdate,
			       trcpd.recp_code as paylist_code,
			       '租金罚息' as sobj,
			       0 as recd_period,
			       '租金罚息' as ficb_item,
			       0 as recd_type,
			        trcpd.fine-
			  isnull((select sum(ficb.real_price)
			     from t_fina_collectionbill ficb
			    where ficb.ficb_item = '租金罚息'
			      and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			      and ficb.status = 0
			      and ficb.recp_code = trcpd.recp_code 
			      and (ficb.ficb_item = '租金罚息' or ficb.ficb_item = '结清罚息')
			      group by ficb.ficb_item
			        ),0)- isnull(tdfdr.DIFF_DUN_PRICE, 0)  as sprice,trcpd.TAX_PLAN_CODE,'00000' as PRICE_TYPE
				  from
				(select SUM(fine) fine,RECP_CODE,RECP_ID,RECT_ID ,lease_code,min(PAY_DATE) PAY_DATE,TAX_PLAN_CODE
				 from
				(    
				select trcp.TAX_PLAN_CODE,trc.CUST_ID,trcp.recp_id,trcp.rect_id,trcp.RECP_CODE,trc.lease_code,
				(case when trcp.fine_type = 2 then
				round(real_price *
				     power(1 + trcp.fine_rate / 100, dun_day) -
				     real_price,2)
				else
				 round(real_price * dun_day * fine_rate / 100,2)
				end) fine,trcd.PAY_DATE
				from              
				(select tfcb.RECP_ID,tfcb.recp_code,tfcb.pay_date,tfcb.recd_period,tfcb.ficb_item,max(tfcb.should_price) should_price ,
				sum(tfcb.real_price) real_price,tfcb.cust_code,tfi.opposing_date opposing_date,datediff(d,tfcb.pay_date,opposing_date)  dun_day
				from t_fina_collectionbill tfcb
				left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
				where  (tfcb.ficb_state=4 or tfcb.ficb_state=5)
				and tfi.red_type is null and tfcb.FICB_type='0'
				and (tfcb.FICB_ITEM='租金' or tfcb.FICB_ITEM='增值税')
				and datediff(d,tfcb.pay_date,opposing_date)>0 
				group by RECP_ID,recp_code,pay_date,recd_period,ficb_item,cust_code,opposing_date,datediff(d,tfcb.pay_date,opposing_date)) tfcbd
				left join
				t_rent_collectionplan  trcp
				on tfcbd.recp_id=trcp.RECP_ID and trcp.STATUS=0
				left join t_rent_contract trc 
				on trcp.rect_id =trc.rect_id and trc.status=0
				left join
				t_rent_collectiondetail trcd
				on trcd.RECP_ID = trcp.RECP_ID and trcd.PERIOD_NUM=tfcbd.recd_period and trcd.status=0
				where 1=1 and trcp.FUND_STATUS ='0'
			]]>				
			<dynamic prepend="and">
				<![CDATA[
					trc.cust_code=#cust_code#
				]]>
			</dynamic>	
			<![CDATA[
				union all
				select  trcp.TAX_PLAN_CODE,trcp.cust_id,
				trcp.recp_id,
				trcp.rect_id,
				trcp.RECP_CODE,
				trcp.lease_code,
				(case when trcp.fine_type = 2 then
				round((trcp.month_price-reduce_price) *
				     power(1 + trcp.fine_rate / 100, datediff(d,trcp.pay_date,getdate())) -
				     (trcp.month_price-reduce_price),2)
				else
				 round((trcp.month_price-reduce_price) * datediff(d,trcp.pay_date,getdate()) * fine_rate / 100,2)
				end) fine,trcp.PAY_DATE
				from (          
				 select trcp.TAX_PLAN_CODE,trc.cust_id,trc.cust_code,
				     trcp.recp_id,
				     trcp.rect_id,
				     trcp.RECP_CODE,
				     trc.lease_code,
				     trcp.FUND_STATUS,
				     trcd.pay_date,
				     trcd.period_num, 
				     trcp.fine_type,
				     trcp.fine_rate,
				     isnull(trcd.IRR_MONTH_PRICE, 0)+isnull(trcd.VALUE_ADDED_TAX, 0) month_price,  
				     isnull(trcd.reduce_own_price, 0) reduce_price
				from t_rent_collectionplan trcp
				left join t_rent_contract trc on trcp.rect_id =
				trc.rect_id
				left join t_rent_collectiondetail trcd on trcp.recp_id =
				trcd.recp_id
				where trcp.status = 0 and trc.status=0
				  and (trcp.fund_status=0 or trcp.fund_status=1)
				 and  trcd.pay_date < = cast(getdate() as datetime)-1
				and isnull(trcd.IRR_MONTH_PRICE, 0)+isnull(trcd.VALUE_ADDED_TAX, 0)-isnull(trcd.reduce_own_price, 0)>0.001) trcp 
				left join  
				(select tfcb.recp_id, max(tfi.opposing_date) opposing_date,max(tfcb.RECD_PERIOD) RECD_PERIOD
				  from t_fina_collectionbill tfcb
				  left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
				 where tfi.opposing_date <= cast(getdate() as datetime)
				 and (tfcb.ficb_state=4 or tfcb.ficb_state=5)
				 and tfi.red_type is null 
				 group by recp_id
				 ) tfcd 
				on trcp.recp_id = tfcd.recp_id and tfcd.RECD_PERIOD=trcp.period_num
				where (case when tfcd.opposing_date is null or
				tfcd.opposing_date <= trcp.pay_date then
				datediff(d,trcp.pay_date,getdate()) else
				datediff(d,tfcd.opposing_date,getdate()) end) > 0 
				and trcp.FUND_STATUS='0'
			]]>
			<dynamic prepend="and">
				<![CDATA[
					trcp.cust_code=#cust_code#
				]]>
			</dynamic>			
			<![CDATA[			
				)t1
				group by t1.CUST_ID,t1.recp_id,t1.rect_id,t1.RECP_CODE,t1.lease_code,t1.TAX_PLAN_CODE) trcpd
				left join
				T_RENT_SETTLE tdfdr
				on trcpd.RECP_ID=tdfdr.RECP_ID
				and tdfdr.status = 0 and tdfdr.state = 1
			]]>	
		
		<!--  保证金 如我司  -->
		<!--  Marked by Michael 2011 12/8 保证金计算错误，用于抵充最后几期的此时不能按保证金销账，应用保证金B类销账 
		<![CDATA[
			union
			select 1 as renttype,
			       1 as sorder,
			       '000a' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       (case
			         when recp.start_date is not null then
			          convert(datetime,recp.start_date,23)
			         else
					  convert(datetime, getdate(),23)
			       end) as sdate,
			       recp.recp_code as paylist_code,
			       '保证金' as sobj,
			       0 as recd_period,
			       '保证金' as ficb_item,
			       1 as recd_type,
			       recp.pledge_enter_cmprice - (case
			         when exists (select ficb.ficb_item, sum(ficb.real_price)
			                 from t_fina_collectionbill ficb
			                where ficb.recp_code = recp.recp_code
			                  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                  and ficb.status = 0
			                group by ficb.ficb_item
			               having ficb.ficb_item = '保证金') then
			          (select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.ficb_item = '保证金'
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.recp_code = recp.recp_code)
			         else
			          0
			       end) as sprice
			  from t_rent_contract rect, t_rent_collectionplan recp
			 where recp.rect_id = rect.rect_id
			   and recp.fund_status = 0
			   and recp.status = 0
			   and recp.version_code =
			       (select max(version_code)
			          from t_rent_collectionplan recp2
			         where recp2.recp_code = recp.recp_code)
		]]>		
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
				]]>
		</dynamic>
		 -->
		<!--  保证金 如我司 A类  -->
		<![CDATA[
				union
				select 1 as renttype,
			       1 as sorder,
			       '000a' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       (case
			         when recp.start_date is not null then
			          convert(datetime,recp.start_date,23)
			         else
					  convert(datetime, getdate(),23)
			       end) as sdate,
			       recp.recp_code as paylist_code,
			       '保证金' as sobj,
			       0 as recd_period,
			       '保证金' as ficb_item,
			       1 as recd_type,
			       isnull(recp.PLEDGE_ENTER_MCTOAG,0) - 
			          isnull((select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.ficb_item = '保证金'
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.recp_code = recp.recp_code),0)
			         as sprice,recp.TAX_PLAN_CODE,'11111' as PRICE_TYPE
			  from t_rent_contract rect, t_rent_collectionplan recp
			 where recp.rect_id = rect.rect_id
			   and recp.fund_status = 0
			   and recp.status = 0
		]]>		
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
				]]>
		</dynamic>		
		<!--  保证金入我司 B类销账  Add By Michael 2011 12/7 -->
		<![CDATA[
		union
		select 1 as renttype,
			       1 as sorder,
			       '000b' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       (case
			         when recp.start_date is not null then
			          convert(datetime,recp.start_date,23)
			         else
					  convert(datetime, getdate(),23)
			       end) as sdate,
			       recp.recp_code as paylist_code,
			       '保证金B' as sobj,
			       0 as recd_period,
			       '保证金B' as ficb_item,
			       1 as recd_type,
			       recp.pledge_last_price - (case
			         when exists (select ficb.ficb_item, sum(ficb.real_price)
			                 from t_fina_collectionbill ficb
			                where ficb.recp_code = recp.recp_code
			                  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                  and ficb.status = 0
			                group by ficb.ficb_item
			               having ficb.ficb_item = '保证金B') then
			          (select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.ficb_item = '保证金B'
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.recp_code = recp.recp_code)
			         else
			          0
			       end) as sprice,recp.TAX_PLAN_CODE,'00000' as PRICE_TYPE
			  from t_rent_contract rect, t_rent_collectionplan recp
			 where recp.rect_id = rect.rect_id
			   and recp.fund_status = 0
			   and recp.status = 0
			  and (recp.pledge_last_price is not null and recp.pledge_last_price<>0)
		]]>		
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
			]]>
		</dynamic>	
		<!--  保证金入我司 C类销账 Add By Michael 2011 12/7  -->
		<![CDATA[
		union
		select 1 as renttype,
			       1 as sorder,
			       '000c' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       (case
			         when recp.start_date is not null then
			          convert(datetime,recp.start_date,23)
			         else
					  convert(datetime, getdate(),23)
			       end) as sdate,
			       recp.recp_code as paylist_code,
			       '保证金C' as sobj,
			       0 as recd_period,
			       '保证金C' as ficb_item,
			       1 as recd_type,
			       recp.PLEDGE_BACK_PRICE - (case
			         when exists (select ficb.ficb_item, sum(ficb.real_price)
			                 from t_fina_collectionbill ficb
			                where ficb.recp_code = recp.recp_code
			                  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                  and ficb.status = 0
			                group by ficb.ficb_item
			               having ficb.ficb_item = '保证金C') then
			          (select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.ficb_item = '保证金C'
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.recp_code = recp.recp_code)
			         else
			          0
			       end) as sprice,recp.TAX_PLAN_CODE,'00000' as PRICE_TYPE
			  from t_rent_contract rect, t_rent_collectionplan recp
			 where recp.rect_id = rect.rect_id
			   and recp.fund_status = 0
			   and recp.status = 0
			  and (recp.PLEDGE_BACK_PRICE is not null and recp.PLEDGE_BACK_PRICE<>0)
		]]>	
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
			]]>
		</dynamic>
		
		<!--  Add by Michael 2012 02/09 增加管理费等收入费用销账  -->
		<![CDATA[
		union
		select 1 as renttype,
		       1 as sorder,
		       '000a' as o,
		       rect.rect_id as lease_id,
		       recp.recp_id as paylist_id,
		       rect.lease_code as lease_code,
		       (case
		         when recp.start_date is not null then
		          convert(datetime,recp.start_date,23)
		         else
				  convert(datetime, getdate(),23)
		       end) as sdate,
		       recp.recp_code as paylist_code,
		       rcf.CREATE_SHOW_NAME as sobj,
		       0 as recd_period,
		       rcf.CREATE_SHOW_NAME as ficb_item,
		       1 as recd_type,
		      rcf.fee - 
		          isnull((select sum(ficb.real_price)
		             from t_fina_collectionbill ficb
		            where ficb.recp_code = recp.recp_code
		              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
		              and ficb.status = 0
		              and ficb.ficb_item = rcf.CREATE_SHOW_NAME
					),0)
		         as sprice,recp.TAX_PLAN_CODE,'11111' as PRICE_TYPE
		  from 
		t_rent_contract rect,
		t_rent_collectionplan   recp,
		t_rent_contract_feelist rcf
		 where recp.rect_id = rect.rect_id
		 and rect.RECT_ID=rcf.rect_id
		and recp.fund_status =0
		and recp.status = 0 and rect.STATUS=0
		and rcf.fee>0
		]]>
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
			]]>
		</dynamic>
		<!--  租金  -->
		<![CDATA[
			union
			select 1 as renttype,
			       6 as sorder,
				   right('0000' +cast(recd.period_num as varchar)+'h',4) as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       convert(varchar,recd.pay_date,23) as sdate,
			       recp.recp_code as paylist_code,
			       '第' + cast(recd.period_num as varchar) + '期租金' as sobj,
			       recd.period_num as recd_period,
			       '租金' as ficb_item,
			       2 as recd_type,
			       (recd.irr_month_price+isnull(recd.VALUE_ADDED_TAX,0)) - isnull((select sum(ficb.real_price)
			                 from t_fina_collectionbill ficb
			                where ficb.recp_code = recp.recp_code
			                  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                  and ficb.status = 0
			                  and (ficb.ficb_item = '租金' or ficb.ficb_item = '增值税')
			                  and ficb.recd_period = recd.period_num
			                group by ficb.recd_period,ficb.recp_code),0)  as sprice,recp.TAX_PLAN_CODE,'00000' as PRICE_TYPE
			  from t_rent_contract         rect,
			       t_rent_collectionplan   recp,
			       t_rent_collectiondetail recd
			 where recp.rect_id = rect.rect_id
			   and recd.recp_id = recp.recp_id
			   and recp.fund_status ='0'
			   and recp.status = 0 
			   and recd.status = 0
		]]>
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
				]]>
		</dynamic>
		<!--  设备税金  -->
		<![CDATA[
			union
			select 1 as renttype,
			       7 as sorder,
			       '000j' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       (case
			         when recp.start_date is not null then
			          convert(varchar,recp.start_date,23)
			         else
			           convert(varchar,getdate(), 23)
			       end) as sdate,
			       recp.recp_code as paylist_code,
			       '税金' as sobj,
			       0 as recd_period,
			       '税金' as ficb_item,
			       1 as recd_type,
			       isnull(recp.PLEDGE_ENTER_MCTOAGRATE,0) - 
			          isnull((select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.ficb_item = '税金'
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.recp_code = recp.recp_code),0)
			          as sprice,recp.TAX_PLAN_CODE,'11111' as PRICE_TYPE
			  from t_rent_contract rect, t_rent_collectionplan recp
			 where recp.rect_id = rect.rect_id
			   and recp.fund_status = 0
			   and recp.status = 0 
		]]>
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
				]]>
		</dynamic>		
		<!--  设备留购款 Add By Michael 2011 12/23  -->
		<![CDATA[
			union
			select 8 as renttype,
			       8 as sorder,
			       '000k' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       (case
			         when recp.END_DATE is not null then
			          convert(varchar,recp.END_DATE,23)
			         else
			           convert(varchar,getdate(), 23)
			       end) as sdate,
			       recp.recp_code as paylist_code,
			       '设备留购价' as sobj,
			       0 as recd_period,
			       '设备留购价' as ficb_item,
			       1 as recd_type,
			       rectd.staybuy_price - 
			          isnull((select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.ficb_item = '设备留购价'
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.recp_code = recp.recp_code),0)
			        -ISNULL((select DIFF_STAYBUY_PRICE from T_RENT_SETTLE trst
				where  trst.RECP_ID=recp.RECP_ID
				and trst.status = 0 and trst.state = 1),0) as sprice,recp.TAX_PLAN_CODE,'00000' as PRICE_TYPE
			  from t_rent_contract rect, t_rent_collectionplan recp,(select RECT_ID,SUM(isnull(staybuy_price,0)) staybuy_price from T_RENT_CONTRACTDETAIL where STATUS=0 group by RECT_ID) rectd
			 where recp.rect_id = rect.rect_id
			 	and recp.fund_status =0
			   and recp.status = 0 
			   and rectd.RECT_ID=rect.RECT_ID
		]]>
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
			]]>
		</dynamic>
		<!-- Add by Michael 2012 09-14 增加法务费用销账 -->
		<![CDATA[
		union
		select 9 as renttype,
		       9 as sorder,
		       '000L' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       convert(varchar,tlf.CREATE_TIME,23) as sdate,
			       recp.recp_code as paylist_code,
			       tlf.FEE_NAME as sobj,
			       tlf.id as recd_period,
			       tlf.FEE_NAME as ficb_item,
			       3 as recd_type,
			       tlf.FEE_VALUE - isnull(
			          (select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.recp_code = recp.recp_code
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.ficb_item = tlf.FEE_NAME
			              and ficb.recd_period = tlf.ID),0)
			         as sprice,recp.TAX_PLAN_CODE,'00000' as PRICE_TYPE
			  from t_rent_contract         rect,
			       t_rent_collectionplan   recp,
			(select t1.ID,t1.RECP_ID,t1.FEE_VALUE,tdd.FLAG FEE_NAME,t1.CREATE_TIME from T_LAWY_FEELIST t1 left join T_DATA_DICTIONARY tdd	on t1.FEE_NAME=tdd.CODE where t1.STATUS=0) tlf
			 where recp.rect_id = rect.rect_id
			   and tlf.recp_id = recp.recp_id
			   and recp.fund_status ='0'
			   and recp.status = 0 
		]]>
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
			]]>
		</dynamic>		
		<![CDATA[
			 ) g7  where (sprice>0.005 or sprice <-0.005) order by sdate,renttype, paylist_code, o
		]]>
	</select>
	<!--  正常结清   
	
			  replace(to_char(recd.period_num, '99'), ' ', '0') || 'f' as o,
			  replace(to_char(recd.period_num, '99'), ' ', '0') || 'g' as o,
			    replace(to_char(99, '99'), ' ', '0') || 'z' as o,    1290 1291
	 -->
	<select id="queryRecpNormalSettle" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select *
			  from (select 0 as renttype,
			               6 as sorder,
			               right('000'+cast(recd.period_num as varchar)+'f',4)  as o,
			               rect.rect_id as lease_id,
			               recp.recp_id as paylist_id,
			               rect.lease_code as lease_code,
			               convert(varchar,recd.pay_date, 23) as sdate,
			               recp.recp_code as paylist_code,
			               '第' + cast(recd.period_num as varchar) + '期利息' as sobj,
			               recd.period_num as recd_period,
			               '利息' as ficb_item,
			               2 as recd_type,
			               recd.ren_price - (case
			                 when exists 
			                  (select ficb.ficb_item, sum(ficb.real_price)
			                         from t_fina_collectionbill ficb
			                        where ficb.recp_code = recp.recp_code
			                          and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                 		  and ficb.status = 0
			                          and ficb.ficb_item = '利息'
			                          and ficb.recd_period = recd.period_num
			                        group by ficb.ficb_item) then
			                  (select sum(ficb.real_price)
			                     from t_fina_collectionbill ficb
			                    where ficb.recp_code = recp.recp_code
			                      and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              		  and ficb.status = 0
			                      and ficb.ficb_item = '利息'
			                      and ficb.recd_period = recd.period_num)
			                 else
			                  0
			               end) as sprice
			          from t_rent_contract         rect,
			               t_rent_collectionplan   recp,
			               t_rent_collectiondetail recd
			         where recp.rect_id = rect.rect_id
			           and recd.recp_id = recp.recp_id
			           and recp.fund_status = 0
			           and recp.status = 0 
			           and recp.version_code =
			               (select max(version_code)
			                  from t_rent_collectionplan recp2
			                 where recp2.recp_code = recp.recp_code)
			           and recp.recp_code = #recp_code#
			        union
			        select 0 as renttype,
			               6 as sorder,
						   right('000'+cast(recd.period_num as varchar)+'g',4)  as o,
			               rect.rect_id as lease_id,
			               recp.recp_id as paylist_id,
			               rect.lease_code as lease_code,
						   convert(varchar,recd.pay_date, 23) as sdate,
			               recp.recp_code as paylist_code,
			               '第' + cast(recd.period_num as varchar) + '期本金' as sobj,
			               recd.period_num as recd_period,
			               '本金' as ficb_item,
			               2 as recd_type,
			               recd.own_price - (case
			                 when exists 
			                  (select ficb.ficb_item, sum(ficb.real_price)
			                         from t_fina_collectionbill ficb
			                        where ficb.recp_code = recp.recp_code
			                          and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			               			  and ficb.status = 0
			                          and ficb.ficb_item = '本金'
			                          and ficb.recd_period = recd.period_num
			                        group by ficb.ficb_item) then
			                  (select sum(ficb.real_price)
			                     from t_fina_collectionbill ficb
			                    where ficb.recp_code = recp.recp_code
			                      and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                 	  and ficb.status = 0
			                      and ficb.ficb_item = '本金'
			                      and ficb.recd_period = recd.period_num)
			                 else
			                  0
			               end) as sprice
			          from t_rent_contract         rect,
			               t_rent_collectionplan   recp,
			               t_rent_collectiondetail recd
			         where recp.rect_id = rect.rect_id
			           and recd.recp_id = recp.recp_id
			           and recp.fund_status = 0
			           and recp.status = 0 
			           and recp.version_code =
			               (select max(version_code)
			                  from t_rent_collectionplan recp2
			                 where recp2.recp_code = recp.recp_code)
			           and recp.recp_code = #recp_code#
			        union
			        ]]>
			     <!-- 修改设备留构价
			        select 0 as renttype,
			               6 as sorder,
			              '099z' as o,
			               rect.rect_id as lease_id,
			               recp.recp_id as paylist_id,
			               rect.lease_code as lease_code,
			              convert(varchar,recp.end_date, 23) as sdate,
			               recp.recp_code as paylist_code,
			               '设备留购价' as sobj,
			               0 as recd_period,
			               '设备留购价' as ficb_item,
			               2 as recd_type,
			               isnull(sum(rectd.staybuy_price),0) as sprice
			          from t_rent_contract         rect,
			               t_rent_collectionplan   recp,
			               t_rent_collectiondetail recd,
			               t_rent_contractdetail   rectd
			         where recp.rect_id = rect.rect_id
			           and recd.recp_id = recp.recp_id
			           and recp.recp_id = rectd.recp_id
			           and recp.fund_status = 0
			           and recp.status = 0 
			           and recp.version_code =
			               (select max(version_code)
			                  from t_rent_collectionplan recp2
			                 where recp2.recp_code = recp.recp_code)
			           and recp.recp_code = #recp_code#
			         group by rect.rect_id,
			                  recp.recp_id,
			                  rect.lease_code,
			                  convert(varchar,recp.end_date, 23),
			                  recp.recp_code) g9
			 where (sprice > 0.005 or sprice < -0.005) 
			 order by paylist_code, o
			 -->
		<![CDATA[
			 	 select 
			        	   0 as renttype,
			               6 as sorder,
			               '099z' as o,
			               rect.rect_id as lease_id,
			               recp.recp_id as paylist_id,
			               rect.lease_code as lease_code,
			               convert(varchar,recp.end_date, 23) as sdate,
			               recp.recp_code as paylist_code,
			               '设备留购价' as sobj,
			               0 as recd_period,
			               '设备留购价' as ficb_item,
			               2 as recd_type,
			               isnull(sum(rectd.staybuy_price), 0) as sprice
			          from t_rent_contract         rect,
			               t_rent_collectionplan   recp,
			               t_rent_contractdetail   rectd
			         where recp.rect_id = rect.rect_id
			           and recp.recp_id = rectd.recp_id
			           and recp.fund_status = 0
			           and recp.version_code =
			               (select max(version_code)
			                  from t_rent_collectionplan recp2
			                 where recp2.recp_code = recp.recp_code)
			           and recp.recp_code =  #recp_code#
			         group by rect.rect_id,
			                  recp.recp_id,
			                  rect.lease_code,
			                   convert(varchar,recp.end_date, 23),
			                  recp.recp_code) g11
			 where (sprice > 0.005 or sprice < -0.005)
			 order by paylist_code, o
		]]>
	</select>
	<!--  提前结清 
			  replace(to_char(0, '999'), ' ', '0') || 'c' as o,
			 replace(to_char(recd.period_num, '99'), ' ', '0') || 'g' as o,  1384
			 	               replace(to_char(99, '99'), ' ', '0') || 'z' as o, 1430  -->
	<select id="queryRecpAheadSettle" parameterClass="map" resultClass="java.util.HashMap" >
		<!--  
		SELECT 
			distinct 0 as renttype,
		   6 as sorder,
		    'jq'  as o,
		   rect.rect_id  as lease_id,
		   recp.recp_id as paylist_id,
		   rect.lease_code as lease_code,
		   recp.recp_code as paylist_code,
		   2 as recd_type,
		   rese.*
		FROM 
			t_rent_contract         rect
			LEFT JOIN T_rent_collectionplan   recp ON RECP.RECT_ID = rect.RECT_ID AND recp.STATUS = 0
			LEFT JOIN t_rent_collectiondetail recd ON recd.RECP_ID = recp.RECP_ID AND recd.STATUS = 0
			LEFT JOIN T_RENT_SETTLE rese ON rese.RECP_ID = recp.RECP_ID AND rese.STATUS = 0
		WHERE
			rect.STATUS = 0 
			AND rese.STATE = 1
			AND recp.RECP_CODE = #recp_code#
			 -->
			<!--  Modify By Michael 2011 12/28 增加逾期罚息的计算,修改留购款的修改  -->
			<!--  <![CDATA[
				SELECT 
				T.renttype,
				T.sorder,
				T.o,
				T.lease_id,
				T.paylist_id ,
				T.lease_code,
				T.paylist_code,
				T.recd_type,
				T.SETTLE_DATE,
				MIN(T.REAL_OWN_PRICE) REAL_OWN_PRICE,
				MIN(T.REAL_REN_PRICE) REAL_REN_PRICE,
				MIN(T.REAL_BREACH_PRICE) REAL_BREACH_PRICE,
				MIN(T.REAL_DAMAGE_PRICE) REAL_DAMAGE_PRICE,
				MIN(T.REAL_STAYBUY_PRICE) REAL_STAYBUY_PRICE,
				MIN(T.REAL_OTHER_PRICE) REAL_OTHER_PRICE
				FROM 
				(
					SELECT 
							distinct 0 as renttype,
						   6 as sorder,
						    'jq'  as o,
						   rect.rect_id  as lease_id,
						   recp.recp_id as paylist_id,
						   rect.lease_code as lease_code,
						   recp.recp_code as paylist_code,
						   2 as recd_type ,
						   rese.SETTLE_DATE,
						   rese.REAL_OWN_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingbenjin#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_OWN_PRICE ,
						   
						    rese.REAL_REN_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqinglixi#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_REN_PRICE ,
						   
						    rese.REAL_BREACH_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingweiyuejin#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_BREACH_PRICE ,
						    rese.REAL_DAMAGE_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingsunhaijin#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_DAMAGE_PRICE ,
						    rese.REAL_STAYBUY_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingliugoujia#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_STAYBUY_PRICE ,
						    rese.REAL_OTHER_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingqitafeiyong#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_OTHER_PRICE
						FROM 
							t_rent_contract         rect
							LEFT JOIN T_rent_collectionplan   recp ON RECP.RECT_ID = rect.RECT_ID AND recp.STATUS = 0
							LEFT JOIN t_rent_collectiondetail recd ON recd.RECP_ID = recp.RECP_ID AND recd.STATUS = 0
							LEFT JOIN T_RENT_SETTLE rese ON rese.RECP_ID = recp.RECP_ID AND rese.STATUS = 0
							LEFT JOIN 
								(SELECT RECP_ID,FICB_ITEM,SUM(REAL_PRICE) REAL_PRICE FROM T_FINA_COLLECTIONBILL WHERE STATUS = 0 AND (FICB_STATE = 4 OR FICB_STATE = 5) AND FICB_TYPE = 0 GROUP BY RECP_ID,FICB_ITEM)
								T ON T.RECP_ID = RECP.RECP_ID 
						WHERE
							rect.STATUS = 0 
							AND rese.STATE = 1
							AND recp.RECP_CODE = #recp_code#
					) T
					GROUP BY T.renttype,
							T.sorder,
							T.o,
							T.lease_id,
							T.paylist_id ,
							T.lease_code,
							T.paylist_code,
							T.recd_type,
							T.SETTLE_DATE
			]]>
			 -->
			<![CDATA[
			SELECT 
				T.renttype,
				T.sorder,
				T.o,
				T.lease_id,
				T.paylist_id ,
				T.lease_code,
				T.paylist_code,
				T.recd_type,
				T.SETTLE_DATE,
				MIN(T.REAL_OWN_PRICE) REAL_OWN_PRICE,
				MIN(T.REAL_REN_PRICE) REAL_REN_PRICE,
				MIN(T.REAL_BREACH_PRICE) REAL_BREACH_PRICE,
				MIN(T.REAL_DAMAGE_PRICE) REAL_DAMAGE_PRICE,
				MIN(T.REAL_STAYBUY_PRICE) REAL_STAYBUY_PRICE,
				MIN(T.REAL_OTHER_PRICE) REAL_OTHER_PRICE,
        		min(T.REAL_DUN_PRICE) REAL_DUN_PRICE,
        		min(T.REAL_TOTAL_LAWYFEE) REAL_TOTAL_LAWYFEE ,min(T.TAX_PLAN_CODE) TAX_PLAN_CODE
				FROM 
				(
					SELECT 
							distinct 0 as renttype,
						   6 as sorder,
						    'jq'  as o,
						   rect.rect_id  as lease_id,
						   recp.recp_id as paylist_id,
						   rect.lease_code as lease_code,
						   recp.recp_code as paylist_code,
						   2 as recd_type ,
						   rese.SETTLE_DATE,
						   rese.REAL_OWN_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingbenjin#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_OWN_PRICE ,
						   
						    rese.REAL_REN_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqinglixi#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_REN_PRICE ,
						   
						    rese.REAL_BREACH_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingweiyuejin#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_BREACH_PRICE ,
						    rese.REAL_DAMAGE_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingsunhaijin#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_DAMAGE_PRICE ,
						    rese.REAL_STAYBUY_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingliugoujia#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_STAYBUY_PRICE ,
						    rese.REAL_OTHER_PRICE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqingqitafeiyong#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_OTHER_PRICE,
			               rese.REAL_DUN_PRICE-(
			               CASE 
							WHEN T.FICB_ITEM = #jieqingfaxi#
							THEN T.REAL_PRICE
							ELSE 0
							END
			               ) REAL_DUN_PRICE,
					    rese.REAL_TOTAL_LAWYFEE - (
							CASE 
							WHEN T.FICB_ITEM = #jieqinglawyfeiyong#
							THEN T.REAL_PRICE
							ELSE 0
							END
						   ) REAL_TOTAL_LAWYFEE,recp.TAX_PLAN_CODE 
						FROM 
							t_rent_contract         rect
							LEFT JOIN T_rent_collectionplan   recp ON RECP.RECT_ID = rect.RECT_ID AND recp.STATUS = 0
							LEFT JOIN t_rent_collectiondetail recd ON recd.RECP_ID = recp.RECP_ID AND recd.STATUS = 0
							LEFT JOIN T_RENT_SETTLE rese ON rese.RECP_ID = recp.RECP_ID AND rese.STATUS = 0
							LEFT JOIN 
						(SELECT RECP_ID,FICB_ITEM,SUM(REAL_PRICE) REAL_PRICE FROM T_FINA_COLLECTIONBILL 
            WHERE STATUS = 0 AND (FICB_STATE = 4 OR FICB_STATE = 5) AND FICB_TYPE = 0 GROUP BY RECP_ID,FICB_ITEM)
								T ON T.RECP_ID = RECP.RECP_ID 
						WHERE
							rect.STATUS = 0 
							AND rese.STATE = 1
							AND recp.RECP_CODE = #recp_code#
					) T
					GROUP BY T.renttype,
							T.sorder,
							T.o,
							T.lease_id,
							T.paylist_id ,
							T.lease_code,
							T.paylist_code,
							T.recd_type,
							T.SETTLE_DATE
			]]>				
	</select>
	<!--  删除分解单（分解中的和财务驳回的）  -->
	<delete id="deleteDecomposeBill" parameterClass="map">
		<![CDATA[
			delete from t_fina_collectionbill  
			 where  fiin_id = #select_income_id#
			   and ( ficb_state = 3 or  ficb_state = 1)
		]]>
	</delete>
	<!--  插入分解单信息  -->
	<!-- 增加租金分解标记，是手动分解还是自动分解 DEPOSIT_FLAG -->
	<insert id="addDecomposeBill" parameterClass="map">
		<![CDATA[
			insert into t_fina_collectionbill
			  ( 
			   recp_id,
			   recp_code,
			   pay_date,
			   recd_period,
			   ficb_item,
			   should_price,
			   real_price,
			   fiin_id,
			   cust_code,
			   ficb_state,
			   ficb_type,
			   recd_type,
			   item_order,
			   decompose_id,
			   decompose_date,
			   status,
			   create_date,
			   modify_date,
			   type,
			   DEPOSIT_FLAG,
			   PRINCIPAL_RUNCODE,
			   REAL_OWN_PRICE,ori_principal_runcode,SUPL_CODE
			   )
			values
			  ( 
			   #recp_id#,
			   #recp_code#,
			   convert(datetime,#pay_date# ),
			   #recd_period#,
			   #ficb_item#,
			   #should_price#,
			   #real_price#,
			   #fiin_id#,
			   #cust_code#,
			   #ficb_state#,
			   #ficb_type#,
			   #recd_type#,
			   #item_order#,
			   #decompose_id#,
			   getdate(),
			   0,
			    getdate(),
				 getdate(),
				 0,
				 #DEPOSIT_FLAG#,#principal_rundode#,#real_own_price#,#ori_principal_runcode#,#SUPL_CODE#)
		]]>
	</insert>
	<!--  修改来款的分解状态  -->
	<update id="updateIncomeStatus" parameterClass="map">
		<![CDATA[
			update t_fina_income  
			   set  decompose_status = #decompose_status#,
			        ficb_flag = #ficb_flag#
			 where  fiin_id = #select_income_id#
		]]>
	</update>
	<!--  修改分解单的分解状态  -->
	<update id="updateDecomposeStatus" parameterClass="map">
		<![CDATA[
			update t_fina_collectionbill  
			   set 
		   ]]>
		<dynamic>
			<isNotEmpty prepend="" property="check_id">
				<![CDATA[
		   				 check_id = #check_id#,
			       		 check_date = getdate(),
		   			]]>
			</isNotEmpty>
		</dynamic>
		<![CDATA[
		   		 ficb_state = #decompose_status#
			 where  fiin_id = #select_income_id#
		]]>
	</update>
	<!--  根据分解单编号查询该分解单信息  -->
	<select id="queryDecomposeBill" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
			select recp.cust_name,
			       recp.lease_code,
			       ficb.recp_code,
			       convert(varchar,ficb.pay_date,23) pay_date,
			       (case
			         when ficb.recd_period != 0 then
			          '第' + cast(ficb.recd_period  as varchar)+ '期' +  cast(ficb.ficb_item as varchar)
			         else
			          ficb.ficb_item
			       end) ficb_item,
			       ficb.should_price,
			       ficb.real_price
			  from t_fina_collectionbill ficb
			  left join (select recp.*, rect.lease_code, rect.cust_name
			               from t_rent_collectionplan recp
			               left join t_rent_contract rect on recp.rect_id = rect.rect_id
			              where recp.version_code =
			                    (select max(recp2.version_code)
			                       from t_rent_collectionplan recp2
			                      where recp.recp_code = recp2.recp_code)) recp on ficb.recp_id =
			                                                                       recp.recp_id
			 where ficb.status = 0
			   and ficb.fiin_id=#select_income_id#
			order by ficb.recp_code,ficb.item_order
		]]>
	</select>
	<!--  根据分解单编号查询该分解单的操作人信息  -->
	<!-- Modify by Michael 2012 1/6 增加冲红确认人  -->
	<select id="queryDecomposeEmp" parameterClass="map"
		resultClass="java.util.HashMap">
		<!--  
		<![CDATA[
			select max(decompose_name) decompose_name,
			       max(decompose_date) decompose_date,
			       max(check_name) check_name,
			       max(check_date) check_date,
			       sum(real_price) real_price,
			       max(cust_code) cust_code,
			       max(cust_name) cust_name
			  from (select (select max(usus.name)
			                  from t_user_user usus
			                 where usus.id = ficb.decompose_id) decompose_name,
			               ficb.decompose_date,
			               (select max(usus.name)
			                  from t_user_user usus
			                 where usus.id = ficb.check_id) check_name,
			               ficb.check_date,
			               ficb.fiin_id,
			               ficb.real_price,
			               ficb.cust_code,
			               rect.cust_name
			          from t_fina_collectionbill ficb
			          left join (select cust_code, cust_name
			                      from t_rent_contract
			                     group by cust_code, cust_name) rect on ficb.cust_code =
			                                                            rect.cust_code
			        where ficb.status = 0) ficb
		]]>
	-->
	<![CDATA[
		select max(decompose_name) decompose_name,
			       max(decompose_date) decompose_date,
			       max(check_name) check_name,
			       max(check_date) check_date,
             max(red_check_name) red_check_name,
              max(red_check_date) red_check_date,
			       sum(real_price) real_price,
			       max(cust_code) cust_code,
			       max(cust_name) cust_name
			  from (select (select max(usus.name)
			                  from t_user_user usus
			                 where usus.id = ficb.decompose_id) decompose_name,
			               ficb.decompose_date,
			               (select max(usus.name)
			                  from t_user_user usus
			                 where usus.id = ficb.check_id) check_name,
			               ficb.check_date,
                         (select max(usus.name)
			                  from t_user_user usus
			                 where usus.id = ficb.RED_CHECK_ID) red_check_name,
			               ficb.red_check_date,
			               ficb.fiin_id,
			               ficb.real_price,
			               ficb.cust_code,
			               rect.cust_name
			          from t_fina_collectionbill ficb
			          left join (select cust_code, cust_name
			                      from t_rent_contract
			                     group by cust_code, cust_name) rect on ficb.cust_code =
			                                                            rect.cust_code
			        where ficb.status = 0) ficb
		]]>
		<dynamic prepend="where">
			<isNotEmpty>
				<![CDATA[
					ficb.fiin_id=#select_income_id#
				]]>
			</isNotEmpty>
		</dynamic>
	</select>
	<!--  根据承租人编号查询该承租人的支付表信息  -->
	<select id="queryRecpInfo" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
			select recp.recp_id, recp.recp_code
			  from t_rent_collectionplan recp
			  left join t_rent_contract rect on recp.rect_id = rect.rect_id
			 where recp.recp_id =
			       (select max(recp3.recp_id)
			          from (select recp2.recp_id,
			                       recp2.recp_code,
			                       recp2.rect_id,
			                       recp2.status,
			                       recp2.version_code
			                  from t_rent_collectionplan recp2
			                 where recp2.status = 0
			                   and recp2.version_code =
			                       (select max(recp4.version_code)
			                          from t_rent_collectionplan recp4
			                         where recp4.recp_code = recp2.recp_code)) recp3
			          left join t_rent_contract rect on recp3.rect_id = rect.rect_id
			                                        and rect.cust_code = #cust_code#)
		]]>
	</select>
	<!--  查询所有财务确认信息的个数  -->
	<select id="queryCheckDecomposeInfo_count" parameterClass="map"
		resultClass="java.lang.Integer">
		<![CDATA[
 		select count(1) as cnt
		  from (select fiin.fiin_id,
				       convert(varchar,fiin.opposing_date,23) opposing_date,
				       fiin.opposing_unit,
				       fiin.opposing_type,
				       fiin.income_money,
				       ficb.cust_name,
				       ficb.decompose_name,
				       ficb.decompose_date,
				       fiin.decompose_status,
				       baba.account_no,
				       baba.bank_name
				  from t_fina_income fiin
				  left join (select rect.cust_name,
				                    ficb.fiin_id,
				                    max(usus.name) decompose_name,
				                    max(convert(varchar,ficb.decompose_date, 23)) decompose_date
				               from t_fina_collectionbill ficb
				               left join (select rect.cust_code, rect.cust_name
				                           from t_rent_contract rect
				                          group by rect.cust_code, rect.cust_name) rect on ficb.cust_code =
				                                                                           rect.cust_code
				               left join t_user_user usus on ficb.decompose_id = usus.id
				             where ficb.status = 0
				              group by rect.cust_name, ficb.fiin_id) ficb on fiin.fiin_id =
				                                                             ficb.fiin_id
				  left join (select tbba.account_no, tbbi.bank_name
				               from t_bank_bankaccount tbba
				               left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
				              where tbba.status = 0
				                and tbbi.status = 0) baba on fiin.receipt_bankno =
				                                             baba.account_no
				 where (fiin.decompose_status = 1 or fiin.decompose_status = 4 or
				       fiin.decompose_status = 5)
				   and fiin.status = 0
		]]>
		<dynamic prepend="and">
			<isNotEmpty prepend="and" property="search_opposingunit">
				<![CDATA[
				fiin.opposing_unit LIKE '%$search_opposingunit$%'   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_beginopposingdate">
				<![CDATA[
				convert(datetime,convert(varchar,fiin.opposing_date,23))
				 >= 
				 convert(datetime,#search_beginopposingdate# )   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_endopposingdate">
				<![CDATA[
				convert(datetime,convert(varchar,fiin.opposing_date,23))
				<= 
				 convert(datetime,#search_endopposingdate# )   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_fiin_id">
				<![CDATA[
				fiin.fiin_id=#search_fiin_id#   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_beginincomemoney">
				<![CDATA[
				fiin.income_money >= #search_beginincomemoney# 
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_endincomemoney">
				<![CDATA[
				fiin.income_money <= #search_endincomemoney#   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_decomposename">
				<![CDATA[
				ficb.decompose_name = #search_decomposename#   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_begindecomposedate">
				<![CDATA[
				convert(datetime,convert(varchar,ficb.decompose_date,23))
				 >= 
				convert(datetime,#search_begindecomposedate# )   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_enddecomposedate">
				<![CDATA[
				convert(datetime,convert(varchar,ficb.decompose_date,23))
				 <= 
				 convert(datetime,#search_enddecomposedate# )   
				]]>
			</isNotEmpty>
			<isNotEmpty property="search_bankname">
				<isNotEqual compareValue="全部" prepend="and"
					property="search_bankname">
					<![CDATA[
						baba.bank_name=#search_bankname#
					]]>
					<isNotEqual compareValue="全部" prepend="and"
						property="search_bankno">
						<![CDATA[
							baba.account_no=#search_bankno#
						]]>
					</isNotEqual>
				</isNotEqual>
			</isNotEmpty>
			<isNotEmpty property="search_decomposestatus">
				<isNotEqual compareValue="0" prepend="and"
					property="search_decomposestatus">
					<![CDATA[
						fiin.decompose_status=#search_decomposestatus#
					]]>
				</isNotEqual>
			</isNotEmpty>
		</dynamic>
		<![CDATA[
			) t
		]]>
	</select>

	<!--  财务分解中查询提交财务的分解单信息  -->
	<select id="queryCheckDecomposeInfo" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
 		select *
		  from (select fiin.fiin_id,
				       convert(varchar,fiin.opposing_date,23) opposing_date,
				       fiin.opposing_unit,
				       fiin.opposing_type,
				       fiin.income_money,
				       ficb.cust_name,
				       ficb.decompose_name,
				       ficb.decompose_date,
				       fiin.decompose_status,
				       baba.account_no,
				       baba.bank_name,
				       fiin.DEPOSE_CUSTOMER,
				       fiin.opposing_bankno,
				       fiin.virtual_code,
				       q.qty
				  from t_fina_income fiin
				  left join (
				  	select fiin_id,count(*) as qty from T_TRANSFERCERTIFICATE_FILE 
					where STATUS = 0
					group by fiin_id			  
				  ) q on q.fiin_id = fiin.fiin_id
				  left join (select rect.cust_name,
				                    ficb.fiin_id,
				                    max(usus.name) decompose_name,
				                    max(convert(varchar,ficb.decompose_date, 23)) decompose_date
				               from t_fina_collectionbill ficb
				               left join (select rect.cust_code, rect.cust_name
				                           from t_rent_contract rect
				                          group by rect.cust_code, rect.cust_name) rect on ficb.cust_code =
				                                                                           rect.cust_code
				               left join t_user_user usus on ficb.decompose_id = usus.id
				             where ficb.status = 0
				              group by rect.cust_name, ficb.fiin_id) ficb on fiin.fiin_id =
				                                                             ficb.fiin_id
				  left join (select tbba.account_no, tbbi.bank_name
				               from t_bank_bankaccount tbba
				               left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
				              where tbba.status = 0
				                and tbbi.status = 0) baba on fiin.receipt_bankno =
				                                             baba.account_no
				 where (fiin.decompose_status = 1 or fiin.decompose_status = 4 or
				       fiin.decompose_status = 5)
				   and fiin.status = 0
		]]>
		<dynamic prepend="and">
			<isNotEmpty prepend="and" property="search_opposingunit">
				<![CDATA[
				fiin.opposing_unit LIKE '%$search_opposingunit$%'   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_beginopposingdate">
				<![CDATA[
					convert(datetime,convert(varchar,fiin.opposing_date,23))
						>= 
				convert(datetime,#search_beginopposingdate# )   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_endopposingdate">
				<![CDATA[
				convert(datetime,convert(varchar,fiin.opposing_date,23))
				 <= 
				 convert(datetime,#search_endopposingdate# )   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_fiin_id">
				<![CDATA[
				fiin.fiin_id=#search_fiin_id#   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_beginincomemoney">
				<![CDATA[
				fiin.income_money >= #search_beginincomemoney# 
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_endincomemoney">
				<![CDATA[
				fiin.income_money <= #search_endincomemoney#   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="search_decomposename">
				<![CDATA[
				ficb.decompose_name = #search_decomposename#   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_begindecomposedate">
				<![CDATA[
					convert(datetime,convert(varchar,ficb.decompose_date,23))
						>=
				 convert(datetime,#search_begindecomposedate# )   
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and"
				property="search_enddecomposedate">
				<![CDATA[
					convert(datetime,convert(varchar,ficb.decompose_date,23))
					<=
					 convert(datetime,#search_enddecomposedate# )   
				]]>
			</isNotEmpty>
			<isNotEmpty property="search_bankname">
				<isNotEqual compareValue="全部" prepend="and"
					property="search_bankname">
					<![CDATA[
						baba.bank_name=#search_bankname#
					]]>
					<isNotEqual compareValue="全部" prepend="and"
						property="search_bankno">
						<![CDATA[
							baba.account_no=#search_bankno#
						]]>
					</isNotEqual>
				</isNotEqual>
			</isNotEmpty>
			<isNotEmpty property="search_decomposestatus">
				<isNotEqual compareValue="0" prepend="and"
					property="search_decomposestatus">
					<![CDATA[
						fiin.decompose_status=#search_decomposestatus#
					]]>
				</isNotEqual>
			</isNotEmpty>
		</dynamic>
		<![CDATA[
			) t
		 order by decompose_status, opposing_date desc
		]]>
	</select>
	<!--  根据分解单编号查询各个分解项的实收金额和  -->
	<select id="queryItemMoney" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
			select ficb.recp_id,
			       ficb.recd_period,
			       ficb.ficb_item,
			       sum(ficb.real_price) real_price,
			       ficb.fiin_id,
			       rect.cust_name,
			       rect.cust_code,
			       t.OPPOSING_BANKNAME
			  from t_fina_collectionbill ficb
			  left join (select rect.cust_code, rect.cust_name
			               from t_rent_contract rect
			              group by rect.cust_code, rect.cust_name) rect on ficb.cust_code =
			                                                               rect.cust_code
			  left join T_FINA_INCOME t on t.FIIN_ID=ficb.FIIN_ID
			 where ficb.fiin_id = #select_income_id#
			   and ficb.status = 0
			 group by ficb.recp_id,
			          ficb.recd_period,
			          ficb.ficb_item,
			          ficb.fiin_id,
			          rect.cust_name,
			          rect.cust_code,
			           t.OPPOSING_BANKNAME	
			 order by ficb.fiin_id, ficb.recp_id, ficb.recd_period
		]]>
	</select>
		<!--  根据分解单编号查询各个分解项的实收金额和  -->
	<select id="queryoldItemMoney" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
			select ficb.recp_id,
			       ficb.recd_period,
			       ficb.ficb_item,
			       sum(ficb.real_price) real_price,
			       ficb.fiin_id,
			       rect.cust_name,
			       rect.cust_code,
			       t.OPPOSING_BANKNAME
			  from t_fina_collectionbill ficb
			  left join (select rect.cust_code, rect.cust_name
			               from t_rent_contract rect
			              group by rect.cust_code, rect.cust_name) rect on ficb.cust_code =
			                                                               rect.cust_code
			  left join T_FINA_INCOME t on t.FIIN_ID=ficb.FIIN_ID
			 where ficb.fiin_id = #NEWLEFT_ID#
			   and ficb.status = 0
			 group by ficb.recp_id,
			          ficb.recd_period,
			          ficb.ficb_item,
			          ficb.fiin_id,
			          rect.cust_name,
			          rect.cust_code,
			           t.OPPOSING_BANKNAME	
			 order by ficb.fiin_id, ficb.recp_id, ficb.recd_period
		]]>
	</select>
	<!--  插入待分解来款  -->
	<!--  Modify by Michael 2012 3-7 有待分解来款时增加来款账号、对方等信息  -->
	<!-- Modify by Michael 2012 3-9 增加来款上传流水号 -->
	<insert id="addIncomeAsLeft" parameterClass="map">
		insert into t_fina_income (  receipt_bankno,
		opposing_bankno, opposing_unit, opposing_date, opposing_type,
		income_money, left_id, type,OPPOSING_BANKNAME,virtual_code,upload_time,income_finance_code) values ( 
		#receipt_bankno#, #opposing_bankno#, #opposing_unit#,
		convert(datetime,#opposing_date# ), #opposing_type#,
		#income_money#, #left_id#, #type#,#opposing_bankName#,#virtual_code#,#upload_time#,#income_finance_code#)
		<selectKey resultClass="java.lang.Long" keyProperty="PK">
			<![CDATA[	select @@IDENTITY as PK  ]]>
		</selectKey>
	</insert>
	<!--  反更支付表中的已分解的本金数额  -->
	<update id="updateMonthPrice" parameterClass="map">
		update t_rent_collectiondetail  
		   set  reduce_own_price = isnull(reduce_own_price,0)+(#real_price#)
		 where  recp_id = #recp_id#
		   and  period_num = #period_num#
	</update>
	<!--  当财务驳回正常分解单或者冲红财务通过的时候要将已分解本金回更为0  -->
	<update id="updateMonthPriceWhenConfirm" parameterClass="map">
		update t_rent_collectiondetail  
		   set  reduce_own_price = isnull(reduce_own_price,0)+(#real_price#)
		 where  recp_id = #recp_id#
		   and  period_num = #period_num#
	</update>
	<!--  修改来款的资金备注（资金管理员）  -->
	<update id="updateOperateRemark" parameterClass="map">
		update t_fina_income 
		   set  operate_remark = #operate_remark#,
		        operate_id     = #s_employeeId#,
		        operate_time   = getdate()
		 where  fiin_id = #select_incomeid#
	</update>
	<!--  修改支付表资金状态  -->
	<update id="updateRecpStatus" parameterClass="map">
		update t_rent_collectionplan  
			   set  fund_status = #recp_status# ,
			   recp_status = #recp_status#
   			<isNotEmpty prepend="" property="recp_status">
				<isNotEqual prepend="" property="recp_status" compareValue="5">
					<isNotEqual prepend="" property="recp_status" compareValue="0">
						,SETTLE_DATE = getDate()
					</isNotEqual>
				</isNotEqual>
			</isNotEmpty>
			 where  recp_id = #recp_id#
	</update>
	
	<!--  查询所有未分解来款  -->
	<select id="getAllunincome" parameterClass="map" resultClass="java.util.HashMap">
		
		<!-- 	select fiin_id,
			       opposing_date,
			       substring(Ltrim(OPPOSING_BANKNO), 3, len(Ltrim(OPPOSING_BANKNO))) cust_code,
			       INCOME_MONEY
			  from T_FINA_INCOME
			 where decompose_status = 2 or decompose_status = 1
			   and opposing_bankno is not null
			   and substring(Ltrim(OPPOSING_BANKNO), 3, len(Ltrim(OPPOSING_BANKNO))) in
			       (select CUST_CODE from T_RENT_CONTRACT where STATUS = 0)  -->
		
		<![CDATA[
	select tfi.fiin_id,
			       tfi.opposing_date,
			       tfi.virtual_code cust_code,
			       tfi.INCOME_MONEY
			  from T_FINA_INCOME tfi
        left join T_CUST_CUSTOMER tcc on tfi.virtual_code = tcc.virtual_code and tcc.STATUS = 0
			 where (tfi.decompose_status = 2 or tfi.decompose_status = 1) and tfi.status=0
			   and tfi.receipt_bankno is not null
			   and tfi.virtual_code is not null
			   AND CONVERT(DATE,UPLOAD_TIME)=CONVERT(DATE,GETDATE())
		]]>
	</select>
	<select id="getAllunincomeRECP" parameterClass="map" resultClass="java.util.HashMap">
		<!--   <![CDATA[
			SELECT 
			   distinct t.*
			FROM(	
					select  fiin_id,
							opposing_date,
							substring(Ltrim(OPPOSING_BANKNO), 3, len(Ltrim(OPPOSING_BANKNO))) cust_code,
							INCOME_MONEY
					from T_FINA_INCOME
					where decompose_status = 2 or decompose_status = 1
					and opposing_bankno is not null
					and substring(Ltrim(OPPOSING_BANKNO), 3, len(Ltrim(OPPOSING_BANKNO))) in
						   (select CUST_CODE from T_RENT_CONTRACT where STATUS = 0)
				 ) T
				LEFT JOIN T_RENT_CONTRACT T1 ON T1.CUST_CODE = T.CUST_CODE  AND T1.STATUS = 0
				LEFT JOIN T_RENT_COLLECTIONPLAN T2 ON T2.RECT_ID = T1.RECT_ID AND T2.STATUS = 0 
			WHERE
				 T2.RECP_STATUS = 0 
				 AND T2.FUND_STATUS = 0
		 ]]>   -->
		 <![CDATA[
  			SELECT 
			   distinct t.*
			FROM
			(select T.*,T3.CUST_CODE CUST_CODE,T3.CUST_NAME from 
				(	  select tfi.fiin_id,
			       tfi.opposing_date,
			       tfi.virtual_code newcust_code,
			       round(tfi.INCOME_MONEY,2) INCOME_MONEY,tfi.UPLOAD_TIME
			  from T_FINA_INCOME tfi
        left join T_CUST_CUSTOMER tcc on tfi.virtual_code = tcc.virtual_code and tcc.STATUS = 0
			 where (tfi.decompose_status = 2 or tfi.decompose_status = 1) and tfi.status=0
			   and tfi.receipt_bankno is not null
			   and tfi.virtual_code is not null                
				 ) T
				LEFT JOIN T_CUST_CUSTOMER  T3 ON T3.virtual_code=T.newcust_code and T3.STATUS=0
			) t 
				LEFT JOIN T_RENT_CONTRACT T1 ON T1.CUST_CODE = t.CUST_CODE  AND T1.STATUS = 0
				LEFT JOIN T_RENT_COLLECTIONPLAN T2 ON T2.RECT_ID = T1.RECT_ID AND T2.STATUS = 0 
			WHERE
				 T2.RECP_STATUS = 0  
				 AND T2.FUND_STATUS = 0
				 AND CONVERT(DATE,t.UPLOAD_TIME)=CONVERT(DATE,GETDATE())
		 ]]>
	</select>
	
	<!--  
	查询所有财务需确认的分解信息
	  -->
	  <!--  Modify by Michael 2012 3-7 有待分解来款时增加来款账号、对方等信息  -->
	<select id="getAllunincomes" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
 		select fiin.income_finance_code,
 				fiin.fiin_id,
 			   convert(datetime,convert(varchar,fiin.opposing_date, 23)) opposing_date,
		       fiin.opposing_unit,
		       fiin.opposing_type,
		       fiin.income_money,
		       ficb.cust_name,
		       ficb.decompose_name,
		       ficb.decompose_date,
		       fiin.decompose_status,
		       fiin.ficb_flag
		  from t_fina_income fiin
		  left join (select rect.cust_name,
		                    ficb.fiin_id,
		                    max(usus.name) decompose_name,
		                    max(convert(varchar, ficb.decompose_date, 23)) decompose_date
		               from t_fina_collectionbill ficb
		               left join (select rect.cust_code, rect.cust_name
		                           from t_rent_contract rect
		                          group by rect.cust_code, rect.cust_name) rect on ficb.cust_code =
		                                                                           rect.cust_code
		               left join t_user_user usus on ficb.decompose_id = usus.id
		              where ficb.status = 0
		              group by rect.cust_name, ficb.fiin_id) ficb on fiin.fiin_id =
		                                                             ficb.fiin_id
		  left join (select tbba.account_no, tbbi.bank_name
		               from t_bank_bankaccount tbba
		               left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
		              where tbba.status = 0
		                and tbbi.status = 0) baba on fiin.receipt_bankno =
		                                             baba.account_no
		 where fiin.status = 0
		   and fiin.decompose_status = 4
		   ]]>
		<isNotEmpty prepend="and" property="ids">
			fiin.FIIN_ID IN 
			<iterate property="ids" open="(" close=")" conjunction=",">
				#ids[]#
			</iterate>
		</isNotEmpty>
	</select>
	
	<!--  根据承租人编号查询该承租人下的所有应分解项  -->
	<select id="queryCustDecomposeInfofenjieAll_zuofei" parameterClass="map"
		resultClass="java.util.HashMap">
		<!--  罚金  -->
		<![CDATA[
		select * from (	
			select 1 as renttype,
			       4 as sorder,
			       '000d' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.CUST_CODE as cust_code,
			       rect.lease_code as lease_code,
			       (case
			         when recp.start_date is not null then
			          convert(varchar,recp.start_date,23)
			         else
			           convert(varchar,getdate(), 23)
			       end) as sdate,
			       recp.recp_code as paylist_code,
			       '租金' as sobj,
			       0 as recd_period,
			       '租金' as ficb_item,
			       1 as recd_type,
			       recp.head_hire - (case
			         when exists (select ficb.ficb_item, sum(ficb.real_price)
			                 from t_fina_collectionbill ficb
			                where ficb.recp_code = recp.recp_code
			                  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                  and ficb.status = 0
			                group by ficb.ficb_item
			               having ficb.ficb_item = '租金') then
			          (select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.ficb_item = '租金'
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.recp_code = recp.recp_code)
			         else
			          0
			       end) as sprice
			  from t_rent_contract rect, t_rent_collectionplan recp
			 where recp.rect_id = rect.rect_id
			   and recp.fund_status = 0
			   and recp.status = 0 
			   and recp.version_code =
			       (select max(version_code)
			          from t_rent_collectionplan recp2
			         where recp2.recp_code = recp.recp_code)
		]]>
		<![CDATA[
			 ) g7  where (sprice>0.005 or sprice <-0.005) and cust_code=#cust_code# order by renttype, paylist_code, o
		]]>
	</select>
		<!--  根据承租人编号查询该承租人下的所有应分解项  -->
	<select id="queryCustDecomposeInfofenjieAll" parameterClass="map"
		resultClass="java.util.HashMap">
		<!--  租金  -->
		<!--  Modify By Michael 2011 12/12日
		自动分解时把sprice 小于 0.005 的过滤掉
		 -->
		<![CDATA[
	select * from (
		select 1 as renttype,
			       6 as sorder,
				   right('0000' +cast(recd.period_num as varchar)+'h',4) as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       convert(varchar,recd.pay_date,23) as sdate,
			       recp.recp_code as paylist_code,
			       '第' + cast(recd.period_num as varchar) + '期租金' as sobj,
			       recd.period_num as recd_period,
			       '租金' as ficb_item,
			       2 as recd_type,
			       (recd.irr_month_price+isnull(recd.VALUE_ADDED_TAX,0)) - (case
			         when exists  (select sum(ficb.real_price)
			                 from t_fina_collectionbill ficb
			                where ficb.recp_code = recp.recp_code
			                  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                  and ficb.status = 0
			                  and (ficb.ficb_item = '租金' or ficb.ficb_item = '增值税' )
			                  and ficb.recd_period = recd.period_num
			                group by ficb.recp_code,ficb.recd_period) then
			          (select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.recp_code = recp.recp_code
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and (ficb.ficb_item = '租金' or ficb.ficb_item = '增值税' )
			              and ficb.recd_period = recd.period_num)
			         else
			          0
			       end) as sprice,recp.TAX_PLAN_CODE,recd.VALUE_ADDED_TAX
					          
			  from t_rent_contract         rect,
			       t_rent_collectionplan   recp,
			       t_rent_collectiondetail recd
			 where recp.rect_id = rect.rect_id
			   and recd.recp_id = recp.recp_id
			   and recp.fund_status = 0
			   and recp.recp_status = 0
			   and recp.status = 0 
		]]>
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
				]]>
		</dynamic>
		<!--  保证金
		<![CDATA[
			union
			select 1 as renttype,
			       1 as sorder,
			       '000a' as o,
			       rect.rect_id as lease_id,
			       recp.recp_id as paylist_id,
			       rect.lease_code as lease_code,
			       (case
			         when recp.start_date is not null then
			          convert(datetime,recp.start_date,23)
			         else
					  convert(datetime, getdate(),23)
			       end) as sdate,
			       recp.recp_code as paylist_code,
			       '保证金' as sobj,
			       0 as recd_period,
			       '保证金' as ficb_item,
			       1 as recd_type,
			       recp.pledge_enter_cmprice - (case
			         when exists (select ficb.ficb_item, sum(ficb.real_price)
			                 from t_fina_collectionbill ficb
			                where ficb.recp_code = recp.recp_code
			                  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			                  and ficb.status = 0
			                group by ficb.ficb_item
			               having ficb.ficb_item = '保证金') then
			          (select sum(ficb.real_price)
			             from t_fina_collectionbill ficb
			            where ficb.ficb_item = '保证金'
			              and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			              and ficb.status = 0
			              and ficb.recp_code = recp.recp_code)
			         else
			          0
			       end) as sprice
			  from t_rent_contract rect, t_rent_collectionplan recp
			 where recp.rect_id = rect.rect_id
			   and recp.fund_status = 0
			   and recp.status = 0
			   and recp.recp_status = 0
			   and recp.version_code =
			       (select max(version_code)
			          from t_rent_collectionplan recp2
			         where recp2.recp_code = recp.recp_code)
		]]>
		<dynamic prepend="and">
			<![CDATA[
					rect.cust_code=#cust_code#
				]]>
		</dynamic>
		  -->
		 ) ttt
		 where ttt.sprice>0.005
		 <!--  Modify By Michael 2011 11/14 For 自动分解租金时按照支付时间顺序进行分解  -->
		<!-- order by paylist_id asc   -->
		order by sdate,paylist_id asc
	</select>
	
	
	<select id="judgeLockedWriteBackAllBack" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select FIIN_ID from T_FINA_INCOME where FIIN_ID=#select_income_id# and (LOCKED=0 or LOCKED is null) and STATUS=0
		]]>
	</select>
	<!--  根据承租人编号查询该承租人下的所有应分解项  -->
	<select id="judgeWriteBackAllBack" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select SUM(tfi.REAL_PRICE) SUMREAL_PRICE from T_FINA_COLLECTIONBILL tfi
			where tfi.FICB_STATE=5 and FICB_ITEM!=#jieqingitem# and tfi.FIIN_ID in
			(select FIIN_ID from T_FINA_INCOME where LEFT_ID=#select_income_id#)
		]]>
	</select>
	<update id="updateWriteBackState" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_INCOME  set RED_TYPE=#red_type# where FIIN_ID=#select_income_id#
		]]>
	</update>
	<update id="lockWaitMoneyIncome" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_INCOME  set LOCKED=1 where LEFT_ID=#select_income_id# and (LOCKED=0 or LOCKED is null)
		]]>
	</update>
	<update id="realeseWaitMoneyIncome" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_INCOME  set LOCKED=0 where LEFT_ID=#select_income_id# and LOCKED=1
		]]>
	</update>
	<update id="updateWriteBackPassState" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_INCOME  set RED_TYPE=#red_type# where FIIN_ID=#select_income_id#
		]]>
	</update>
	<update id="updateWriteBackRealseLock" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_INCOME  set LOCKED=0 where FIIN_ID=#select_income_id# and LOCKED=1
		]]>
	</update>
	
	
	<select id="queryAllCameBills_count" parameterClass="map" resultClass="java.lang.Integer">
 		<![CDATA[
 		select count(distinct t1.FIIN_ID) from T_FINA_INCOME t1 
			left join T_FINA_COLLECTIONBILL t2 on t2.FIIN_ID=t1.FIIN_ID 
			where t1.DECOMPOSE_STATUS=5 and t1.INCOME_MONEY>0 and t1.STATUS=0
 		]]>
 		<isNotEmpty prepend="and" property="ficb_typefind">
		  		(t1.RED_TYPE is null)
		 </isNotEmpty>
 		<isNotEmpty prepend="and" property="selecttypenew">
		  		(t1.RED_TYPE=#selecttypenew#)
		 </isNotEmpty>
		<isNotEmpty prepend="and" property="content">
		  		(t1.OPPOSING_BANKNO like '%$content$%' or t1.RECEIPT_UNIT like '%$content$%' or t1.OPPOSING_UNIT like '%$content$%' or t1.OPPOSING_TYPE like '%$content$%' or t1.OPPOSING_POSTSCRIPT like '%$content$%')
		 </isNotEmpty>
		
 	</select>
	<select id="queryAllCameBills" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select distinct t1.* from T_FINA_INCOME t1 
			left join T_FINA_COLLECTIONBILL t2 on t2.FIIN_ID=t1.FIIN_ID 
			where t1.DECOMPOSE_STATUS=5 and t1.INCOME_MONEY>0 and t1.STATUS=0
		]]>
		<isNotEmpty prepend="and" property="ficb_typefind">
		  		(t1.RED_TYPE is null)
		 </isNotEmpty>
		<isNotEmpty prepend="and" property="selecttypenew">
		  		(t1.RED_TYPE=#selecttypenew#)
		 </isNotEmpty>
		<isNotEmpty prepend="and" property="content">
		  		(t1.OPPOSING_BANKNO like '%$content$%' or t1.RECEIPT_UNIT like '%$content$%' or t1.OPPOSING_UNIT like '%$content$%' or t1.OPPOSING_TYPE like '%$content$%' or t1.OPPOSING_POSTSCRIPT like '%$content$%')
		 </isNotEmpty>
		 order by t1.FIIN_ID desc
	</select>
	<!--  chonghong xuyao shenpi de shuju   -->
	<select id="queryAllRequireBills_count" parameterClass="map" resultClass="java.lang.Integer">
 		<![CDATA[
 		select COUNT(distinct t1.FIIN_ID) from T_FINA_INCOME t1 
		left join T_FINA_COLLECTIONBILL t2 on t2.FIIN_ID=t1.FIIN_ID
		where t1.DECOMPOSE_STATUS=5 and (t1.RED_TYPE=3 or t1.RED_TYPE=2) and t1.STATUS=0
 		]]>
 		<isNotEmpty prepend="and" property="selecttype">
		  		(t1.RED_TYPE=#selecttype#)
		 </isNotEmpty>
		<isNotEmpty prepend="and" property="content">
		  		(t1.OPPOSING_BANKNO like '%$content$%' or t1.RECEIPT_UNIT like '%$content$%' or t1.OPPOSING_UNIT like '%$content$%' or t1.OPPOSING_TYPE like '%$content$%' or t1.OPPOSING_POSTSCRIPT like '%$content$%')
		 </isNotEmpty>
 	</select>
	<select id="queryAllRequireBills" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select distinct t1.* from T_FINA_INCOME t1 
			left join T_FINA_COLLECTIONBILL t2 on t2.FIIN_ID=t1.FIIN_ID
			where t1.DECOMPOSE_STATUS=5 and (t1.RED_TYPE=3 or t1.RED_TYPE=2) and t1.STATUS=0
		]]>
		<isNotEmpty prepend="and" property="selecttype">
		  		(t1.RED_TYPE=#selecttype#)
		 </isNotEmpty>
		<isNotEmpty prepend="and" property="content">
		  		(t1.OPPOSING_BANKNO like '%$content$%' or t1.RECEIPT_UNIT like '%$content$%' or t1.OPPOSING_UNIT like '%$content$%' or t1.OPPOSING_TYPE like '%$content$%' or t1.OPPOSING_POSTSCRIPT like '%$content$%')
		 </isNotEmpty>
		 order by t1.FIIN_ID desc
	</select>
	<select id="queryAllCanMakeRectBills_count" parameterClass="map" resultClass="java.lang.Integer">
 	
 		select COUNT(distinct tfc.FIIN_ID)
			from T_FINA_INCOME tfi
			left join T_FINA_COLLECTIONBILL tfc on tfi.FIIN_ID=tfc.FIIN_ID
			where tfi.STATUS=0 and tfi.DECOMPOSE_STATUS=5  and (tfi.RED_TYPE=1 or tfi.RED_TYPE=0) and tfi.INCOME_MONEY&gt;0
 		
 		<isNotEmpty prepend="and" property="content">
		  		(tfi.OPPOSING_BANKNO like '%$content$%' or tfi.OPPOSING_TYPE like '%$content$%' or tfi.OPPOSING_UNIT like '%$content$%')
		 </isNotEmpty>
 	</select>
	<select id="queryAllCanMakeRectBills" parameterClass="map" resultClass="java.util.HashMap">		
			select distinct
				tfc.FICB_TYPE,
				tfc.RECP_CODE,
				tfc.CUST_CODE,
				tfi.RED_TYPE,
				tfi.RECEIPT_UNIT,
				tfi.FIIN_ID,
				tfi.OPPOSING_DATE,
				tfi.OPPOSING_UNIT,
				tfi.OPPOSING_BANKNO,
				tfi.OPPOSING_TYPE,
				tfi.INCOME_MONEY,
				tfi.LOCKED 
			from T_FINA_INCOME tfi
			left join T_FINA_COLLECTIONBILL tfc on tfi.FIIN_ID=tfc.FIIN_ID
			where tfi.STATUS=0 and tfi.DECOMPOSE_STATUS=5  and (tfi.RED_TYPE=1 or tfi.RED_TYPE=0) and tfi.INCOME_MONEY&gt;0		
		<isNotEmpty prepend="and" property="content">
		  		(tfi.OPPOSING_BANKNO like '%$content$%' or tfi.OPPOSING_TYPE like '%$content$%' or tfi.OPPOSING_UNIT like '%$content$%')
		 </isNotEmpty>
		 order by tfi.FIIN_ID desc
	</select>
		<select id="queryAllCanMakeRectBillsnew_count" parameterClass="map" resultClass="java.lang.Integer">
				 select COUNT(*) from			
				(select distinct * from (select distinct 0 DIFFENERT,
								0 JUDGEOVER,
								0 JUDGEOVERN,
								tfc.FICB_TYPE,
								tfi.RED_TYPE,
								tfc.CUST_CODE,
								tfi.RECEIPT_UNIT,
								tfi.FIIN_ID,
								tfi.OPPOSING_DATE,
								tfi.OPPOSING_UNIT,
								tfi.OPPOSING_BANKNO,
								tfi.OPPOSING_TYPE,
								tfi.INCOME_MONEY,
								tfi.LOCKED 
							from T_FINA_INCOME tfi
							left join T_FINA_COLLECTIONBILL tfc on tfi.FIIN_ID=tfc.FIIN_ID
							where tfi.STATUS=0 and tfi.DECOMPOSE_STATUS=5  and tfi.RED_TYPE=1  and tfi.INCOME_MONEY>0
						
				UNION		 
				select			1 DIFFENERT,							
								t1.JUDGEOVER,
								t2.ISOVER JUDGEOVERN,
								12 FICB_TYPE,
								t1.RED_TYPE,
								t1.CUST_CODE,
								t1.RECEIPT_UNIT,
								t1.FIIN_ID,
								t1.OPPOSING_DATE,
								t1.OPPOSING_UNIT,
								t1.OPPOSING_BANKNO,
								t1.OPPOSING_TYPE,
								t1.INCOME_MONEY,
								t1.LOCKED  
				from (select distinct 1 DIFFENERT,
								COUNT(tfc.RECD_PERIOD) JUDGEOVER,
								tfi.RED_TYPE,
								tfi.RECEIPT_UNIT,
								tfc.CUST_CODE,
								tfi.FIIN_ID,
								tfi.OPPOSING_DATE,
								tfi.OPPOSING_UNIT,
								tfi.OPPOSING_BANKNO,
								tfi.OPPOSING_TYPE,
								tfi.INCOME_MONEY,
								tfi.LOCKED 
							from T_FINA_INCOME tfi
							left join T_FINA_COLLECTIONBILL tfc on tfi.FIIN_ID=tfc.FIIN_ID
							where tfi.STATUS=0 and tfi.DECOMPOSE_STATUS=5  and  tfi.RED_TYPE=0 and tfc.FICB_ITEM!=#item_name# and tfi.INCOME_MONEY>0		
							group by 
				
								tfi.RED_TYPE,
								tfi.RECEIPT_UNIT,
								tfc.CUST_CODE,
								tfi.FIIN_ID,
								tfi.OPPOSING_DATE,
								tfi.OPPOSING_UNIT,
								tfi.OPPOSING_BANKNO,
								tfi.OPPOSING_TYPE,
								tfi.INCOME_MONEY,
								tfi.LOCKED 
					
						)t1 
						left join 
							
						(select distinct COUNT(tfc.RECD_PERIOD) ISOVER,
										tfi.FIIN_ID
							from T_FINA_INCOME tfi
							left join T_FINA_COLLECTIONBILL tfc on tfi.FIIN_ID=tfc.FIIN_ID
							where tfi.STATUS=0 and tfi.DECOMPOSE_STATUS=5  and  tfi.RED_TYPE=0 and tfc.FICB_TYPE=2 and tfc.FICB_ITEM!=#item_name# and tfi.INCOME_MONEY>0
							group by
								tfi.FIIN_ID) t2
							on t2.FIIN_ID=t1.FIIN_ID
					group by	t1.JUDGEOVER,
								t1.CUST_CODE,
								t2.ISOVER,
								t1.RED_TYPE,
								t1.RECEIPT_UNIT,
								t1.FIIN_ID,
								t1.OPPOSING_DATE,
								t1.OPPOSING_UNIT,
								t1.OPPOSING_BANKNO,
								t1.OPPOSING_TYPE,
								t1.INCOME_MONEY,
								t1.LOCKED 
				)tnew 
				) t 
				left join T_FINA_INCOME tfi on tfi.RED_ID=t.FIIN_ID and tfi.DECOMPOSE_STATUS=1
				where 1=1
		<isNotEmpty prepend="and" property="ficb_typefind">
		  		(t.RED_TYPE=1 and t.FICB_TYPE=#ficb_typefind#)
		 </isNotEmpty>
		 <isNotEmpty prepend="and" property="JUDGEOVER">
		  		(t.RED_TYPE=0 and t.JUDGEOVER>t.JUDGEOVERN)
		 </isNotEmpty>	
		 <isNotEmpty prepend="and" property="JUDGEOVERN">
		  		(t.RED_TYPE=0 and t.JUDGEOVER=t.JUDGEOVERN)
		 </isNotEmpty>
 		<isNotEmpty prepend="and" property="content">
		  		(t.OPPOSING_BANKNO like '%$content$%' or t.OPPOSING_TYPE like '%$content$%' or t.OPPOSING_UNIT like '%$content$%')
		 </isNotEmpty>
 	</select>
		<select id="queryAllCanMakeRectBillsnew" parameterClass="map" resultClass="java.util.HashMap">		
			select distinct t.*,tfi.DECOMPOSE_STATUS from(select distinct 0 DIFFENERT,
				0 JUDGEOVER,
				0 JUDGEOVERN,
				tfc.FICB_TYPE,
				tfi.RED_TYPE,
				tfc.CUST_CODE,
				tfi.RECEIPT_UNIT,
				tfi.FIIN_ID,
				tfi.OPPOSING_DATE,
				tfi.OPPOSING_UNIT,
				tfi.OPPOSING_BANKNO,
				tfi.OPPOSING_TYPE,
				tfi.INCOME_MONEY,
				tfi.LOCKED 
			from T_FINA_INCOME tfi
			left join T_FINA_COLLECTIONBILL tfc on tfi.FIIN_ID=tfc.FIIN_ID
			where tfi.STATUS=0 and tfi.DECOMPOSE_STATUS=5  and tfi.RED_TYPE=1  and tfi.INCOME_MONEY>0		
			UNION		 
			select		1 DIFFENERT,						
						t1.JUDGEOVER,
						t2.ISOVER JUDGEOVERN,
						12 FICB_TYPE,
						t1.RED_TYPE,
						t1.CUST_CODE,
						t1.RECEIPT_UNIT,
						t1.FIIN_ID,
						t1.OPPOSING_DATE,
						t1.OPPOSING_UNIT,
						t1.OPPOSING_BANKNO,
						t1.OPPOSING_TYPE,
						t1.INCOME_MONEY,
						t1.LOCKED  
		from (select distinct 1 DIFFENERT,
						COUNT(tfc.RECD_PERIOD) JUDGEOVER,
						tfi.RED_TYPE,
						tfi.RECEIPT_UNIT,
						tfc.CUST_CODE,
						tfi.FIIN_ID,
						tfi.OPPOSING_DATE,
						tfi.OPPOSING_UNIT,
						tfi.OPPOSING_BANKNO,
						tfi.OPPOSING_TYPE,
						tfi.INCOME_MONEY,
						tfi.LOCKED 
					from T_FINA_INCOME tfi
					left join T_FINA_COLLECTIONBILL tfc on tfi.FIIN_ID=tfc.FIIN_ID
					where tfi.STATUS=0 and tfi.DECOMPOSE_STATUS=5  and  tfi.RED_TYPE=0 and tfc.FICB_ITEM!=#item_name# and tfi.INCOME_MONEY>0		
					group by 
		
						tfi.RED_TYPE,
						tfc.CUST_CODE,
						tfi.RECEIPT_UNIT,
						tfi.FIIN_ID,
						tfi.OPPOSING_DATE,
						tfi.OPPOSING_UNIT,
						tfi.OPPOSING_BANKNO,
						tfi.OPPOSING_TYPE,
						tfi.INCOME_MONEY,
						tfi.LOCKED 
			
				)t1 
				left join 					
				(select distinct COUNT(tfc.RECD_PERIOD) ISOVER,
								tfi.FIIN_ID
					from T_FINA_INCOME tfi
					left join T_FINA_COLLECTIONBILL tfc on tfi.FIIN_ID=tfc.FIIN_ID
					where tfi.STATUS=0 and tfi.DECOMPOSE_STATUS=5  and  tfi.RED_TYPE=0 and tfc.FICB_TYPE=2 and tfc.FICB_ITEM!=#item_name# and tfi.INCOME_MONEY>0
					group by
						tfi.FIIN_ID) t2
					on t2.FIIN_ID=t1.FIIN_ID
					 group by	t1.JUDGEOVER,
						t2.ISOVER,
						t1.RED_TYPE,
						t1.CUST_CODE,
						t1.RECEIPT_UNIT,
						t1.FIIN_ID,
						t1.OPPOSING_DATE,
						t1.OPPOSING_UNIT,
						t1.OPPOSING_BANKNO,
						t1.OPPOSING_TYPE,
						t1.INCOME_MONEY,
						t1.LOCKED
		)t
		left join T_FINA_INCOME tfi on tfi.RED_ID=t.FIIN_ID and tfi.DECOMPOSE_STATUS=1
		where 1=1 
		<isNotEmpty prepend="and" property="ficb_typefind">
		  		(t.RED_TYPE=1 and t.FICB_TYPE=#ficb_typefind#) or(t.RED_TYPE=1 and t.FICB_TYPE=2 and tfi.DECOMPOSE_STATUS=1)
		 </isNotEmpty>
		 <isNotEmpty prepend="and" property="JUDGEOVER">
		  		(t.RED_TYPE=0 and (t.JUDGEOVERN is null))
		 </isNotEmpty>	
		 <isNotEmpty prepend="and" property="JUDGEOVERN">
		  		(t.RED_TYPE=0 and t.JUDGEOVERN>0)
		 </isNotEmpty>		
		<isNotEmpty prepend="and" property="content">
		  		(t.OPPOSING_BANKNO like '%$content$%' or t.OPPOSING_TYPE like '%$content$%' or t.OPPOSING_UNIT like '%$content$%')
		 </isNotEmpty>
		
	</select>
	
	
	<select id="queryFiinInfoByFiinId" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from T_FINA_INCOME where FIIN_ID=#select_income_id# and STATUS=0
		]]>
	</select>
	<update id="updateFiinInfoByPK">
			UPDATE T_FINA_INCOME 
			   SET INCOME_MONEY=#INCOME_MONEY#
			 where FIIN_ID=#PK# and STATUS=0 AND DECOMPOSE_STATUS=2	
	</update>
	
	<select id="queryOldZeroIncomeInfoByFiinId" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from T_FINA_INCOME where RED_ID=#select_income_id# and STATUS=0
		]]>
	</select>
		<select id="queryoldWriteBackZeroIncomeByFiinId" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from T_FINA_INCOME where RED_ID=#select_income_id# and STATUS=0 and INCOME_MONEY=0 and DECOMPOSE_STATUS=1
		]]>
	</select>
	<!--  shiwutijiaoshi ziduanxiaoxie  -->
	<select id="queryIncomeWriteBackBills" parameterClass="map" resultClass="java.util.HashMap">
 		<![CDATA[
	 		select tfcb.*,trcp.TAX_PLAN_CODE
		 	from T_FINA_COLLECTIONBILL tfcb
		 	left join T_RENT_COLLECTIONPLAN trcp on tfcb.RECP_ID=trcp.RECP_ID
			where fiin_id=#select_income_id#
 		]]>
 	</select>
 	
 	<select id="queryNoIncomeWriteBackBills" parameterClass="map" resultClass="java.util.HashMap">
 		<![CDATA[
 		select *
	 	from T_FINA_COLLECTIONBILL
		where fiin_id=#select_income_id# and ficb_type=0
 		]]>
 	</select>
 	
 	<!--  newfinaincomemap  -->
	<select id="findnewFinaIncomeMoney" parameterClass="map" resultClass="java.util.HashMap">
 		 <!--   select  SUM(T1.REAL_PRICE) SUMMONEY
			   from T_FINA_COLLECTIONBILL T1
			left join T_FINA_INCOME T2 on T1.FIIN_ID=T2.LEFT_ID
			   where T1.FIIN_ID=#select_income_id# 
			  group by T2.INCOME_MONEY   -->
 		<![CDATA[
 		select  SUM(T1.REAL_PRICE) SUMMONEY
			   from T_FINA_COLLECTIONBILL T1
			   where T1.FIIN_ID=#select_income_id# 
 		]]>
 	</select>
 	
 	<insert id="createnewFiidIncome" parameterClass="map">
		<![CDATA[insert into T_FINA_INCOME
			( 
			RECEIPT_BANKNO,
			RECEIPT_UNIT,
			OPPOSING_DATE,
			INCOME_MONEY,
			PAYMENT_MONEY,
			LEFT_MONEY,
			COMMISSION_MONEY,
			OPPOSING_TYPE,
			OPPOSING_BANKNAME,
			OPPOSING_FLAG,
			OPPOSING_ADDRESS,
			OPPOSING_BANKNO,
			OPPOSING_UNIT,
			OPPOSING_EXPLAIN,
			OPPOSING_SUMMARY,
			OPPOSING_POSTSCRIPT,
			LEFT_ID,
			RED_ID,
			FICB_FLAG,
			LOCKED,
			DECOMPOSE_STATUS,
			EXPORT_FLAG,
			EXPORT_COUNT,
			TYPE,
			VIRTUAL_CODE,
			STATUS,
			UPLOAD_TIME,
			UPLOAD_USER_ID,INCOME_FINANCE_CODE,
			DEPOSE_CUSTOMER
			)
		values
		( 
		    #RECEIPT_BANKNO#,
		    #RECEIPT_UNIT#,
			#OPPOSING_DATE#,
			#INCOME_MONEY#,
			#PAYMENT_MONEY#,
			#LEFT_MONEY#,
			#COMMISSION_MONEY#,
			#OPPOSING_TYPE#,
			#OPPOSING_BANKNAME#,
			#OPPOSING_FLAG#,
			#OPPOSING_ADDRESS#,
			#OPPOSING_BANKNO#,
			#OPPOSING_UNIT#,
			#OPPOSING_EXPLAIN#,
			#OPPOSING_SUMMARY#,
			#OPPOSING_POSTSCRIPT#,
			#LEFT_ID#,
			#RED_ID#,
			#FICB_FLAG#,
			0,
			4,
			0,
			0,
			0,
			#VIRTUAL_CODE#,
			0,
			#UPLOAD_TIME#,
			#s_employeeId#,#INCOME_FINANCE_CODE#,
			#DEPOSE_CUSTOMER#
		)]]>
		<selectKey resultClass="java.lang.Long" keyProperty="FIIN_ID">
			<![CDATA[	SELECT @@IDENTITY  AS FIIN_ID ]]>
		</selectKey>	
	</insert>
 	
 	<delete id="deleteWaitMoney"  parameterClass="map">		
		delete from T_FINA_INCOME where LEFT_ID=#select_income_id#	and OPPOSING_TYPE=#OPPOSING_TYPE# and LOCKED=1
	</delete>
	<delete id="deleteWaitMoneyWhenConfirm"  parameterClass="map">		
		delete from T_FINA_INCOME where LEFT_ID=#LEFT_ID#	and OPPOSING_TYPE=#OPPOSING_TYPE# and LOCKED=1
	</delete>
	<delete id="deleteAllWaitMoneyWhenConfirm"  parameterClass="map">		
		delete from T_FINA_INCOME where LEFT_ID in (select FIIN_ID from T_FINA_INCOME 
		where LEFT_ID=#LEFT_ID#	and OPPOSING_TYPE=#OPPOSING_TYPE# and LOCKED=1)
	</delete>
	<delete id="deleteWaitMoneyRemark"  parameterClass="map">		
		delete from T_FINA_WRITEBACKREMARK where FIIN_ID=#select_income_id#
	</delete>
	<delete id="deleteoldWriteBackItems"  parameterClass="map">		
		delete from T_FINA_COLLECTIONBILL where FIIN_ID=#select_income_id# and FICB_STATE=1
	</delete>
	<delete id="deleteThisIncome"  parameterClass="map">		
		delete from T_FINA_INCOME where FIIN_ID=#NEWFIIN_ID# and DECOMPOSE_STATUS=1
	</delete>
	<delete id="deleteWaitMoneyRemarkWhenConfirm"  parameterClass="map">		
		delete from T_FINA_WRITEBACKREMARK where FIIN_ID=#LEFT_ID#
	</delete>
	<delete id="deleteZeroWriteBackMoney"  parameterClass="map">		
		delete from T_FINA_COLLECTIONBILL where FIIN_ID=#NEWFIIN_ID#
	</delete>
	
	<select id="findOldBillShouldPriceByFicbId" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from T_FINA_COLLECTIONBILL where FICB_ID=#ficb_id# and STATUS=0
		]]>
	</select>
	<select id="findOldIncomeRedTypeByFiinId" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from T_FINA_INCOME where FIIN_ID=#oldincomefiinid# and STATUS=0
		]]>
	</select>
	
	<update id="updateDecomposeBill" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_COLLECTIONBILL  set FICB_TYPE=2 where  FICB_ID=#ficb_id# and STATUS=0
		]]>
	</update>
	
	<!--  查询所有银行  -->
	<select id="findAllBank" parameterClass="map" resultClass="java.util.HashMap">
	<!--  
		<![CDATA[
			select OPPOSING_BANKNAME from t_fina_income where STATUS=0  group by OPPOSING_BANKNAME
		]]>
		  -->
		 select t2.BANK_NAME OPPOSING_BANKNAME from t_fina_income t
left join t_bank_bankaccount t1 on t.RECEIPT_BANKNO=t1.ACCOUNT_NO and t1.STATUS=0
left join t_bank_bankinfo t2 on t2.BABI_ID=t1.BABI_ID and t2.STATUS=0
where t.STATUS=0  group by t2.BANK_NAME
	</select>
	
	<!--  查询所有银行  -->
	<select id="findAllBankTopOne" parameterClass="map" resultClass="java.util.HashMap">
	<!--  
		<![CDATA[
			select top 1 OPPOSING_BANKNAME from t_fina_income where STATUS=0  group by OPPOSING_BANKNAME
		]]>
		  -->
		 <![CDATA[
			select top 1 t2.BANK_NAME from t_fina_income t
			left join t_bank_bankaccount t1 on t.RECEIPT_BANKNO=t1.ACCOUNT_NO and t1.STATUS=0
			left join t_bank_bankinfo t2 on t2.BABI_ID=t1.BABI_ID and t2.STATUS=0
			where t.STATUS=0  group by t2.BANK_NAME
		]]>
	</select>
	
	<!--  查询当日来款  -->
	<select id="findAllDayFinaCome" parameterClass="map" resultClass="java.util.HashMap">
	<!--  
		<![CDATA[
			select SUM(INCOME_MONEY)INCOME_MONEYDAY from t_fina_income where STATUS=0 and DATEDIFF(day,OPPOSING_DATE,#dateState#)=0 and OPPOSING_TYPE<>#ficb_type#
			
		]]>
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ OPPOSING_BANKNAME=#bank# ]]>
			</isNotEmpty>
			<isEmpty prepend="and" property="bank">
				<![CDATA[ OPPOSING_BANKNAME is null ]]>
			</isEmpty>
			
			  -->
			 <![CDATA[
			select SUM(INCOME_MONEY)INCOME_MONEYDAY from t_fina_income t
left join t_bank_bankaccount t1 on t.RECEIPT_BANKNO=t1.ACCOUNT_NO and t1.STATUS=0
left join t_bank_bankinfo t2 on t2.BABI_ID=t1.BABI_ID and t2.STATUS=0
where t.STATUS=0 and DATEDIFF(day,OPPOSING_DATE,#dateState#)=0 and t.OPPOSING_TYPE<>#ficb_type#
			
		]]>
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ t2.BANK_NAME=#bank# ]]>
			</isNotEmpty>
	</select>
	
	<!--  查前日待分解额  -->
	<select id="findAllOldDayNotFinaCome" parameterClass="map" resultClass="java.util.HashMap">
	<!--  
		<![CDATA[
			select SUM(INCOME_MONEY)INCOME_MONEYOLDDAY from t_fina_income where STATUS=0 and DATEDIFF(day,OPPOSING_DATE,#dateState#)=1 and OPPOSING_TYPE=#ficb_type#
		]]>
		<isNotEmpty prepend="and" property="bank">
				<![CDATA[ OPPOSING_BANKNAME=#bank# ]]>
			</isNotEmpty>
			<isEmpty prepend="and" property="bank">
				<![CDATA[ OPPOSING_BANKNAME is null ]]>
			</isEmpty>
			  -->
			 <![CDATA[
			select ISNULL(SUM(INCOME_MONEY),0) INCOME_MONEYOLDDAY from t_fina_income t
left join t_bank_bankaccount t1 on t.RECEIPT_BANKNO=t1.ACCOUNT_NO and t1.STATUS=0
left join t_bank_bankinfo t2 on t2.BABI_ID=t1.BABI_ID and t2.STATUS=0
where t.STATUS=0 and DATEDIFF(day,OPPOSING_DATE,#dateState#)=1 and t.OPPOSING_TYPE<>#ficb_type#
			
		]]>
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ t2.BANK_NAME=#bank# ]]>
			</isNotEmpty>
	</select>
	
	
	<select id="findAllDayFinaComeOk" parameterClass="map" resultClass="java.util.HashMap">
	<!--  
		<![CDATA[
			select t1.RECP_ID from t_fina_income t
			left join T_FINA_COLLECTIONBILL t1 on t.FIIN_ID=t1.FIIN_ID and t1.STATUS=0 and t1.FICB_STATE=5 and t1.FICB_TYPE=0
			where t.STATUS=0 and t.DECOMPOSE_STATUS=5  and DATEDIFF(day,t1.DECOMPOSE_DATE,#dateState#)=0 and RECP_ID is not null
			]]>
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ t.OPPOSING_BANKNAME=#bank# ]]>
			</isNotEmpty>
			<![CDATA[
			group by t1.RECP_ID
			order by t1.RECP_ID desc
		]]>
		  -->
		 <!--  
		 <![CDATA[
			select t1.RECP_ID,t.FIIN_ID from t_fina_income t
			left join T_FINA_COLLECTIONBILL t1 on t.FIIN_ID=t1.FIIN_ID and t1.STATUS=0 and t1.FICB_STATE=5 and t1.FICB_TYPE=0
			left join t_bank_bankaccount t3 on t.RECEIPT_BANKNO=t3.ACCOUNT_NO and t3.STATUS=0
left join t_bank_bankinfo t2 on t2.BABI_ID=t3.BABI_ID and t2.STATUS=0
			where t.STATUS=0 and t.DECOMPOSE_STATUS=5  and DATEDIFF(day,t.CREATE_DATE,#dateState#)=0 and RECP_ID is not null
			]]>
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ t2.BANK_NAME=#bank# ]]>
			</isNotEmpty>
			<![CDATA[
			group by t1.RECP_ID,t.FIIN_ID
			order by t1.RECP_ID desc
		]]>
		 -->
		<![CDATA[
		with table_select(FIIN_ID,UPLOAD_TIME,UP_ID,OPPOSING_DATE,RECEIPT_BANKNO,INCOME_MONEY)
		as
		(
			select T.FIIN_ID,T.UPLOAD_TIME,
			CASE 
			WHEN RED_ID IS NOT NULL
			THEN RED_ID
			when  LEFT_ID IS not null then  LEFT_ID  
			ELSE FIIN_ID
			END  UP_ID,
			OPPOSING_DATE ,RECEIPT_BANKNO,INCOME_MONEY
			from T_FINA_INCOME T 
			WHERE  DATEDIFF(day,OPPOSING_DATE,#dateState#)=0
				AND STATUS = 0
				AND DECOMPOSE_STATUS = 5
		union all
			select T.FIIN_ID,T.UPLOAD_TIME,T1.UP_ID UP_ID,T1.OPPOSING_DATE ,T1.RECEIPT_BANKNO,T1.INCOME_MONEY
			from T_FINA_INCOME as T 
				INNER join table_select as T1 on T1.FIIN_ID = T.LEFT_ID
			WHERE
				T.STATUS = 0
				AND T.DECOMPOSE_STATUS = 5
		)
		SELECT T.UP_ID FIIN_ID
		FROM 
			table_select T
			LEFT JOIN T_FINA_COLLECTIONBILL T1 on T1.FIIN_ID = t.FIIN_ID AND T1.STATUS = 0
			left join t_bank_bankaccount t3 on t.RECEIPT_BANKNO=t3.ACCOUNT_NO and t3.STATUS=0
			left join t_bank_bankinfo t2 on t2.BABI_ID=t3.BABI_ID and t2.STATUS=0
	 	]]>
	 		<dynamic prepend="where">
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ t2.BANK_NAME=#bank# ]]>
			</isNotEmpty>
			</dynamic>
		<![CDATA[
		GROUP BY
			T.UP_ID
		ORDER BY T.UP_ID DESC
		]]>
	</select>
	
	<!--  查前当日所有财务已确认的分解单各项金额  -->
	<!-- Modify by Michael 2011 12/31 修正每日来款抓取数据  -->
	<select id="findAllDayFinaComeOkMoney" parameterClass="map" resultClass="java.util.HashMap">
	<!--  
		<![CDATA[
			select min(t.FIIN_ID) FIIN_ID,min(t.OPPOSING_DATE) OPPOSING_DATE,min(t1.FICB_ITEM) FICB_ITEM,t1.RECP_ID,sum(t1.REAL_PRICE) REAL_PRICE,min(t3.LEASE_CODE) LEASE_CODE,min(t4.CUST_NAME) CUST_NAME,min(t.INCOME_MONEY) INCOME_MONEY
			from T_FINA_COLLECTIONBILL t1
			left join t_fina_income t on t.STATUS=0 and t.DECOMPOSE_STATUS=5  and DATEDIFF(day,t1.DECOMPOSE_DATE,#dateState#)=0
			left join T_RENT_COLLECTIONPLAN t2 on t1.RECP_ID=t2.RECP_ID and t2.STATUS=0
			left join T_RENT_CONTRACT t3 on t2.RECT_ID=t3.RECT_ID and t3.STATUS=0
			left join T_CUST_CUSTOMER t4 on t3.CUST_ID=t4.CUST_ID and t4.STATUS=0
			where t.FIIN_ID=t1.FIIN_ID and t1.STATUS=0 and t1.FICB_STATE=5 and t1.FICB_TYPE=0
			]]>
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ t.OPPOSING_BANKNAME=#bank# ]]>
			</isNotEmpty>
			<isEmpty prepend="and" property="bank">
				<![CDATA[ t.OPPOSING_BANKNAME is null ]]>
			</isEmpty>
			<![CDATA[
			group by t1.RECP_ID,t1.FICB_ITEM
			order by RECP_ID desc
		]]>
		  -->
		 <!--  
		 <![CDATA[
			select t.FIIN_ID,min(t.OPPOSING_DATE) OPPOSING_DATE,min(t1.FICB_ITEM) FICB_ITEM,t1.RECP_ID,sum(t1.REAL_PRICE) REAL_PRICE,min(t3.LEASE_CODE) LEASE_CODE,min(t4.CUST_NAME) CUST_NAME,min(t.INCOME_MONEY) INCOME_MONEY
			from T_FINA_COLLECTIONBILL t1
			left join t_fina_income t on t.STATUS=0 and t.DECOMPOSE_STATUS=5  and DATEDIFF(day,t.CREATE_DATE,#dateState#)=0
			left join T_RENT_COLLECTIONPLAN t2 on t1.RECP_ID=t2.RECP_ID and t2.STATUS=0
			left join T_RENT_CONTRACT t3 on t2.RECT_ID=t3.RECT_ID and t3.STATUS=0
			left join T_CUST_CUSTOMER t4 on t3.CUST_ID=t4.CUST_ID and t4.STATUS=0
			left join t_bank_bankaccount t5 on t.RECEIPT_BANKNO=t5.ACCOUNT_NO and t5.STATUS=0
left join t_bank_bankinfo t6 on t6.BABI_ID=t5.BABI_ID and t6.STATUS=0
			where t.FIIN_ID=t1.FIIN_ID and t1.STATUS=0 and t1.FICB_STATE=5 and t1.FICB_TYPE=0
			]]>
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ t6.BANK_NAME=#bank# ]]>
			</isNotEmpty>
			<![CDATA[
			group by t1.RECP_ID,t1.FICB_ITEM,t.FIIN_ID
			order by RECP_ID desc
		]]>
		 -->
		<![CDATA[
			with table_select(FIIN_ID,UPLOAD_TIME,UP_ID,OPPOSING_DATE,RECEIPT_BANKNO,INCOME_MONEY)
			as
			(
				select T.FIIN_ID,T.UPLOAD_TIME,
				CASE 
				WHEN RED_ID IS NOT NULL
				THEN RED_ID
				when  LEFT_ID IS not null then  LEFT_ID  
				ELSE FIIN_ID
				END  UP_ID,
				OPPOSING_DATE ,RECEIPT_BANKNO,INCOME_MONEY
				from T_FINA_INCOME T 
				WHERE  DATEDIFF(day,OPPOSING_DATE,#dateState#)=0
					AND STATUS = 0
					AND DECOMPOSE_STATUS = 5
			union all
				select T.FIIN_ID,T.UPLOAD_TIME,T1.UP_ID UP_ID,T1.OPPOSING_DATE ,T1.RECEIPT_BANKNO,T1.INCOME_MONEY
				from T_FINA_INCOME as T 
					INNER join table_select as T1 on T1.FIIN_ID = T.LEFT_ID
				WHERE
					T.STATUS = 0
					AND T.DECOMPOSE_STATUS = 5
			)
			select t.UP_ID FIIN_ID,CONVERT(VARCHAR(10),min(t.OPPOSING_DATE),23) OPPOSING_DATE,min(t1.FICB_ITEM) FICB_ITEM,CONVERT(VARCHAR(10),min(t1.CREATE_DATE),23) CREATE_DATE,
			CASE
			WHEN FICB_ITEM = #daifenjielaikuan#
			THEN MIN(t1.REAL_PRICE)
			ELSE SUM(t1.REAL_PRICE)
			END  REAL_PRICE,min(t3.LEASE_CODE) LEASE_CODE,min(t4.CUST_NAME) CUST_NAME,MAX(t.INCOME_MONEY) INCOME_MONEYREAL_PRICE,min(t.INCOME_MONEY) INCOME_MONEY
				from table_select t
				left join T_FINA_COLLECTIONBILL t1 on t1.FIIN_ID = T.FIIN_ID
				left join T_RENT_COLLECTIONPLAN t2 on t1.RECP_ID=t2.RECP_ID and t2.STATUS=0
				left join T_RENT_CONTRACT t3 on t2.RECT_ID=t3.RECT_ID and t3.STATUS=0
				left join T_CUST_CUSTOMER t4 on t3.CUST_ID=t4.CUST_ID and t4.STATUS=0
				left join t_bank_bankaccount t5 on t.RECEIPT_BANKNO=t5.ACCOUNT_NO and t5.STATUS=0
				left join t_bank_bankinfo t6 on t6.BABI_ID=t5.BABI_ID and t6.STATUS=0
			where t.FIIN_ID=t1.FIIN_ID and t1.STATUS=0 and t1.FICB_STATE=5 and t1.FICB_TYPE=0
				  and  t1.FICB_ITEM <> #daifenjielaikuan# 
				  and CONVERT(VARCHAR(10),t.OPPOSING_DATE,23)=#dateState#
								]]>
								<isNotEmpty prepend="and" property="bank">
									<![CDATA[ t6.BANK_NAME=#bank# ]]>
								</isNotEmpty>
							<![CDATA[
			group by t.UP_ID,t1.FICB_ITEM
			ORDER BY T.UP_ID DESC
		]]>
	</select>
	
	<!--  查询所有来款对应的可以进行冲红申请的分解单对应的合同信息  -->
	<select id="findAllRectCollWriteBack" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select distinct tfc.RECP_ID,
				tfc.RECP_CODE,
				tfc.CUST_CODE,
				tfc.FICB_STATE,
				tfc.FICB_TYPE,
				tfi.RED_TYPE,
				tcc.CUST_NAME,
				tfc.FIIN_ID,
				tfi.LOCKED
				from T_FINA_COLLECTIONBILL tfc
				left join T_FINA_INCOME tfi on tfi.FIIN_ID=tfc.FIIN_ID
				left join T_CUST_CUSTOMER tcc on tcc.CUST_CODE=tfc.CUST_CODE
				where tfc.STATUS=0 and tfc.FICB_STATE=5 and tfc.FIIN_ID=#fiin_id#
		]]>
	</select>
	<insert id="addWriteBackRequireRemark" parameterClass="map">
		<![CDATA[insert into T_FINA_WRITEBACKREMARK
			( 
			FIIN_ID,
			RED_TYPE,
			REQUIREREMARK,
			CREATE_DATE,
			MODIFY_DATE,
			CREATE_USER_ID,
			TYPE,
			MODIFY_USER_ID,
			STATUS
			)
		values
		( 
		    #select_income_id#,
			#red_type#,
			#requirereson#,
			getdate(),
			getdate(),
			#s_employeeId#,
			0,
			#s_employeeId#,
			0			
		)]]>
		<selectKey resultClass="java.lang.Long" keyProperty="ID">
			<![CDATA[	SELECT @@IDENTITY  AS ID ]]>
		</selectKey>	
	</insert>
 	<update id="addWriteBackResponseRemark" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_WRITEBACKREMARK  set RESPONSEREMARK=#responseanswer# where  FIIN_ID=#select_income_id# and STATUS=0
		]]>
	</update>
	<update id="updateDecomposeBillWaitMoney" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_COLLECTIONBILL  set REAL_PRICE=#real_price#,SHOULD_PRICE=#real_price# where  FIIN_ID=#select_income_id# and FICB_ITEM=#FICB_ITEM# and STATUS=0
		]]>
	</update>
	<update id="updateOldIncomeWritBackRedId" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_INCOME  set RED_ID=#newFinaIncomeId# where  FIIN_ID=#select_income_id# and STATUS=0
		]]>
	</update>
	<update id="updateoldWaitBackMoney" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_COLLECTIONBILL  set FICB_TYPE=0 where  FIIN_ID=#NEWLEFT_ID# and STATUS=0 and FICB_TYPE=2 and RECD_PERIOD=#RECD_PERIOD# and FICB_ITEM=#FICB_ITEM#
		]]>
	</update>
	<update id="updateWriteBackNoPassState" parameterClass="map">
		<![CDATA[ 
		 update T_FINA_INCOME  set RED_TYPE= null,LOCKED=0 where  FIIN_ID=#select_income_id# and STATUS=0
		]]>
	</update>
		<select id="findAllMomesByFiinId" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from T_FINA_WRITEBACKREMARK where STATUS=0 and FIIN_ID=#select_income_id#
		]]>
	</select>
		<select id="getZeroIncomeWriteBackByFiinId" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from T_FINA_COLLECTIONBILL where STATUS=0 and FIIN_ID=#select_income_id#
		]]>
	</select>
	<select id="getNewZeroIncomeFiinId" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from T_FINA_INCOME where STATUS=0 and FIIN_ID=#select_income_id#
		]]>
	</select>
		<!--  分解来款ID查询该来款所有信息  -->
	<select id="queryCustIncomeInfoByIncome" parameterClass="map"
		resultClass="java.util.HashMap">
		<![CDATA[
			select distinct fiin.fiin_id,
			                fiin.receipt_bankno,
			                fiin.receipt_unit,
			                fiin.opposing_bankno,
			                fiin.opposing_unit,
			                fiin.opposing_bankname,
			                convert(datetime,convert(varchar,fiin.opposing_date, 23)) opposing_date,
			                fiin.opposing_type,
			                fiin.opposing_flag,
			                fiin.opposing_address,
			                fiin.opposing_summary,
			                fiin.opposing_explain,
			                fiin.opposing_postscript,
			                fiin.income_money,
			                fiin.payment_money,
			                fiin.left_money,
			                fiin.commission_money,
			                fiin.locked,
			                fiin.decompose_status,
			                fiin.operate_remark,
			                fiin.operate_id,
			                fiin.operate_time,
			                fiin.finance_remark,
			                fiin.finance_id,
			                fiin.finance_time,
			                fiin.left_id,
			                fiin.transfer_id,
			                fiin.red_id,
			                fiin.red_type,
			                fiin.export_flag,
			                fiin.export_count,
			                fiin.export_name,
			                fiin.export_time,
			                fiin.type,
			                fiin.status,
			                fiin.upload_user_id,
			                fiin.upload_time,
			                fiin.upload_path,
			                fiin.modify__user_id,
			                fiin.modify_time,
			                baba.account_no,
			                baba.bank_name,
			                fiin.ficb_flag
			  from t_fina_income fiin
			  left join (select tbba.account_no, tbbi.bank_name
			               from t_bank_bankaccount tbba
			               left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
			              where tbba.status = 0
			                and tbbi.status = 0) baba on fiin.receipt_bankno =
			                                             baba.account_no
			  left join (select min(fiin2.fiin_id) next_left_id,
			                    fiin2.left_id,
			                    fiin2.decompose_status next_left_status
			               from t_fina_income fiin2
			              where fiin2.status = 0
			              group by fiin2.left_id, fiin2.decompose_status) fiin3 on fiin3.left_id =
			                                                                       fiin.fiin_id
			  left join (select min(fiin4.fiin_id) next_red_id,
			                    fiin4.red_id,
			                    fiin4.decompose_status next_red_status
			               from t_fina_income fiin4
			              where fiin4.status = 0
			              group by fiin4.red_id, fiin4.decompose_status) fiin5 on fiin5.red_id =
			                                                                      fiin.fiin_id
			where fiin.status = 0
		]]>
		<dynamic prepend="and">
			<isNotEmpty prepend="and" property="select_income_id">
				<![CDATA[
					fiin.fiin_id=#select_income_id#
				]]>
			</isNotEmpty>
		</dynamic>
	</select>
	<!--  结清到第几期用于正常结清和提前结清  -->
	<select id="settleToPeriodNum" parameterClass="map" resultClass="java.lang.Integer">
	<![CDATA[
			SELECT 
				MIN(PERIOD_NUM)
			FROM   (
					select 
						PERIOD_NUM,(T.irr_month_price - (
							case
							when exists  (
								select ficb.ficb_item, sum(ficb.real_price)
								from t_fina_collectionbill ficb
								where ficb.recp_code = T1.recp_code
									  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
									  and ficb.status = 0
									  and ficb.ficb_item = '租金'
									  and ficb.recd_period = T.period_num
								group by ficb.ficb_item
							) 
							then (
								select sum(ficb.real_price)
								from t_fina_collectionbill ficb
								where ficb.recp_code = T1.recp_code
									  and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
									  and ficb.status = 0
									  and ficb.ficb_item = '租金'
									  and ficb.recd_period = T.period_num
							)
							else
								0
							end) 
						) sprice 
						
					from T_RENT_COLLECTIONDETAIL T
						LEFT JOIN T_RENT_COLLECTIONPLAN T1 ON T1.RECP_ID = T.RECP_ID
					where
						T1.RECP_CODE = #recp_code#
				) TT
			WHERE  (TT.sprice>0.005 or TT.sprice <-0.005) 
			]]>
	</select>
	
	
	<!--  根据来款Id查询出财务确认后该分解单各项内容所分得的金额  -->
	<select id="getFinaAllMoneyDiffFicbItem" parameterClass="map" resultClass="java.util.HashMap">
		<!--  
		<![CDATA[
				select RECP_ID,SUM(REAL_PRICE) moneyCount,FICB_ITEM from T_FINA_COLLECTIONBILL where FIIN_ID=#select_income_id# and FICB_STATE=5 and STATUS=0 group by RECP_ID,FICB_ITEM
		]]>
		  -->
		 <!--  
		 <![CDATA[
				select t.RECP_ID,t.minRECD_PERIOD,t2.REAL_OWN_PRICE  minOWN_PRICE,t.maxRECD_PERIOD,t1.REAL_OWN_PRICE  maxOWN_PRICE from (
					select MAX(RECD_PERIOD) maxRECD_PERIOD,MIN(RECD_PERIOD) minRECD_PERIOD,RECP_ID  from T_FINA_COLLECTIONBILL 
					where FICB_ITEM=#ficbItemType# and FIIN_ID=#select_income_id# and FICB_STATE=5 and STATUS=0
					group by RECP_ID) t
				left join T_RENT_COLLECTIONDETAIL t1 on t.RECP_ID=t1.RECP_ID and t1.PERIOD_NUM=t.maxRECD_PERIOD
				left join T_RENT_COLLECTIONDETAIL t2 on t.RECP_ID=t2.RECP_ID and t2.PERIOD_NUM=t.minRECD_PERIOD
				where t.RECP_ID is not null and t1.STATUS=0 and t2.STATUS=0
		]]>
		  -->
		 <![CDATA[
				select t.RECP_ID,t.maxRECD_PERIOD,t2.PERIOD_NUM minRECD_PERIOD,
				(
				case 
				when t.minRECD_PERIOD=1 then tt.LEASE_RZE
				else t2.REAL_OWN_PRICE
				end 
				)minOWN_PRICE,
				t1.REAL_OWN_PRICE maxOWN_PRICE from (
					select MAX(RECD_PERIOD) maxRECD_PERIOD,MIN(RECD_PERIOD) minRECD_PERIOD,RECP_ID 
					 from T_FINA_COLLECTIONBILL 
					where FICB_ITEM=#ficbItemType# and FIIN_ID=#select_income_id# and FICB_STATE=5 and STATUS=0
					group by RECP_ID) t
				left join T_RENT_COLLECTIONDETAIL t1 on t.RECP_ID=t1.RECP_ID and t1.PERIOD_NUM=t.maxRECD_PERIOD
				left join T_RENT_COLLECTIONDETAIL t2 on t.RECP_ID=t2.RECP_ID and t2.PERIOD_NUM=t.minRECD_PERIOD-1
				left join (
				select t.RECP_ID,t.RECT_ID,t1.LEASE_RZE from T_RENT_COLLECTIONPLAN t
				left join T_RENT_CONTRACTSCHEMA t1 on t.RECT_ID=t1.RECT_ID and t1.STATUS=0
				where t.STATUS=0
				) tt on t.RECP_ID=tt.RECP_ID
				where t.RECP_ID is not null and t1.STATUS=0
		]]>
	</select>
	
	<!--  根据支付表查询出该支付表供应商保证不为无并且该客户是循环授信的客户  -->
	<select id="getCustByCollectionPlan" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select t.RECP_ID,t1.RECT_ID,t3.CUST_ID,t3.CUST_NAME,t6.SUPL_TRUE,t7.FLAG,t8.REPEAT_CREDIT,t8.CUGP_ID from T_RENT_COLLECTIONPLAN t
			     left join T_RENT_CONTRACT t1 on t1.STATUS=0 and t.RECT_ID=t1.RECT_ID
			      left join T_PRJT_CREDIT t2 on t1.PRCD_ID=t2.ID and t2.STATUS=0
			     left join T_CUST_CUSTOMER t3 on t3.STATUS=0 and t1.CUST_ID=t3.CUST_ID
			     left join T_PRJT_CREDITSCHEME t6 on t6.CREDIT_ID=t2.ID
			      left join T_DATA_DICTIONARY t7 on t6.SUPL_TRUE=t7.CODE and t7.STATUS=0
			      left join T_CUST_GRANTPLAN t8 on t8.STATUS=0 and t8.CUST_ID=t3.CUST_ID
			      where t.STATUS=0 and t.RECP_ID=#recp_idbyfiin_id# and t7.TYPE=#suppType# and t7.FLAG<>#suppState# and t8.REPEAT_CREDIT=1
		]]>
	</select>
	
	<!--  根据支付表查询出该支付表供应商保证不为无并且该供应商是循环授信的客户  -->
	<select id="getSupplierByCollectionPlan" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			    select t5.ID suppId,t8.PDGP_ID,sum(t2.UNIT_PRICE) UNIT_PRICE,t1.LEASE_TOPRIC,t8.REPEAT_CREDIT from T_RENT_COLLECTIONPLAN t
			    left join T_RENT_CONTRACT t1 on t1.STATUS=0 and t.RECT_ID=t1.RECT_ID
			    LEFT join T_RENT_CONTRACTDETAIL t2 on t1.RECT_ID=t2.RECT_ID and t2.STATUS=0
				LEFT join T_EQMT_EQUIPMENT t3 on t2.EQMT_ID=t3.EQMT_ID and t3.STATUS=0
			    left join T_SUPL_EQUIPMENT t4 on t3.SUEQ_ID=t4.SUEQ_ID and t4.STATUS=0
			    left join T_SUPL_SUPPLIER t5 on t4.SUPPLIER_ID=t5.ID and t5.STATUS=0
			    left join T_PRJT_CREDIT t9 on t1.PRCD_ID=t9.ID and t9.STATUS=0
			    left join T_PRJT_CREDITSCHEME t6 on t6.CREDIT_ID=t9.ID
			    left join T_DATA_DICTIONARY t7 on t6.SUPL_TRUE=t7.CODE and t7.STATUS=0
			    left join T_PRODUCT_GRANTPLAN t8 on t8.STATUS=0 and t8.PRODUCT_ID=t5.ID
			    where t.STATUS=0 and t.RECP_ID=#recp_idbyfiin_id# and t7.TYPE=#suppType# and t7.FLAG<>#suppState#
			    group by t5.ID,t8.PDGP_ID,t1.LEASE_TOPRIC,t8.REPEAT_CREDIT
			    order by t5.ID
		]]>
	</select>
	
	<!--  根据支付表查询出该支付表供应商保证不为无并且该担保人是循环授信的客户  -->
	<select id="getdanbaorenByCollectionPlan" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			     select 1 TYPE,t3.PDVP_ID,t.ID,t.LEASE_CODE from T_RENT_COLLECTIONPLAN t4
			left join T_RENT_CONTRACT t5 on t5.STATUS=0 and t4.RECT_ID=t5.RECT_ID
			left join T_PRJT_CREDIT t on t5.PRCD_ID=t.ID and t.STATUS=0
			LEFT JOIN T_PRJT_CREDITSCHEME T1 ON T1.CREDIT_ID=T.ID
			LEFT JOIN T_PRJT_VOUCHCUSTOMERCORP T2 ON T.ID=T2.PRCD_ID
			LEFT JOIN T_PRODUCT_VOUCHPLAN T3 ON  T3.VOUCH_NAME=T2.CORP_NAME_CN AND T3.VOUCH_CODE=T2.ORGANIZATION_CODE_CERTIFICATE
			 left join T_DATA_DICTIONARY t7 on t1.SUPL_TRUE=t7.CODE and t7.STATUS=0
			 where t4.STATUS=0 and t4.RECP_ID=#recp_idbyfiin_id# and t7.TYPE=#suppType#  and t7.FLAG<>#suppState# and t3.REPEAT_CREDIT=1
			UNION
			select 0 TYPE,t3.PDVP_ID,t.ID,t.LEASE_CODE from T_RENT_COLLECTIONPLAN t4
			left join T_RENT_CONTRACT t5 on t5.STATUS=0 and t4.RECT_ID=t5.RECT_ID
			left join T_PRJT_CREDIT t on t5.PRCD_ID=t.ID and t.STATUS=0
			LEFT JOIN T_PRJT_CREDITSCHEME T1 ON T1.CREDIT_ID=T.ID
			LEFT JOIN T_PRJT_CREDITVOUCHNATU T2 ON T.ID=T2.PRCD_ID
			LEFT JOIN T_PRODUCT_VOUCHPLAN T3 ON T3.VOUCH_NAME=T2.CUST_NAME AND T3.VOUCH_CODE=T2.NATU_IDCARD
			 left join T_DATA_DICTIONARY t7 on t1.SUPL_TRUE=t7.CODE and t7.STATUS=0
			 where t4.STATUS=0 and t4.RECP_ID=#recp_idbyfiin_id# and t7.TYPE=#suppType#  and t7.FLAG<>#suppState# and t3.REPEAT_CREDIT=1
			 
		]]>
	</select>
	
	<!--  客户授信加上已经还的金额  -->
	<update id="updatelastpriceByCugpid" parameterClass="map">
		<![CDATA[ 
		 update T_CUST_GRANTPLAN  set LAST_PRICE=LAST_PRICE+#lastprice# where CUGP_ID=#cugpid#
		]]>
	</update>
	
	<!--  供应商授信加上已经还的金额  -->
	<update id="updatelastpriceByPdgpid" parameterClass="map">
		<![CDATA[ 
		 update T_PRODUCT_GRANTPLAN  set LAST_PRICE=LAST_PRICE+#lastprice# where PDGP_ID=#pdgpid#
		]]>
	</update>
	
	<!--  担保人授信加上已经还的金额  -->
	<update id="updatelastpriceByPdvpid" parameterClass="map">
		<![CDATA[ 
		 update T_PRODUCT_VOUCHPLAN  set LAST_PRICE=LAST_PRICE+#lastprice# where PDVP_ID=#pdvpid#
		]]>
	</update>

	<select id="isSettle" parameterClass="map" resultClass="java.lang.Integer">
	<!--  Modify by Michael 2011 12/31 判断是否结清时要加入罚息、留购款是否有结清
			SELECT  
				COUNT(1)
			FROM
				T_RENT_COLLECTIONDETAIL t 
				left join T_FINA_COLLECTIONBILL t1 on t1.RECP_ID = t.RECP_ID AND T1.STATUS = 0
				LEFT JOIN T_RENT_COLLECTIONPLAN T2 ON T2.RECP_ID = T.RECP_ID AND T2.STATUS = 0
			WHERE
			t.RECP_ID = #recp_id#
			and t.STATUS = 0
			and t1.REAL_PRICE = t1.SHOULD_PRICE
			and (t1.RECD_TYPE = 0 OR T1.RECD_TYPE = 2)
			and t1.FICB_STATE != 1
			AND T2.LEASE_PERIOD = T1.RECD_PERIOD
			AND T1.REAL_PRICE = (
				SELECT 
					SUM(T2.REAL_PRICE) PRICE
				FROM 
					T_FINA_COLLECTIONBILL T2
				WHERE 
					T2.RECP_ID = #recp_id#
					AND t2.FICB_STATE != 1
					AND T2.STATUS = 0
					AND T2.RECD_PERIOD = ( SELECT MAX(RECD_PERIOD) FROM T_FINA_COLLECTIONBILL WHERE RECP_ID = #recp_id# AND STATUS = 0 AND FICB_STATE != 1)
				GROUP BY T2.RECD_PERIOD)
				 -->
				<!-- 
				<![CDATA[
				select (case
						when 
							t.count1=t1.LEASE_PERIOD and ((T2.IRR_MONTH_PRICEcount-T.REAL_PRICEcount) <= 0.005)
						then 1
						else 0
						end) state 
				from	(
							SELECT COUNT(1) count1,SUM(TT.REAL_PRICEcount) REAL_PRICEcount,MAX(TT.RECP_ID) RECP_ID FROM (
								SELECT
									SUM(REAL_PRICE) REAL_PRICEcount,max(RECP_ID) recp_id 
								FROM
									T_FINA_COLLECTIONBILL t 
								WHERE
									t.FICB_TYPE=0 
									AND t.FICB_ITEM= #zujin# 
									AND T.FICB_STATE = 5 
									AND t.STATUS=0
									AND T.RECP_ID = #recp_id#
								GROUP BY 
									RECD_PERIOD
							) TT
						 ) t
				left join (
							select max(t.RECP_ID) RECP_ID,SUM(IRR_MONTH_PRICE) IRR_MONTH_PRICEcount from T_RENT_COLLECTIONDETAIL t where t.STATUS=0 GROUP BY t.recp_id
							) t2 on t2.RECP_ID=t.recp_id
				LEFT JOIN T_RENT_COLLECTIONPLAN t1 on t.recp_id=t1.RECP_ID and t1.STATUS=0
				where 
					t.recp_id=#recp_id#
					]]>
			 -->
		<!-- Modify by Michael 2012 08-13 修改逾期罚息为Null时判断错误 -->
		<![CDATA[
		select (case
		when 
			t.count1=t1.LEASE_PERIOD and ((T2.IRR_MONTH_PRICEcount-T.REAL_PRICEcount) <= 0.005) 
              and isnull(t_dun_fine.dun_fine,0)<=0.005 
              and t_staybuy_price.staybuy_price<=0.005
              and t_lawyFee.sprice<=0.005
						then 1
						else 0
						end) state 
				from	(
							SELECT COUNT(1) count1,SUM(TT.REAL_PRICEcount) REAL_PRICEcount,MAX(TT.RECP_ID) RECP_ID FROM (
								SELECT
									SUM(REAL_PRICE) REAL_PRICEcount,max(RECP_ID) recp_id 
								FROM
									T_FINA_COLLECTIONBILL t 
								WHERE
									t.FICB_TYPE=0 
									AND t.FICB_ITEM= #zujin#
									AND T.FICB_STATE = 5 
									AND t.STATUS=0
									AND T.RECP_ID = #recp_id#
								GROUP BY 
									RECD_PERIOD
							) TT
						 ) t
				left join (
							select max(t.RECP_ID) RECP_ID,SUM(IRR_MONTH_PRICE)+SUM(ISNULL(VALUE_ADDED_TAX,0)) IRR_MONTH_PRICEcount from T_RENT_COLLECTIONDETAIL t where t.STATUS=0 GROUP BY t.recp_id
							) t2 on t2.RECP_ID=t.recp_id
				LEFT JOIN T_RENT_COLLECTIONPLAN t1 on t.recp_id=t1.RECP_ID and t1.STATUS=0
        left join 
        (select    trcpd.fine-(
			        case 
			        when exists
			        (select ficb.ficb_item, sum(ficb.real_price)
			         from t_fina_collectionbill ficb
			        where ficb.recp_code = trcpd.recp_code
			          and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			          and ficb.status = 0 
			        group by ficb.ficb_item
			       having ficb.ficb_item = '租金罚息') then
			  (select sum(ficb.real_price)
			     from t_fina_collectionbill ficb
			    where ficb.ficb_item = '租金罚息'
			      and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
			      and ficb.status = 0
			      and ficb.recp_code = trcpd.recp_code 
			      group by ficb.ficb_item
			      having ficb.ficb_item = '租金罚息'
			        )else 0 end )- isnull(tdfdr.DIFF_DUN_PRICE, 0)  as dun_fine, trcpd.recp_id
				  from
				(select SUM(fine) fine,RECP_CODE,RECP_ID,RECT_ID ,lease_code,min(PAY_DATE) PAY_DATE
				 from
				(    
				select trc.CUST_ID,trcp.recp_id,trcp.rect_id,trcp.RECP_CODE,trc.lease_code,
				(case when trcp.fine_type = 2 then
				round(should_price *
				     power(1 + trcp.fine_rate / 100, dun_day) -
				     should_price,2)
				else
				 round(should_price * dun_day * fine_rate / 100,2)
				end) fine,trcd.PAY_DATE
				from              
				(select tfcb.RECP_ID,tfcb.recp_code,tfcb.pay_date,tfcb.recd_period,tfcb.ficb_item,max(tfcb.should_price) should_price ,
				sum(tfcb.real_price) real_price,tfcb.cust_code,tfi.opposing_date opposing_date,datediff(d,tfcb.pay_date,opposing_date)  dun_day
				from t_fina_collectionbill tfcb
				left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
				where  (tfcb.ficb_state=4 or tfcb.ficb_state=5)
				and tfi.red_type is null and tfcb.FICB_type='0'
				and tfcb.FICB_ITEM='租金' 
				and datediff(d,tfcb.pay_date,opposing_date)>0 
				group by RECP_ID,recp_code,pay_date,recd_period,ficb_item,cust_code,opposing_date,datediff(d,tfcb.pay_date,opposing_date)) tfcbd
				left join
				t_rent_collectionplan  trcp
				on tfcbd.recp_id=trcp.RECP_ID and trcp.STATUS=0
				left join t_rent_contract trc 
				on trcp.rect_id =trc.rect_id and trc.status=0
				left join
				t_rent_collectiondetail trcd
				on trcd.RECP_ID = trcp.RECP_ID and trcd.PERIOD_NUM=tfcbd.recd_period and trcd.status=0
				where 1=1 
        and trcp.RECP_ID = #recp_id#
		        union all
						select trcp.cust_id,
						trcp.recp_id,
						trcp.rect_id,
						trcp.RECP_CODE,
						trcp.lease_code,
						(case when trcp.fine_type = 2 then
						round((trcp.month_price-reduce_price) *
						     power(1 + trcp.fine_rate / 100, datediff(d,trcp.pay_date,getdate())) -
						     (trcp.month_price-reduce_price),2)
						else
						 round((trcp.month_price-reduce_price) * datediff(d,trcp.pay_date,getdate()) * fine_rate / 100,2)
						end) fine,trcp.PAY_DATE
						from (          
						 select trc.cust_id,trc.cust_code,
						     trcp.recp_id,
						     trcp.rect_id,
						     trcp.RECP_CODE,
						     trc.lease_code,
						     trcp.FUND_STATUS,
						     trcd.pay_date,
						     trcd.period_num, 
						     trcp.fine_type,
						     trcp.fine_rate,
						     isnull(trcd.IRR_MONTH_PRICE, 0)+ISNULL(trcd.VALUE_ADDED_TAX,0) month_price,  
						     isnull(trcd.reduce_own_price, 0) reduce_price
						from t_rent_collectionplan trcp
						left join t_rent_contract trc on trcp.rect_id =
						trc.rect_id
						left join t_rent_collectiondetail trcd on trcp.recp_id =
						trcd.recp_id
						where trcp.status = 0 and trc.status=0
						  and (trcp.fund_status=0 or trcp.fund_status=1)
						 and  trcd.pay_date < = cast(getdate() as datetime)-1
						and isnull(trcd.IRR_MONTH_PRICE, 0)+isnull(trcd.VALUE_ADDED_TAX, 0)-isnull(trcd.reduce_own_price, 0)>0.001) trcp 
						left join  
						(select tfcb.recp_id, max(tfi.opposing_date) opposing_date,max(tfcb.RECD_PERIOD) RECD_PERIOD
						  from t_fina_collectionbill tfcb
						  left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
						 where tfi.opposing_date <= cast(getdate() as datetime)
						 and (tfcb.ficb_state=4 or tfcb.ficb_state=5)
						 and tfi.red_type is null 
						 group by recp_id
						 ) tfcd 
						on trcp.recp_id = tfcd.recp_id and tfcd.RECD_PERIOD=trcp.period_num
						where (case when tfcd.opposing_date is null or
						tfcd.opposing_date <= trcp.pay_date then
						datediff(d,trcp.pay_date,getdate()) else
						datediff(d,tfcd.opposing_date,getdate()) end) > 0 
		        and trcp.RECP_ID = #recp_id#
		        )t1
						group by t1.CUST_ID,t1.recp_id,t1.rect_id,t1.RECP_CODE,t1.lease_code) trcpd
						left join
						T_RENT_SETTLE tdfdr
						on trcpd.RECP_ID=tdfdr.RECP_ID
						and tdfdr.status = 0 and tdfdr.state = 1) t_dun_fine
		        on t_dun_fine.recp_id=t.recp_id
		        left join
		        (select 
		  		recp.recp_id ,
				 rectd.staybuy_price - (case
				   when exists (select ficb.ficb_item, sum(ficb.real_price)
				           from t_fina_collectionbill ficb
				          where ficb.recp_code = recp.recp_code
				            and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
				            and ficb.status = 0
				          group by ficb.ficb_item
				         having ficb.ficb_item = '设备留购价') then
				    (select sum(ficb.real_price)
				       from t_fina_collectionbill ficb
				      where ficb.ficb_item = '设备留购价'
				        and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
				        and ficb.status = 0
				        and ficb.recp_code = recp.recp_code)
				   else
				    0
				 end) as staybuy_price
				from t_rent_contract rect, t_rent_collectionplan recp,(select RECT_ID,SUM(isnull(staybuy_price,0)) staybuy_price from T_RENT_CONTRACTDETAIL where STATUS=0 group by RECT_ID) rectd
				where recp.rect_id = rect.rect_id
				and recp.status = 0 
				and rectd.RECT_ID=rect.RECT_ID
				and recp.RECP_ID = #recp_id#) t_staybuy_price
				on t_staybuy_price.recp_id=t.RECP_ID
				left join 
				(select 
				lawfee.sum_lawyfee - (
				(select isnull(sum(ficb.real_price),0)
				from t_fina_collectionbill ficb
				where ficb.ficb_item in (select FLAG from T_DATA_DICTIONARY where type = '法务费用') 
				and (ficb.ficb_state = 4 or ficb.ficb_state = 5)
				and ficb.status = 0
				and ficb.recp_id = recp.recp_id)
		    	) as sprice,recp.RECP_ID
				from t_rent_collectionplan recp,
				(select recp_id,SUM(fee_value) sum_lawyfee from T_LAWY_FEELIST where STATUS=0 group by RECP_ID) lawfee
				where recp.recp_id = lawfee.recp_id
				and recp.RECP_ID=#recp_id#
				and recp.status = 0 ) t_lawyFee
				on t_lawyFee.recp_id=t.RECP_ID
				where 
					t.RECP_ID = #recp_id#
		]]>		
	</select>
	<select id="selectSettleState" parameterClass="map" resultClass="java.lang.Integer">
		<![CDATA[
			SELECT 
				(CASE 
				WHEN MAX(T.PAY_DATE) <= GETDATE()
				THEN 1
				ELSE 0
				END) STATE
			FROM
				T_RENT_COLLECTIONDETAIL T
			WHERE
				T.STATUS = 0
				AND T.RECP_ID = #recp_id#
		]]>
	</select>
	<select id="selectRecpStatusANDTrseIdByRecpId"  parameterClass="map" resultClass="java.util.HashMap">
		SELECT
			T.RECP_ID,T.RECP_STATUS , TRSE_ID
		FROM 
			T_RENT_COLLECTIONPLAN T
			LEFT JOIN T_RENT_SETTLE T1 ON T1.RECP_ID = T.RECP_ID AND T1.STATUS = 0 AND T1.STATE =1 
		WHERE
			T.STATUS = 0
			AND T.RECP_ID = #recp_id#
	</select>
	<select id="queryFinaCollectionBills"  parameterClass="map" resultClass="java.util.HashMap">
		select * from T_FINA_COLLECTIONBILL T
		left join 
		(select RECP_ID,RECP_CODE, MAX(RECD_PERIOD) MAXPERIOD 
		from T_FINA_COLLECTIONBILL WHERE FIIN_ID=#select_income_id# AND STATUS=0
		group by RECP_ID,RECP_CODE) T1
		on T.RECP_ID=T1.RECP_ID and T.RECP_CODE=T1.RECP_CODE 
		where T.STATUS=0 and T.FICB_TYPE=0 and T.RECD_PERIOD>T1.MAXPERIOD
	</select>
	<select id="FinaBillsLater_jieqing"  parameterClass="map" resultClass="java.util.HashMap">
		select t1.FICB_ID,SUM(t1.REAL_PRICE) SUMREAL_PRICE from T_FINA_COLLECTIONBILL t1 where t1.FICB_ITEM like #jieqingitem_jieqing# and t1.RECP_ID in (select RECP_ID from T_FINA_COLLECTIONBILL where FIIN_ID=#select_income_id# and STATUS=0)
		group by t1.FICB_ID
	</select>
	
	<select id="queryFinaCollectionBills_JIEQING"  parameterClass="map" resultClass="java.util.HashMap">
		select TNEW.RECP_ID,TNEW.RECP_CODE, TNEW.RECD_PERIOD
		from (select * from T_FINA_COLLECTIONBILL where FIIN_ID=#select_income_id# AND STATUS=0 and FICB_ITEM!=#jieqingitem#) TNEW  WHERE TNEW.FIIN_ID=#select_income_id# AND TNEW.STATUS=0 and TNEW.FICB_ITEM LIKE #jieqingitem_jieqing#
	</select>
	<select id="IfCollectionBills_JIEQING"  parameterClass="map" resultClass="java.util.HashMap">
		select * from T_FINA_COLLECTIONBILL where FIIN_ID=#select_income_id# AND STATUS=0 and FICB_ITEM like #jieqingitem_jieqing#
	</select>
	
	<!-- Modify by Michael 2012 3-7 增加来款账号、对方等信息 -->
	<select id="selectoldIncomeVirtual"  parameterClass="map" resultClass="java.util.HashMap">
		select virtual_code,RECEIPT_BANKNO, RECEIPT_UNIT, OPPOSING_BANKNO, OPPOSING_UNIT, OPPOSING_BANKNAME, OPPOSING_DATE, OPPOSING_TYPE,UPLOAD_USER_ID, UPLOAD_TIME from T_FINA_INCOME where FIIN_ID=#left_id# and STATUS=0
	</select>
	<!--  查询结清分解是否结清  -->
	<select id="selectSettleIsSettle"  parameterClass="map" resultClass="java.lang.Integer">
		<![CDATA[
		SELECT 
			CASE
			WHEN(
				ISNULL(SUM(REAL_PRICE),0)
					-
				(SELECT REAL_TOTAL
				FROM
					T_RENT_SETTLE 
				WHERE 
					STATUS = 0
					AND STATE = 1
					AND RECP_ID = #recp_id#)
				) < 0.0005
				AND
				(
				ISNULL(SUM(REAL_PRICE),0)
					-
				(SELECT REAL_TOTAL
				FROM
					T_RENT_SETTLE 
				WHERE 
					STATUS = 0
					AND STATE = 1
					AND RECP_ID = #recp_id#)
				) > -0.0005
			THEN 1
			ELSE 2
			END
		FROM 
			T_FINA_COLLECTIONBILL T
		WHERE
			T.STATUS = 0
			AND FICB_STATE = 5
			AND FICB_TYPE = 0 
			AND RECP_ID = #recp_id#
			AND FICB_ITEM LIKE '$jieqing$%' 
				]]>
	</select>
	
	<update id="updateBankNoUnit" parameterClass="map">
		UPDATE t_fina_income SET OPPOSING_BANKNO = #OPPOSING_BANKNO#, 
			MODIFY_TIME=GETDATE(),
			MODIFY__USER_ID=#s_employeeId# 
		WHERE FIIN_ID = #FIIN_ID#	
	</update>
	<update id="updateVIRTUAL_CODE" parameterClass="map">
		UPDATE t_fina_income SET virtual_code = #VIRTUAL_CODE#, 
			MODIFY_TIME=GETDATE(),
			MODIFY__USER_ID=#s_employeeId# 
		WHERE FIIN_ID = #FIIN_ID#	
	</update>		
	<update id="updateOpposinUnit" parameterClass="map">
		UPDATE t_fina_income SET OPPOSING_UNIT = #OPPOSING_UNIT# , 
			MODIFY_TIME=GETDATE(),
			MODIFY__USER_ID=#s_employeeId# 
		WHERE FIIN_ID = #FIIN_ID#	
	</update>
	<!-- Modify by Michael 2012 4-27 财务驳回款项也可以进行修改 -->
	<select id="queryNotDecomposeFinaIncome" parameterClass="map" resultClass="java.util.HashMap">
		SELECT
			* 
		FROM 
			t_fina_income t
		WHERE 
			T.STATUS = 0
			AND T.OPPOSING_TYPE != #daifenjielaikuan#
			AND NOT EXISTS
			(SELECT 1 FROM T_FINA_COLLECTIONBILL T1 WHERE T1.STATUS = 0 AND T1.FIIN_ID=T.FIIN_ID AND FICB_STATE=5)
			<isNotEmpty prepend="and" property="OPPOSING_UNIT">
				(OPPOSING_UNIT LIKE '%$OPPOSING_UNIT$%' OR virtual_code LIKE '%$OPPOSING_UNIT$%' OR OPPOSING_BANKNO LIKE '%$OPPOSING_UNIT$%')
			</isNotEmpty>
			<isNotEmpty prepend="and" property="moneyBegin">
				<![CDATA[
					INCOME_MONEY >= #moneyBegin#
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="moneyEnd">
				<![CDATA[
					INCOME_MONEY <= #moneyEnd#
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="dateBegin">
				<![CDATA[
					OPPOSING_DATE >= convert(date,#dateBegin#)
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="dateEnd">
				<![CDATA[
					OPPOSING_DATE <= convert(date,#dateEnd#) 
				]]>
			</isNotEmpty>
						
	</select>
	<select id="queryNotDecomposeFinaIncome_count" parameterClass="map" resultClass="java.lang.Integer">
		SELECT
			count(FIIN_ID)
		FROM 
			t_fina_income t
		WHERE 
			T.STATUS = 0
			AND T.OPPOSING_TYPE != #daifenjielaikuan#
			AND NOT EXISTS
			(SELECT 1 FROM T_FINA_COLLECTIONBILL T1 WHERE T1.STATUS = 0 AND T1.FIIN_ID=T.FIIN_ID AND FICB_STATE=5)
			<isNotEmpty prepend="and" property="OPPOSING_UNIT">
				(OPPOSING_UNIT LIKE '%$OPPOSING_UNIT$%' OR virtual_code LIKE '%$OPPOSING_UNIT$%' OR OPPOSING_BANKNO LIKE '%$OPPOSING_UNIT$%')
			</isNotEmpty>
			<isNotEmpty prepend="and" property="moneyBegin">
				<![CDATA[
					INCOME_MONEY >= #moneyBegin#
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="moneyEnd">
				<![CDATA[
					INCOME_MONEY <= #moneyEnd#
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="dateBegin">
				<![CDATA[
					OPPOSING_DATE >= convert(date,#dateBegin#)
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="dateEnd">
				<![CDATA[
					OPPOSING_DATE <= convert(date,#dateEnd#) 
				]]>
			</isNotEmpty>
	</select>
	<!-- Modify by Michael 2012 1/4 查出所有未分解来款 -->
	<select id="queryNotDecomposeFinaIncome1" parameterClass="map" resultClass="java.util.HashMap">
	<!--  
		SELECT
			* 
		FROM 
			t_fina_income t
			LEFT JOIN t_bank_bankaccount T1 ON T.RECEIPT_BANKNO=t1.ACCOUNT_NO AND T1.STATUS = 0
			LEFT JOIN t_bank_bankinfo T2 ON T1.BABI_ID=T2.BABI_ID AND T2.STATUS = 0
		WHERE 
			T.STATUS = 0
			AND T.OPPOSING_TYPE != #daifenjielaikuan#
			AND T.FIIN_ID NOT IN (
				SELECT FIIN_ID FROM T_FINA_COLLECTIONBILL WHERE STATUS = 0
			)
			AND DATEDIFF(day,t.OPPOSING_DATE,#dateState#)=0
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ T2.BANK_NAME=#bank# ]]>
			</isNotEmpty>
			 -->
		<!-- 
		SELECT
			* 
		FROM 
			t_fina_income t
			LEFT JOIN t_fina_income t3 on t.LEFT_ID = t3.FIIN_ID
			LEFT JOIN t_bank_bankaccount T1 ON T.RECEIPT_BANKNO=t1.ACCOUNT_NO AND T1.STATUS = 0
			LEFT JOIN t_bank_bankinfo T2 ON T1.BABI_ID=T2.BABI_ID AND T2.STATUS = 0
		WHERE 
			T.STATUS = 0
			AND 
			(
				(T.OPPOSING_TYPE != #daifenjielaikuan#
				 AND T.FIIN_ID NOT IN ( SELECT FIIN_ID FROM T_FINA_COLLECTIONBILL WHERE STATUS = 0 )
				) or (
					T.OPPOSING_TYPE = #daifenjielaikuan#
					AND t3.INCOME_MONEY = 0
					AND T3.RED_ID IS NOT NULL
					AND T.DECOMPOSE_STATUS = 2
				)
			)
			AND DATEDIFF(day,t.UPLOAD_TIME,#dateState#)=0
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ T2.BANK_NAME=#bank# ]]>
			</isNotEmpty>
		 -->
		SELECT
			* 
		FROM 
			t_fina_income t
			LEFT JOIN t_fina_income t3 on t.LEFT_ID = t3.FIIN_ID
			LEFT JOIN t_bank_bankaccount T1 ON T.RECEIPT_BANKNO=t1.ACCOUNT_NO AND T1.STATUS = 0
			LEFT JOIN t_bank_bankinfo T2 ON T1.BABI_ID=T2.BABI_ID AND T2.STATUS = 0
		WHERE 
			T.STATUS = 0
			AND 
			(
				(T.OPPOSING_TYPE != #daifenjielaikuan#
				 AND T.FIIN_ID NOT IN ( SELECT FIIN_ID FROM T_FINA_COLLECTIONBILL WHERE STATUS = 0 )
				) or (
					T.OPPOSING_TYPE = #daifenjielaikuan#
					AND t3.INCOME_MONEY = 0
					AND T3.RED_ID IS NOT NULL
					AND (T.DECOMPOSE_STATUS = 2 or T.DECOMPOSE_STATUS = 1)
				)
			)
			<isNotEmpty prepend="and" property="bank">
				<![CDATA[ T2.BANK_NAME=#bank# ]]>
			</isNotEmpty> 		 
	</select>
	<select id="checkCustNameIsDecompose" parameterClass="map" resultClass="java.lang.String">
		<![CDATA[
			SELECT 
				ISNULL(MAX(T.CUST_CODE),'') CUST_CODE
			FROM
				T_CUST_CUSTOMER T
				LEFT JOIN T_RENT_CONTRACT T1 ON T1.CUST_ID = T.CUST_ID 
				LEFT JOIN T_RENT_COLLECTIONPLAN T2 ON T2.RECT_ID = T1.RECT_ID 
			WHERE
				T.STATUS = 0
				AND T1.STATUS = 0
				AND T2.STATUS = 0
				AND T.CUST_NAME = #cust_name# 
		]]>
	</select>
	<!--  Add By Michael 2011 12/12  -->
	<!--  修改来款金额与将要分解来款金额不一致时的分解状态  -->
	<update id="updateIncomeDecomposeStatus" parameterClass="map">
		<![CDATA[
			update t_fina_income  
			   set  Abnormal_Status = #Abnormal_Status#
			 where  fiin_id = #select_income_id#
		]]>
	</update>
	
	
	<!--  Add By Michael 2011 12/23 For 保证金销账错误，还原资料到原始状态 -->
	<update id="updateIncomeDecomposeStatusTemp" parameterClass="map">
		<![CDATA[
			update T_FINA_INCOME set DECOMPOSE_STATUS='2' 
			where FIIN_ID in(select FIIN_ID from t_fina_collectionbill where RECP_CODE=#RECP_CODE#)	
		]]>
	</update>	
	<delete id="deleteDecomposeIncomeTemp" parameterClass="map">
		<![CDATA[
			delete from T_FINA_INCOME 
			where FIIN_ID in(select FIIN_ID from t_fina_collectionbill where RECP_CODE=#RECP_CODE#) 
			and RECEIPT_BANKNO='XT-DFJ'
		]]>
	</delete>
	<delete id="deleteDecomposeBillTemp" parameterClass="map">
		<![CDATA[
			delete from t_fina_collectionbill where RECP_CODE=#RECP_CODE#
		]]>
	</delete>
	<update id="updateCollectionDetailTemp" parameterClass="map">
		<![CDATA[
			update T_RENT_COLLECTIONDETAIL set 	REDUCE_OWN_PRICE=null 
			where RECP_ID in 
			(select RECP_ID from T_RENT_COLLECTIONPLAN where RECP_CODE=#RECP_CODE#)
		]]>
	</update>

<!--  Add By Michael 2011 12/28 add dunDetail -->
<!-- Modify by Michael 2012 3-4 增加客户名称 -->	
	<select id="findDunDetailByRecpCode" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select tfcbd.recd_period as period_num,convert(varchar,tfcbd.pay_date, 23) pay_date,
			convert(varchar,tfcbd.opposing_date, 23) opposing_date,dun_day,
			(convert(decimal(18,2),should_price)-convert(decimal(18,2),tfcbd.real_price) ) as dun_price,
			convert(decimal(18,2),trcd.irr_month_price + ISNULL(trcd.VALUE_ADDED_TAX,0))  as month_price,
			convert(decimal(18,2),tfcbd.real_price) real_price,
			(case when trcp.fine_type = 2 then
			round(real_price *
			     power(1 + trcp.fine_rate / 100, dun_day) -
			     real_price,2)
			else
			 round(real_price * dun_day * fine_rate / 100,2)
			end) fine,trcp.recp_code,trcp.recp_id,trc.CUST_NAME
			from              
			(select tfcb.RECP_ID,tfcb.recp_code,tfcb.pay_date,tfcb.recd_period,max(tfcb.should_price) should_price ,
			sum(tfcb.real_price) real_price,tfcb.cust_code,tfi.opposing_date opposing_date,datediff(d,tfcb.pay_date,opposing_date)  dun_day
			from t_fina_collectionbill tfcb
			left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
			where  tfcb.ficb_state=5
			and tfi.red_type is null and tfcb.FICB_type='0'
			and (tfcb.FICB_ITEM='租金' or tfcb.FICB_ITEM='增值税')
			
			group by RECP_ID,recp_code,pay_date,recd_period,cust_code,opposing_date,datediff(d,tfcb.pay_date,opposing_date)) tfcbd
			left join
			t_rent_collectionplan  trcp
			on tfcbd.recp_id=trcp.RECP_ID and trcp.STATUS=0
			left join t_rent_contract trc 
			on trcp.rect_id =trc.rect_id and trc.status=0
			left join
			t_rent_collectiondetail trcd
			on trcd.RECP_ID = trcp.RECP_ID and trcd.PERIOD_NUM=tfcbd.recd_period and trcd.status=0
			where trcp.recp_code=#RECP_CODE#
			]]>
	</select>
	
	<select id="findDunDetailByRecpCodeUnPay" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select 
			trcp.period_num,
			convert(varchar,trcp.pay_date, 23) pay_date,
			null as opposing_date ,
			datediff(d,trcp.pay_date,getdate())  dun_day,
			convert(decimal(18,2),trcp.month_price-reduce_price) as dun_price,
			convert(decimal(18,2),month_price) as month_price,
			 0 as real_price,
			(case when trcp.fine_type = 2 then
			round((trcp.month_price-reduce_price) *
			     power(1 + trcp.fine_rate / 100, datediff(d,trcp.pay_date,getdate())) -
			     (trcp.month_price-reduce_price),2)
			else
			 round((trcp.month_price-reduce_price) * datediff(d,trcp.pay_date,getdate()) * fine_rate / 100,2)
			end) fine,trcp.recp_code,trcp.recp_id,cust_name
			from (          
			 select trcp.recp_code,
			     trcp.recp_id,
			     trcp.rect_id,
			     trcp.warn_status,
			     trcd.pay_date,
			     trcd.period_num, 
			     trcp.fine_type,
			     trcp.fine_rate,
			     isnull(trcd.IRR_MONTH_PRICE, 0)+isnull(trcd.VALUE_ADDED_TAX, 0) month_price,  
			     isnull(trcd.reduce_own_price, 0) reduce_price,trc.CUST_NAME
			from t_rent_collectionplan trcp
			left join t_rent_contract trc on trcp.rect_id =
			trc.rect_id
			left join t_rent_collectiondetail trcd on trcp.recp_id =
			trcd.recp_id
			where trcp.status = 0 and trc.status=0
			  and (trcp.fund_status=0 or trcp.fund_status=1)
			and isnull(trcd.IRR_MONTH_PRICE, 0)+isnull(trcd.VALUE_ADDED_TAX, 0)-isnull(trcd.reduce_own_price, 0)>0.001
			and trcp.recp_code=#RECP_CODE#
			) trcp 
		]]>
	</select>
	
	
	<!--  Add By Michael 2011 12/28 add dunDetail InComeMoney  -->	
	<select id="findDunDetailInComeMoneyByRecpID" parameterClass="map" resultClass="java.util.HashMap">
		select ficb.ficb_item,ficb.REAL_PRICE,convert(varchar,tfic.OPPOSING_DATE,23) OPPOSING_DATE
	   from t_fina_collectionbill ficb
	   left join
	   T_FINA_INCOME tfic
	   on ficb.FIIN_ID = tfic.FIIN_ID
	  where
	  (ficb.ficb_state = 4 or ficb.ficb_state = 5)
	    and ficb.status = 0 
	    and ficb.ficb_item like '%罚息%'
	    and ficb.RECP_ID=#RECP_ID#
		union all             
		select '免除罚息' as ficb_item, tdfdr.DIFF_DUN_PRICE as REAL_PRICE,convert(varchar,tdfdr.CREATE_DATE,23)
		from T_RENT_SETTLE  tdfdr
		where tdfdr.status = 0 and tdfdr.state = 1
		and tdfdr.RECP_ID=#RECP_ID#		
	</select>

	<!--  Add by Michael 2011 12/30 查出系统目前所有的支付表表  -->
	<select id="getAllCollectionPlan" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[
		   select recp_id,recp_code from T_RENT_COLLECTIONPLAN where STATUS=0
	]]>
	</select>
	
<!--  查询申请结清所要的数据 出剩余的    利息总和、 租金总和、已缴期数、本金总额  -->
	<select id="getAllOwnRenPrice" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
		SELECT 
			ISNULL(SUM_MONTH_PRICE,0) - ISNULL(SUM_REN_PRICE,0) SUM_OWN_PRICE,
			*
		FROM(
			SELECT 
				ISNULL(SUM(IRR_MONTH_PRICE),0) SUM_MONTH_PRICE,
				ISNULL(SUM(T.REN_PRICE),0) - ISNULL((
						SELECT 
							SUM(CASE
							WHEN T1.REN_PRICE  - T.REAL_PRICE > 0
							THEN T.REAL_PRICE
							ELSE T1.REN_PRICE
							END) REN_PRICE
						FROM 
							( SELECT 
									RECD_PERIOD RECD_PERIOD, SUM(REAL_PRICE) REAL_PRICE
								FROM 
									T_FINA_COLLECTIONBILL 
								WHERE 
									STATUS =0 
									AND RECP_ID =  #RECP_ID# 
									AND FICB_ITEM = #zujin#
									AND FICB_TYPE = 0 
									AND FICB_STATE = 5
									AND RECD_PERIOD NOT IN (  
										SELECT 
											RECD_PERIOD
										FROM
											T_RENT_COLLECTIONDETAIL T
											LEFT JOIN (
													SELECT
														RECD_PERIOD,SUM(REAL_PRICE) REAL_PRICEcount,max(RECP_ID) recp_id 
													FROM
														T_FINA_COLLECTIONBILL t 
													WHERE
														t.FICB_TYPE=0 
														AND t.FICB_ITEM= #zujin#
														AND T.FICB_STATE = 5 
														AND t.STATUS=0
														AND t.RECP_ID =  #RECP_ID#
													GROUP BY 
														RECD_PERIOD
											) T1 ON T1.recp_id = T.recp_id AND T1.RECD_PERIOD = T.PERIOD_NUM
										WHERE
											((T1.REAL_PRICEcount - T.IRR_MONTH_PRICE) <= 0.005
											AND (T1.REAL_PRICEcount - T.IRR_MONTH_PRICE) >= -0.005)
											AND T.STATUS = 0 
											AND T.RECP_ID =  #RECP_ID#
									)
								GROUP BY RECD_PERIOD
							) T
							LEFT JOIN T_RENT_COLLECTIONDETAIL T1 ON T1.PERIOD_NUM = T.RECD_PERIOD AND T1.STATUS = 0 AND T1.RECP_ID =  #RECP_ID#
						) ,0) SUM_REN_PRICE,
				(
					select 
			               isnull(sum(rectd.staybuy_price), 0) as sprice
			          from t_rent_contract         rect,
			               t_rent_collectionplan   recp,
			               t_rent_contractdetail   rectd
			         where recp.rect_id = rect.rect_id
			           and recp.recp_id = rectd.recp_id
			           and recp.fund_status = 0
			           and recp.version_code =
			               (select max(version_code)
			                  from t_rent_collectionplan recp2
			                 where recp2.recp_code = recp.recp_code)
			           and recp.recp_ID =   #RECP_ID#
			         group by rect.rect_id,
			                  recp.recp_id,
			                  rect.lease_code,
			                   convert(varchar,recp.end_date, 23),
			                  recp.recp_code
			       )  LGJ ,
			       (
			       		SELECT 
							COUNT(1)
						FROM
							T_RENT_COLLECTIONDETAIL T
							LEFT JOIN (	
									SELECT
										RECD_PERIOD,SUM(REAL_PRICE) REAL_PRICEcount,max(RECP_ID) recp_id 
									FROM
										T_FINA_COLLECTIONBILL t 
									WHERE
										t.FICB_TYPE=0 
										AND t.FICB_ITEM= #zujin#
										AND T.FICB_STATE = 5 
										AND t.STATUS=0
										AND t.RECP_ID = #RECP_ID#
									GROUP BY 
										RECD_PERIOD
							) T1 ON T1.recp_id = T.recp_id AND T1.RECD_PERIOD = T.PERIOD_NUM
						WHERE
							((T1.REAL_PRICEcount - T.IRR_MONTH_PRICE) <= 0.005
							AND (T1.REAL_PRICEcount - T.IRR_MONTH_PRICE) >= -0.005)
							AND T.STATUS = 0 
							AND T.RECP_ID = #RECP_ID#
			       ) REAL_PERIOD
			FROM 
				T_RENT_COLLECTIONDETAIL T
			WHERE
				T.STATUS = 0
				AND T.RECP_ID =  #RECP_ID#
				AND T.PERIOD_NUM NOT IN 
					(
						SELECT 
							RECD_PERIOD
						FROM
							T_RENT_COLLECTIONDETAIL T
							LEFT JOIN (
									SELECT
										RECD_PERIOD,SUM(REAL_PRICE) REAL_PRICEcount,max(RECP_ID) recp_id 
									FROM
										T_FINA_COLLECTIONBILL t 
									WHERE
										t.FICB_TYPE=0 
										AND t.FICB_ITEM= #zujin#
										AND T.FICB_STATE = 5 
										AND t.STATUS=0
										AND t.RECP_ID = #RECP_ID#
									GROUP BY 
										RECD_PERIOD
							) T1 ON T1.recp_id = T.recp_id AND T1.RECD_PERIOD = T.PERIOD_NUM
						WHERE
							((T1.REAL_PRICEcount - T.IRR_MONTH_PRICE) <= 0.005
							AND (T1.REAL_PRICEcount - T.IRR_MONTH_PRICE) >= -0.005)
							AND T.STATUS = 0 
							AND T.RECP_ID = #RECP_ID#
					)
			) t
		]]>
	</select>
	
	<insert id="insertIntoOwnPrice" parameterClass="map">
	<![CDATA[
		insert into t_temp_test_own_price values(
		#RECP_CODE#,
		#RECP_ID#,
		#SUM_OWN_PRICE#,
		#SUM_REN_PRICE#
		)
	]]>
	</insert>	
	
	<!--  Add By Michael 2011 1/4 -->
	<!--  查所有待分解额  -->
	<select id="findAllNotDecompose" parameterClass="map" resultClass="java.util.HashMap">
	 <![CDATA[
			select ISNULL(SUM(INCOME_MONEY),0) NOTDECOMP from t_fina_income t
			left join t_bank_bankaccount t1 on t.RECEIPT_BANKNO=t1.ACCOUNT_NO and t1.STATUS=0
			left join t_bank_bankinfo t2 on t2.BABI_ID=t1.BABI_ID and t2.STATUS=0
			where t.STATUS=0  and (t.DECOMPOSE_STATUS='2' or t.DECOMPOSE_STATUS='1')
	]]>
	<isNotEmpty prepend="and" property="bank">
		<![CDATA[ t2.BANK_NAME=#bank# ]]>
	</isNotEmpty>
	</select>
	<!-- Add By Michael 2012 1/6 增加冲红确认人ID，时间 -->
	<update id="updateDecomposeBillRedCheck" parameterClass="map">
		<![CDATA[ 
		 update t_fina_collectionbill  set RED_CHECK_ID=#red_check_id#,RED_CHECK_DATE=getdate() where FIIN_ID=#select_income_id#
		]]>
	</update>

	<!--  Add by Michael 2012-03-02 支付表费用明细  -->
	<select id="getAllPayFeeList" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[ 
	 		select create_filed_name,create_show_name from t_rent_paylist_feeset
	 	]]>
 	</select>
 	
 	<!--  Add by Michael 2012-03-02 支付表费用明细 总数  -->
	<select id="getAllPayFeeList_count" parameterClass="map"
		resultClass="java.lang.Integer">
		<![CDATA[
		select count(*) from t_rent_paylist_feeset
		]]>
 	</select>

	<!--  Add by Michael 2012-03-02 现金销账所有来款的ID  -->
	<select id="getAllTodayFinaIncomeID" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[ 
	  select t2.FIIN_ID
	  from T_FINA_INCOME t1
	 left join
	 T_FINA_COLLECTIONBILL t2
	 on t1.FIIN_ID=t2.FIIN_ID and t2.STATUS=0
	 left join T_RENT_COLLECTIONPLAN trcp on trcp.RECP_ID=t2.RECP_ID and trcp.STATUS=0
	left join T_RENT_CONTRACT t3 on trcp.RECT_ID=t3.RECT_ID and t3.STATUS=0
	left join t_prjt_credit t7 on t3.PRCD_ID=t7.ID and t7.STATUS=0
	 where CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)= CONVERT(VARCHAR(10),t2.DECOMPOSE_DATE,23) 
	 and CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)=CONVERT(VARCHAR(10),GETDATE(),23) and t1.DECOMPOSE_STATUS=5
	 and t1.RED_TYPE is null and RED_ID is null
	 and t1.STATUS=0 and t2.FICB_ITEM<>#ficb_type#
	 and t7.CONTRACT_TYPE<>'3'
	 group by t2.FIIN_ID	
	 ORDER BY t2.FIIN_ID DESC
	]]>		 
	</select>
	
	<!--  Add by Michael 2012-03-02 现金销账所有分解明细  -->
	<select id="getAllTodayDecomposeDetail" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[ 
	  select t1.OPPOSING_DATE,t4.cust_name,t4.cust_code,t3.LEASE_CODE,FICB_ITEM,REAL_PRICE,t2.DECOMPOSE_DATE,t1.INCOME_MONEY
	  from T_FINA_INCOME t1
	 left join
	 T_FINA_COLLECTIONBILL t2
	 on t1.FIIN_ID=t2.FIIN_ID and t2.STATUS=0
	left join T_RENT_COLLECTIONPLAN trcp on trcp.RECP_ID=t2.RECP_ID and trcp.STATUS=0
	left join T_RENT_CONTRACT t3 on trcp.RECT_ID=t3.RECT_ID and t3.STATUS=0
	left join T_CUST_CUSTOMER t4 on t3.CUST_ID=t4.CUST_ID and t4.STATUS=0
	left join t_bank_bankaccount t5 on t1.RECEIPT_BANKNO=t5.ACCOUNT_NO and t5.STATUS=0
	left join t_bank_bankinfo t6 on t6.BABI_ID=t5.BABI_ID and t6.STATUS=0
	left join t_prjt_credit t7 on t3.PRCD_ID=t7.ID and t7.STATUS=0
	 where CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)= CONVERT(VARCHAR(10),t2.DECOMPOSE_DATE,23) 
	 and CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)=CONVERT(VARCHAR(10),GETDATE(),23) and t1.DECOMPOSE_STATUS=5
	 and t1.RED_TYPE is null and RED_ID is null
	 and t1.STATUS=0 and t2.FICB_ITEM<>#ficb_type#
	 and t7.CONTRACT_TYPE<>'3'	
	]]>
	</select>	
	
	<!--  Add by Michael 2012-03-02 暂收款销账所有来款的ID  -->
	<select id="getAllTemporaryFinaIncomeID" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[ 
	   select t2.FIIN_ID
	  from T_FINA_INCOME t1
	 left join
	 T_FINA_COLLECTIONBILL t2
	 on t1.FIIN_ID=t2.FIIN_ID and t2.STATUS=0
	 left join T_RENT_COLLECTIONPLAN trcp on trcp.RECP_ID=t2.RECP_ID and trcp.STATUS=0
	left join T_RENT_CONTRACT t3 on trcp.RECT_ID=t3.RECT_ID and t3.STATUS=0
	 left join t_prjt_credit t7 on t3.PRCD_ID=t7.ID and t7.STATUS=0
	where CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)<> CONVERT(VARCHAR(10),GETDATE(),23)
	 and CONVERT(VARCHAR(10),t2.DECOMPOSE_DATE,23)=CONVERT(VARCHAR(10),GETDATE(),23) and t1.DECOMPOSE_STATUS=5
	 and t1.RED_TYPE is null and RED_ID is null
	 and t1.STATUS=0 and t2.FICB_ITEM<>#ficb_type#
	 and t7.CONTRACT_TYPE<>'3'
	 group by t2.FIIN_ID
	 ORDER BY t2.FIIN_ID DESC
	]]>		 
	</select>	

	<!--  Add by Michael 2012-03-02 现金销账所有分解明细  -->
	<select id="getAllTemporaryDecomposeDetail" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[ 
	  select t1.OPPOSING_DATE,t4.cust_name,t4.cust_code,t3.LEASE_CODE,FICB_ITEM,REAL_PRICE,t2.DECOMPOSE_DATE,t1.INCOME_MONEY
	  from T_FINA_INCOME t1
	 left join
	 T_FINA_COLLECTIONBILL t2
	 on t1.FIIN_ID=t2.FIIN_ID and t2.STATUS=0
	left join T_RENT_COLLECTIONPLAN trcp on trcp.RECP_ID=t2.RECP_ID and trcp.STATUS=0
	left join T_RENT_CONTRACT t3 on trcp.RECT_ID=t3.RECT_ID and t3.STATUS=0
	left join T_CUST_CUSTOMER t4 on t3.CUST_ID=t4.CUST_ID and t4.STATUS=0
	left join t_bank_bankaccount t5 on t1.RECEIPT_BANKNO=t5.ACCOUNT_NO and t5.STATUS=0
	left join t_bank_bankinfo t6 on t6.BABI_ID=t5.BABI_ID and t6.STATUS=0
	left join t_prjt_credit t7 on t3.PRCD_ID=t7.ID and t7.STATUS=0
	where CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)<> CONVERT(VARCHAR(10),GETDATE(),23)
	 and CONVERT(VARCHAR(10),t2.DECOMPOSE_DATE,23)=CONVERT(VARCHAR(10),GETDATE(),23) and t1.DECOMPOSE_STATUS=5
	 and t1.RED_TYPE is null and RED_ID is null
	 and t1.STATUS=0 and t2.FICB_ITEM<>#ficb_type#	
	 and t7.CONTRACT_TYPE<>'3'
	]]>
	</select>		
	
<!--  Add by Michael 2012-03-02 重车现金销账所有来款的ID  -->
	<select id="getAllCarTodayFinaIncomeID" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[ 
	  select t2.FIIN_ID
	  from T_FINA_INCOME t1
	 left join
	 T_FINA_COLLECTIONBILL t2
	 on t1.FIIN_ID=t2.FIIN_ID and t2.STATUS=0
	 left join T_RENT_COLLECTIONPLAN trcp on trcp.RECP_ID=t2.RECP_ID and trcp.STATUS=0
	left join T_RENT_CONTRACT t3 on trcp.RECT_ID=t3.RECT_ID and t3.STATUS=0
	left join t_prjt_credit t7 on t3.PRCD_ID=t7.ID and t7.STATUS=0
	 where CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)= CONVERT(VARCHAR(10),t2.DECOMPOSE_DATE,23) 
	 and CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)=CONVERT(VARCHAR(10),GETDATE(),23) and t1.DECOMPOSE_STATUS=5
	 and t1.RED_TYPE is null and RED_ID is null
	 and t1.STATUS=0 and t2.FICB_ITEM<>#ficb_type#
	 and t7.CONTRACT_TYPE='3'
	 group by t2.FIIN_ID	
	 ORDER BY t2.FIIN_ID DESC
	]]>		 
	</select>
	
	<!--  Add by Michael 2012-03-02 重车现金销账所有分解明细  -->
	<select id="getAllCarTodayDecomposeDetail" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[ 
	  select t1.OPPOSING_DATE,t4.cust_name,t4.cust_code,t3.LEASE_CODE,FICB_ITEM,REAL_PRICE,t2.DECOMPOSE_DATE,t1.INCOME_MONEY
	  from T_FINA_INCOME t1
	 left join
	 T_FINA_COLLECTIONBILL t2
	 on t1.FIIN_ID=t2.FIIN_ID and t2.STATUS=0
	left join T_RENT_COLLECTIONPLAN trcp on trcp.RECP_ID=t2.RECP_ID and trcp.STATUS=0
	left join T_RENT_CONTRACT t3 on trcp.RECT_ID=t3.RECT_ID and t3.STATUS=0
	left join T_CUST_CUSTOMER t4 on t3.CUST_ID=t4.CUST_ID and t4.STATUS=0
	left join t_bank_bankaccount t5 on t1.RECEIPT_BANKNO=t5.ACCOUNT_NO and t5.STATUS=0
	left join t_bank_bankinfo t6 on t6.BABI_ID=t5.BABI_ID and t6.STATUS=0
	left join t_prjt_credit t7 on t3.PRCD_ID=t7.ID and t7.STATUS=0
	 where CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)= CONVERT(VARCHAR(10),t2.DECOMPOSE_DATE,23) 
	 and CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)=CONVERT(VARCHAR(10),GETDATE(),23) and t1.DECOMPOSE_STATUS=5
	 and t1.RED_TYPE is null and RED_ID is null
	 and t1.STATUS=0 and t2.FICB_ITEM<>#ficb_type#
	 and t7.CONTRACT_TYPE='3'	
	]]>
	</select>	
	
	<!--  Add by Michael 2012-03-02 重车暂收款销账所有来款的ID  -->
	<select id="getAllCarTemporaryFinaIncomeID" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[ 
	   select t2.FIIN_ID
	  from T_FINA_INCOME t1
	 left join
	 T_FINA_COLLECTIONBILL t2
	 on t1.FIIN_ID=t2.FIIN_ID and t2.STATUS=0
	 left join T_RENT_COLLECTIONPLAN trcp on trcp.RECP_ID=t2.RECP_ID and trcp.STATUS=0
	left join T_RENT_CONTRACT t3 on trcp.RECT_ID=t3.RECT_ID and t3.STATUS=0
	 left join t_prjt_credit t7 on t3.PRCD_ID=t7.ID and t7.STATUS=0
	where CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)<> CONVERT(VARCHAR(10),GETDATE(),23)
	 and CONVERT(VARCHAR(10),t2.DECOMPOSE_DATE,23)=CONVERT(VARCHAR(10),GETDATE(),23) and t1.DECOMPOSE_STATUS=5
	 and t1.RED_TYPE is null and RED_ID is null
	 and t1.STATUS=0 and t2.FICB_ITEM<>#ficb_type#
	 and t7.CONTRACT_TYPE='3'
	 group by t2.FIIN_ID
	 ORDER BY t2.FIIN_ID DESC
	]]>		 
	</select>	

	<!--  Add by Michael 2012-03-02 重车现金销账所有分解明细  -->
	<select id="getAllCarTemporaryDecomposeDetail" parameterClass="map" resultClass="java.util.HashMap">
	<![CDATA[ 
	  select t1.OPPOSING_DATE,t4.cust_name,t4.cust_code,t3.LEASE_CODE,FICB_ITEM,REAL_PRICE,t2.DECOMPOSE_DATE,t1.INCOME_MONEY
	  from T_FINA_INCOME t1
	 left join
	 T_FINA_COLLECTIONBILL t2
	 on t1.FIIN_ID=t2.FIIN_ID and t2.STATUS=0
	left join T_RENT_COLLECTIONPLAN trcp on trcp.RECP_ID=t2.RECP_ID and trcp.STATUS=0
	left join T_RENT_CONTRACT t3 on trcp.RECT_ID=t3.RECT_ID and t3.STATUS=0
	left join T_CUST_CUSTOMER t4 on t3.CUST_ID=t4.CUST_ID and t4.STATUS=0
	left join t_bank_bankaccount t5 on t1.RECEIPT_BANKNO=t5.ACCOUNT_NO and t5.STATUS=0
	left join t_bank_bankinfo t6 on t6.BABI_ID=t5.BABI_ID and t6.STATUS=0
	left join t_prjt_credit t7 on t3.PRCD_ID=t7.ID and t7.STATUS=0
	where CONVERT(VARCHAR(10),t1.UPLOAD_TIME,23)<> CONVERT(VARCHAR(10),GETDATE(),23)
	 and CONVERT(VARCHAR(10),t2.DECOMPOSE_DATE,23)=CONVERT(VARCHAR(10),GETDATE(),23) and t1.DECOMPOSE_STATUS=5
	 and t1.RED_TYPE is null and RED_ID is null
	 and t1.STATUS=0 and t2.FICB_ITEM<>#ficb_type#	
	 and t7.CONTRACT_TYPE='3'
	]]>
	</select>			

	<!-- 2012/03/01 Yang Yun 暂收款认领、退回，查询可认领或退回的 -->
	<select id="getAllForClaimOrReturn" parameterClass="map" resultClass="java.util.HashMap">
		select fi.FIIN_ID, fi.OPPOSING_UNIT, fi.OPPOSING_BANKNO, fi.DECOMPOSE_STATUS,ISNULL(FI.MAIL_MEMO,'') MAIL_MEMO,
		fi.INCOME_MONEY,fi.OPPOSING_DATE, fi.OPPOSING_TYPE, fi.virtual_code, fi.INCOME_FINANCE_CODE,fi.OPPOSING_UNIT_TRUE,fi.OPPOSING_MEMO,
		convert(decimal(20,2),INCOME_MONEY) - 
			isnull((select sum(isnull(ic.amount,0)) from T_INCOME_CLAIM ic 
			where ic.income_id = fi.FIIN_ID and ic.status in (0,1)),0) - 
			isnull((select sum(isnull(ir.amount,0)) from T_INCOME_RETURN ir
			where ir.income_id = fi.FIIN_ID and ir.status in (0,1)),0) as surplus_money,
		(select count(0) from T_INCOME_CLAIM ic 
			where ic.income_id = fi.FIIN_ID and ic.status in (0,1,2)) + 
			(select count(0) from T_INCOME_RETURN ir 
			where ir.income_id = fi.FIIN_ID and ir.status in (0,1,2)) as detail_count,
			  (SELECT COUNT(1) 
		        FROM T_TRANSFERCERTIFICATE_FILE FF
		       WHERE FF.STATUS=0
		         AND FF.FIIN_ID=FI.FIIN_ID) HAS_FILE
		from T_FINA_INCOME fi
		left join T_BANK_BANKACCOUNT ba on fi.receipt_bankno = ba.account_no and ba.STATUS = 0
		left join T_BANK_BANKINFO bi on bi.BABI_ID = ba.BABI_ID and bi.STATUS = 0
		where fi.STATUS=0
		and fi.DECOMPOSE_STATUS in $status$
		<isNotEmpty property="search_memo">
			<isEqual property="search_memo" compareValue="Y">
				AND FI.MAIL_MEMO IS NOT NULL 
				AND FI.MAIL_MEMO!=''
			</isEqual>
			<isEqual property="search_memo" compareValue="N">
				AND (FI.MAIL_MEMO IS NULL OR FI.MAIL_MEMO='')
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="search_file">
			<isEqual property="search_file" compareValue="Y">
				AND (SELECT COUNT(1) 
		        FROM T_TRANSFERCERTIFICATE_FILE FF
		       WHERE FF.STATUS=0
		         AND FF.FIIN_ID=FI.FIIN_ID)&gt;0
			</isEqual>
			<isEqual property="search_file" compareValue="N">
				AND (SELECT COUNT(1) 
		        FROM T_TRANSFERCERTIFICATE_FILE FF
		       WHERE FF.STATUS=0
		         AND FF.FIIN_ID=FI.FIIN_ID)=0
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="search_startdate">
			<![CDATA[
				and fi.OPPOSING_DATE >= convert(date,#search_startdate#)
			]]>
		</isNotEmpty>
		<isNotEmpty property="search_enddate">
			<![CDATA[
				and fi.OPPOSING_DATE <= convert(date,#search_enddate#)
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="search_startmoney">
			<![CDATA[
				fi.income_money >= #search_startmoney# 
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="search_endmoney">
			<![CDATA[
				fi.income_money <= #search_endmoney#   
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="search_content">
			<![CDATA[
				(
				  OPPOSING_BANKNO like '%$search_content$%'
				  or OPPOSING_UNIT like '%$search_content$%'
				  or OPPOSING_TYPE like '%$search_content$%'
				  or VIRTUAL_CODE like '%$search_content$%'
				) 
			]]>
		</isNotEmpty>
		<isNotEmpty property="search_bankname">
			<isNotEqual compareValue="all" prepend="and" property="search_bankname">
				<![CDATA[
					bi.bank_name=#search_bankname#
				]]>
				<isNotEqual compareValue="全部" prepend="and" property="search_bankno">
					<![CDATA[
						ba.account_no=#search_bankno#
					]]>
				</isNotEqual>
			</isNotEqual>
		</isNotEmpty>
	</select>
	<select id="getAllForClaimOrReturn_count" parameterClass="map" resultClass="java.lang.Integer">
		select COUNT(1)
		from T_FINA_INCOME fi
		left join T_BANK_BANKACCOUNT ba on fi.receipt_bankno = ba.account_no and ba.STATUS = 0
		left join T_BANK_BANKINFO bi on bi.BABI_ID = ba.BABI_ID and bi.STATUS = 0
		where fi.STATUS=0
		and fi.DECOMPOSE_STATUS in $status$
		<isNotEmpty property="search_memo">
			<isEqual property="search_memo" compareValue="Y">
				AND FI.MAIL_MEMO IS NOT NULL 
				AND FI.MAIL_MEMO!=''
			</isEqual>
			<isEqual property="search_memo" compareValue="N">
				AND (FI.MAIL_MEMO IS NULL OR FI.MAIL_MEMO='')
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="search_file">
			<isEqual property="search_file" compareValue="Y">
				AND (SELECT COUNT(1) 
		        FROM T_TRANSFERCERTIFICATE_FILE FF
		       WHERE FF.STATUS=0
		         AND FF.FIIN_ID=FI.FIIN_ID)&gt;0
			</isEqual>
			<isEqual property="search_file" compareValue="N">
				AND (SELECT COUNT(1) 
		        FROM T_TRANSFERCERTIFICATE_FILE FF
		       WHERE FF.STATUS=0
		         AND FF.FIIN_ID=FI.FIIN_ID)=0
			</isEqual>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="search_startdate">
			<![CDATA[
				and fi.OPPOSING_DATE >= convert(date,#search_startdate#)
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="search_enddate">
			<![CDATA[
				and fi.OPPOSING_DATE <= convert(date,#search_enddate#)
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="search_startmoney">
			<![CDATA[
				fi.income_money >= #search_startmoney# 
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="search_endmoney">
			<![CDATA[
				fi.income_money <= #search_endmoney#   
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="search_content">
			<![CDATA[
				(
				  OPPOSING_BANKNO like '%$search_content$%'
				  or OPPOSING_UNIT like '%$search_content$%'
				  or OPPOSING_TYPE like '%$search_content$%'
				  or VIRTUAL_CODE like '%$search_content$%'
				) 
			]]>
		</isNotEmpty>
		<isNotEmpty property="search_bankname">
			<isNotEqual compareValue="all" prepend="and" property="search_bankname">
				<![CDATA[
					bi.bank_name=#search_bankname#
				]]>
				<isNotEqual compareValue="全部" prepend="and" property="search_bankno">
					<![CDATA[
						ba.account_no=#search_bankno#
					]]>
				</isNotEqual>
			</isNotEqual>
		</isNotEmpty>
	</select>
	
	<!-- 2012/03/05 Yang Yun .验证数据 -->
	<select id="queryForCheckForClaim" parameterClass="map" resultClass="java.util.HashMap">
		select fi.DECOMPOSE_STATUS, convert(decimal(20,2),INCOME_MONEY) - 
		isnull((select sum(isnull(ic.amount,0)) from T_INCOME_CLAIM ic 
		where ic.income_id = fi.FIIN_ID and ic.status in (0,1)),0) - 
		isnull((select sum(isnull(ir.amount,0)) from T_INCOME_RETURN ir
		where ir.income_id = fi.FIIN_ID and ir.status in (0,1)),0) as surplus_money
		from T_FINA_INCOME fi
		where fi.FIIN_ID = #fiin_id#
		and fi.DECOMPOSE_STATUS in $status$
	</select>
	
	<!-- 2012/03/05 Yang Yun -->
	<update id="updateIncomeForStatus" parameterClass="map">
		update T_FINA_INCOME
		set DECOMPOSE_STATUS = #decompose_status#
		where FIIN_ID = #fiin_id#
	</update>
	
	<!-- 2012/03/05 Yang Yun -->
	<!-- Add by Michael 2012 07-23 增加认领款是否需要开立发票栏位 -->
	<insert id="createClaimTag" parameterClass="map">
		insert into t_income_claim (income_id ,create_date
		  ,create_by ,modify_date ,modify_by ,auth_date
		  ,auth_by ,reason ,amount ,status,IS_OPENINVOICE
		)VALUES (#fiin_id#, getdate() ,#s_employeeId# ,getdate() ,#s_employeeId# 
		,null ,0 ,#claimReason# ,#amount# ,0,#is_openInvoice#)
	</insert>
	
	<!-- Modify by Michael 2012 08-30 增加退款单流水号 -->
	<insert id="createReturnTag" parameterClass="map">
		insert into T_INCOME_RETURN (
		   INCOME_ID
		  ,CREATE_DATE
		  ,CREATE_BY
		  ,MODIFY_DATE
		  ,MODIFY_BY
		  ,AUTH_DATE
		  ,AUTH_BY
		  ,REASON
		  ,REMARK
		  ,PAYEE
		  ,RETURN_DATE
		  ,PAY_TYPE
		  ,BANK_NAME
		  ,BANK_ACCOUNT
		  ,AMOUNT
		  ,STATUS,RUNCODE
		  ,AMOUNT_INPUT
		  ,HANDLING_CHARGE
		) VALUES (
		   #fiin_id#
		  ,getdate()
		  ,#s_employeeId#
		  ,getdate()
		  ,#s_employeeId#
		  ,null
		  ,null
		  ,#reason#
		  ,#remark#
		  ,#payee#
		  ,#return_date#
		  ,#pay_type#
		  ,#bank_name#
		  ,#bank_account#
		  ,#amount#
		  ,0,#RUNCODE#
		  ,#amount_input#
		  ,#handling_charge#
		)
		<selectKey resultClass="java.lang.Long" keyProperty="ID">
			SELECT @@IDENTITY AS result_id
		</selectKey>  
	</insert>
	
	<!-- 2012/03/06 Yang Yun -->
	<select id="showFundsDetail" parameterClass="map" resultClass="java.util.HashMap">
		select t.STATUS, t.fund_type, t.REASON, t.AMOUNT,
		mu.[NAME] as modify_by, t.MODIFY_DATE,
		au.[NAME] as auth_by, t.AUTH_DATE, t.ID
		from (
			select ic.status, 1 as fund_type, ic.reason, ic.amount, ic.modify_by,
			ic.modify_date, ic.auth_by, ic.auth_date, ic.ID
			from t_income_claim ic
			where ic.INCOME_ID = #fiin_id# and ic.status in (0,1,2)
			union all
			select ir.status, 2 as fund_type, ir.reason, ir.amount, ir.modify_by,
			ir.modify_date, ir.auth_by, ir.auth_date, ir.ID
			from T_INCOME_RETURN ir
			where ir.INCOME_ID = #fiin_id# and ir.status in (0,1,2)
		) t
		left join T_USER_USER mu on t.MODIFY_BY = mu.ID
		left join T_USER_USER au on t.AUTH_BY = au.ID
		order by t.MODIFY_DATE desc
	</select>
	
	<!-- 2012/03/06 Yang Yun. 认领驳回. -->
	<select id="checkForRejectClaim" parameterClass="map" resultClass="java.lang.Integer">
		select count(0) from T_INCOME_CLAIM
		where ID = #detail_id#
		and STATUS = #check_status#
	</select>
	<update id="authFundDetailForClaim" parameterClass="map">
		update T_INCOME_CLAIM set 
		STATUS = #detail_status#,
		auth_by = #s_employeeId#,
		auth_date = getdate()
		where ID = #detail_id#
	</update>
	<select id="checkBackStatusForClaim" parameterClass="map" resultClass="java.lang.Integer">
		select count(0) from (
			select ID from T_INCOME_CLAIM ic
			where ic.INCOME_ID in (
				select INCOME_ID from T_INCOME_CLAIM t1
				where ID = #detail_id#) 
			and ic.STATUS = 0
			union all
			select ID from T_INCOME_RETURN ir
			where INCOME_ID in (
				select INCOME_ID from T_INCOME_CLAIM t2
				where ID = #detail_id#) 
			and ir.STATUS = 0
		) t
	</select>
	<update id="backStatusForClaim" parameterClass="map">
		update T_FINA_INCOME set DECOMPOSE_STATUS = 2
		where FIIN_ID in (
		  select INCOME_ID from T_INCOME_CLAIM
		  where ID = #detail_id#
		)
	</update>
	
	<!-- 2012/03/06 Yang Yun. 退款驳回. -->
	<select id="checkForRejectReturn" parameterClass="map" resultClass="java.lang.Integer">
		select count(0) from T_INCOME_RETURN
		where ID = #detail_id#
		and STATUS = #check_status#
	</select>
	<update id="authFundDetailForReturn" parameterClass="map">
		update T_INCOME_RETURN set 
		STATUS = #detail_status#,
		auth_by = #s_employeeId#,
		auth_date = getdate()
		where ID = #detail_id#
	</update>
	<select id="checkBackStatusForReturn" parameterClass="map" resultClass="java.lang.Integer">
		select count(0) from (
			select ID from T_INCOME_CLAIM ic
			where ic.INCOME_ID in (
				select INCOME_ID from T_INCOME_RETURN t1
				where ID = #detail_id#) 
			and ic.STATUS = 0
			union all
			select ID from T_INCOME_RETURN ir
			where INCOME_ID in (
				select INCOME_ID from T_INCOME_RETURN t2
				where ID = #detail_id#) 
			and ir.STATUS = 0
		) t
	</select>
	<update id="backStatusForReturn" parameterClass="map">
		update T_FINA_INCOME set DECOMPOSE_STATUS = 2
		where FIIN_ID in (
		  select INCOME_ID from T_INCOME_RETURN
		  where ID = #detail_id#
		)
	</update>
	
	<!-- 2012/03/08 Yang Yun 审批通过 -->
	<!-- 2.查询要审批的记录 -->
	<select id="getAllNeedAuth" parameterClass="map" resultClass="java.util.HashMap">
		select ic.ID, ic.AMOUNT, '认领款' as FUND_TYPE,
		ic.MODIFY_BY, ic.MODIFY_DATE
		from T_INCOME_CLAIM ic
		where ic.INCOME_ID = #fiin_id#
		and ic.STATUS = 0
		union all
		select ir.ID, ir.AMOUNT, '退款' as FUND_TYPE,
		ir.MODIFY_BY, ir.MODIFY_DATE
		from T_INCOME_RETURN ir
		where ir.INCOME_ID = #fiin_id#
		and ir.STATUS = 0
	</select>
	<!-- 3.插入分解单表 -->
	<insert id="insertIntoBill" parameterClass="map">
		insert into T_FINA_COLLECTIONBILL
		(
		   FICB_ITEM
		  ,SHOULD_PRICE
		  ,REAL_PRICE
		  ,FIIN_ID
		  ,FICB_STATE
		  ,DECOMPOSE_ID
		  ,DECOMPOSE_DATE
		  ,CHECK_ID
		  ,CHECK_DATE
		  ,STATUS
		  ,CREATE_DATE
		  ,CREATE_NAME
		  ,FICB_TYPE
		  ,RECD_TYPE
		) VALUES (
		  #FUND_TYPE#
		  ,#AMOUNT#
		  ,#AMOUNT#
		  ,#fiin_id#
		  ,5
		  ,#MODIFY_BY#
		  ,#MODIFY_DATE#
		  ,#s_employeeId#
		  ,getdate()
		  ,0
		  ,getdate()
		  ,#s_employeeId#
		  ,0
		  ,2
		)
	</insert>
	<!-- 5.回写剩下的暂收款 -->
	<!-- a.先查出来 -->
	<select id="getOldIncome" parameterClass="map" resultClass="java.util.HashMap">
		select FIIN_ID, RECEIPT_BANKNO, RECEIPT_UNIT, 
		  OPPOSING_BANKNO, OPPOSING_UNIT, OPPOSING_BANKNAME, 
		  OPPOSING_DATE, OPPOSING_TYPE, OPPOSING_FLAG, 
		  OPPOSING_ADDRESS, OPPOSING_SUMMARY, OPPOSING_EXPLAIN, 
		  OPPOSING_POSTSCRIPT, INCOME_MONEY, 
		  isnull(PAYMENT_MONEY, 0) as PAYMENT_MONEY, 
		  isnull(LEFT_MONEY, 0) as LEFT_MONEY, 
		  isnull(COMMISSION_MONEY, 0) as COMMISSION_MONEY, 
		  LOCKED, 
		  DECOMPOSE_STATUS, OPERATE_REMARK, OPERATE_ID, 
		  OPERATE_TIME, FINANCE_REMARK, FINANCE_ID, 
		  FINANCE_TIME, LEFT_ID, TRANSFER_ID, RED_ID, 
		  RED_TYPE, EXPORT_FLAG, EXPORT_COUNT, 
		  EXPORT_NAME, EXPORT_TIME, [TYPE], STATUS, 
		  UPLOAD_USER_ID, UPLOAD_TIME, UPLOAD_PATH, 
		  MODIFY__USER_ID, MODIFY_TIME, OPPOSING_DATETAG, 
		  FICB_FLAG, VIRTUAL_CODE, ABNORMAL_STATUS ,INCOME_FINANCE_CODE
		from T_FINA_INCOME
		where FIIN_ID = #fiin_id#
	</select>
	<!-- b.再新增 -->
	<insert id="insertNewIncome" parameterClass="map">
		<![CDATA[
		insert into T_FINA_INCOME
		(
		   RECEIPT_BANKNO
		  ,RECEIPT_UNIT
		  ,OPPOSING_BANKNO
		  ,OPPOSING_UNIT
		  ,OPPOSING_BANKNAME
		  ,OPPOSING_DATE
		  ,OPPOSING_TYPE
		  ,OPPOSING_FLAG
		  ,OPPOSING_ADDRESS
		  ,OPPOSING_SUMMARY
		  ,OPPOSING_EXPLAIN
		  ,OPPOSING_POSTSCRIPT
		  ,INCOME_MONEY
		  ,PAYMENT_MONEY
		  ,LEFT_MONEY
		  ,COMMISSION_MONEY
		  ,LOCKED
		  ,DECOMPOSE_STATUS
		  ,OPERATE_REMARK
		  ,OPERATE_ID
		  ,OPERATE_TIME
		  ,FINANCE_REMARK
		  ,FINANCE_ID
		  ,FINANCE_TIME
		  ,LEFT_ID
		  ,TRANSFER_ID
		  ,RED_ID
		  ,RED_TYPE
		  ,EXPORT_FLAG
		  ,EXPORT_COUNT
		  ,EXPORT_NAME
		  ,EXPORT_TIME
		  ,[TYPE]
		  ,STATUS
		  ,UPLOAD_USER_ID
		  ,UPLOAD_TIME
		  ,UPLOAD_PATH
		  ,MODIFY__USER_ID
		  ,MODIFY_TIME
		  ,OPPOSING_DATETAG
		  ,FICB_FLAG
		  ,virtual_code
		  ,Abnormal_Status
		  ,INCOME_FINANCE_CODE
		) VALUES (
		   #RECEIPT_BANKNO#
		  ,#RECEIPT_UNIT#
		  ,#OPPOSING_BANKNO#
		  ,#OPPOSING_UNIT#
		  ,#OPPOSING_BANKNAME#
		  ,#OPPOSING_DATE#
		  ,#OPPOSING_TYPE#
		  ,#OPPOSING_FLAG#
		  ,#OPPOSING_ADDRESS#
		  ,#OPPOSING_SUMMARY#
		  ,#OPPOSING_EXPLAIN#
		  ,#OPPOSING_POSTSCRIPT#
		  ,#INCOME_MONEY#
		  ,#PAYMENT_MONEY#
		  ,#LEFT_MONEY#
		  ,#COMMISSION_MONEY#
		  ,#LOCKED#
		  ,#DECOMPOSE_STATUS#
		  ,#OPERATE_REMARK#
		  ,#OPERATE_ID#
		  ,#OPERATE_TIME#
		  ,#FINANCE_REMARK#
		  ,#FINANCE_ID#
		  ,#FINANCE_TIME#
		  ,#LEFT_ID#
		  ,#TRANSFER_ID#
		  ,#RED_ID#
		  ,#RED_TYPE#
		  ,#EXPORT_FLAG#
		  ,#EXPORT_COUNT#
		  ,#EXPORT_NAME#
		  ,#EXPORT_TIME#
		  ,#TYPE#
		  ,#STATUS#
		  ,#UPLOAD_USER_ID#
		  ,#UPLOAD_TIME#
		  ,#UPLOAD_PATH#
		  ,#MODIFY__USER_ID#
		  ,#MODIFY_TIME#
		  ,#OPPOSING_DATETAG#
		  ,#FICB_FLAG#
		  ,#VIRTUAL_CODE#
		  ,#ABNORMAL_STATUS#
		  ,#INCOME_FINANCE_CODE#
		)
		]]>
	</insert>
	<select id="getFundReturnForPrint" parameterClass="map" resultClass="java.util.HashMap">
		select ir.PAYEE, ir.RETURN_DATE, ir.AMOUNT_INPUT, ir.HANDLING_CHARGE,
		ir.REASON, ir.PAY_TYPE, ir.REMARK,
		ir.BANK_NAME, ir.BANK_ACCOUNT, ir.AMOUNT,
		fi.OPPOSING_DATE, fi.OPPOSING_UNIT, fi.INCOME_MONEY SURPLUS_MONEY,ir.RUNCODE,fi.FIIN_ID,TFINCOME_LASTER.INCOME_MONEY
		from T_INCOME_RETURN ir
		left join T_FINA_INCOME fi 
		on fi.FIIN_ID = ir.INCOME_ID
		left join (select MIN(FIIN_ID)FIIN_ID,Income_Finance_Code from T_FINA_INCOME where status='0' group by Income_Finance_Code) TFINCOME_SUM
		on fi.Income_Finance_Code=TFINCOME_SUM.Income_Finance_Code
		left join T_FINA_INCOME TFINCOME_LASTER on TFINCOME_SUM.FIIN_ID=TFINCOME_LASTER.FIIN_ID and TFINCOME_LASTER.STATUS=0
		where ir.ID = #detail_id#
	</select>
	
	<select id="getAllAuthedFunds" parameterClass="map" resultClass="java.util.HashMap">
		select t.ID, t.AMOUNT, t.REASON, t.FUND_TYPE, 
		t.MODIFY_DATE, t.AUTH_DATE, fi.INCOME_FINANCE_CODE,
		mu.[NAME] as MODIFY_BY, au.[NAME] as AUTH_BY, 
		fi.OPPOSING_DATE, fi.INCOME_MONEY, fi.OPPOSING_UNIT,pfi.FIIN_ID
		from (select ic.ID, ic.INCOME_ID, ic.AMOUNT, ic.REASON, '1' as FUND_TYPE,
		ic.MODIFY_BY, ic.MODIFY_DATE, ic.AUTH_BY, ic.AUTH_DATE
		from T_INCOME_CLAIM ic
		where ic.STATUS = 1
		union all
		select ir.ID, ir.INCOME_ID, ir.AMOUNT, ir.REASON, '2' as FUND_TYPE,
		ir.MODIFY_BY, ir.MODIFY_DATE, ir.AUTH_BY, ir.AUTH_DATE
		from T_INCOME_RETURN ir
		where ir.STATUS = 1) t
		left join T_FINA_INCOME pfi on pfi.FIIN_ID = t.INCOME_ID
		left join (select max(te.OPPOSING_DATE) as OPPOSING_DATE,
	    max(te.INCOME_MONEY) as INCOME_MONEY,
	    max(te.OPPOSING_UNIT) as OPPOSING_UNIT,
	    te.Income_Finance_Code
	    from T_FINA_INCOME te group by te.Income_Finance_Code) fi
			on fi.Income_Finance_Code = pfi.Income_Finance_Code
		left join T_USER_USER mu on t.MODIFY_BY = mu.ID
		left join T_USER_USER au on t.AUTH_BY = au.ID
		where 1 = 1
		<isNotEmpty property="amount_from">
			<![CDATA[and t.AMOUNT >= #amount_from#]]>
		</isNotEmpty>
		<isNotEmpty property="amount_to">
			<![CDATA[and t.AMOUNT <= #amount_to#]]>
		</isNotEmpty>
		<isNotEmpty property="income_money_from">
			<![CDATA[and fi.INCOME_MONEY >= #income_money_from#]]>
		</isNotEmpty>
		<isNotEmpty property="income_money_to">
			<![CDATA[and fi.INCOME_MONEY <= #income_money_to#]]>
		</isNotEmpty>
		<isNotEmpty property="opp_data_from">
			<![CDATA[and fi.OPPOSING_DATE >= convert(date,#opp_data_from#)]]>
		</isNotEmpty>
		<isNotEmpty property="opp_data_to">
			<![CDATA[and fi.OPPOSING_DATE <= convert(data,#opp_data_to#)]]>
		</isNotEmpty>
		<isNotEmpty property="fund_type">
			<![CDATA[and t.FUND_TYPE = #fund_type#]]>
		</isNotEmpty>
		<isNotEmpty property="search_content">
			<![CDATA[and (
			  t.MODIFY_BY like '%$search_content$%'
			  or t.AUTH_BY like '%$search_content$%'
			  or fi.OPPOSING_UNIT like '%$search_content$%'
			  or t.REASON like '%$search_content$%'
			)]]>
		</isNotEmpty>
		order by t.AUTH_DATE desc
	</select>
	<select id="getAllAuthedFunds_count" parameterClass="map" resultClass="java.lang.Integer">
		select count(0)
		from (select ic.ID, ic.INCOME_ID, ic.AMOUNT, ic.REASON, '1' as FUND_TYPE,
		ic.MODIFY_BY, ic.MODIFY_DATE, ic.AUTH_BY, ic.AUTH_DATE
		from T_INCOME_CLAIM ic
		where ic.STATUS = 1
		union all
		select ir.ID, ir.INCOME_ID, ir.AMOUNT, ir.REASON, '2' as FUND_TYPE,
		ir.MODIFY_BY, ir.MODIFY_DATE, ir.AUTH_BY, ir.AUTH_DATE
		from T_INCOME_RETURN ir
		where ir.STATUS = 1) t
		left join T_FINA_INCOME pfi on pfi.FIIN_ID = t.INCOME_ID
		left join (select max(te.OPPOSING_DATE) as OPPOSING_DATE,
	    max(te.INCOME_MONEY) as INCOME_MONEY,
	    max(te.OPPOSING_UNIT) as OPPOSING_UNIT,
	    te.Income_Finance_Code
	    from T_FINA_INCOME te group by te.Income_Finance_Code) fi
			on fi.Income_Finance_Code = pfi.Income_Finance_Code
		where 1 = 1
		<isNotEmpty property="amount_from">
			<![CDATA[and t.AMOUNT >= #amount_from#]]>
		</isNotEmpty>
		<isNotEmpty property="amount_to">
			<![CDATA[and t.AMOUNT <= #amount_to#]]>
		</isNotEmpty>
		<isNotEmpty property="income_money_from">
			<![CDATA[and fi.INCOME_MONEY >= #income_money_from#]]>
		</isNotEmpty>
		<isNotEmpty property="income_money_to">
			<![CDATA[and fi.INCOME_MONEY <= #income_money_to#]]>
		</isNotEmpty>
		<isNotEmpty property="opp_data_from">
			<![CDATA[and fi.OPPOSING_DATE >= convert(date,#opp_data_from#)]]>
		</isNotEmpty>
		<isNotEmpty property="opp_data_to">
			<![CDATA[and fi.OPPOSING_DATE <= convert(data,#opp_data_to#)]]>
		</isNotEmpty>
		<isNotEmpty property="search_content">
			<![CDATA[and (
			  t.MODIFY_BY like '%$search_content$%'
			  or t.AUTH_BY like '%$search_content$%'
			  or fi.OPPOSING_UNIT like '%$search_content$%'
			  or t.REASON like '%$search_content$%'
			)]]>
		</isNotEmpty>
	</select>
	
	<!-- Add by Michael 2012-3-15 每日销账报表 -->
	<!-- 当日上传，当日分解(现金销账) -->
	<select id="getDailyCurrencyDecomposeRpt" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
		select t4.CUST_NAME,t4.CUST_CODE,t4.LEASE_CODE,t1.ficb_item,t1.REAL_PRICE,convert(varchar,t2.OPPOSING_DATE,23)OPPOSING_DATE,
		bank_name,t1.FIIN_ID,t3.RECP_ID,t1.RECD_PERIOD,t1.FICB_ID,t2.RECEIPT_BANKNO from 
		T_FINA_COLLECTIONBILL t1
		left join
		t_fina_income t2
		on t1.FIIN_ID = t2.FIIN_ID and t2.status=0
		left join
		t_rent_collectionplan t3
		on t1.RECP_ID = t3.RECP_ID and t3.status=0
		left join
		t_rent_contract t4
		on t4.rect_id=t3.RECT_ID and t4.status=0
		left join
		T_BANK_BANKACCOUNT tbbc
		on t2.RECEIPT_BANKNO=tbbc.account_no
		left join
		T_BANK_BANKINFO tbbi
		on tbbc.babi_id=tbbi.BABI_ID
		where t1.status=0
		and t1.FICB_STATE=5 and t1.ficb_item<>#ficb_type#
		and convert(varchar,t1.CHECK_DATE,23)=convert(varchar,t2.upload_time,23)
		and convert(varchar,t2.upload_time,23)=convert(varchar,getdate(),23)
		]]>
	</select>	
	
	<!-- Add by Michael 2012-3-15 每日销账报表 -->
	<!-- 非当日上传，当日分解(暂收款销账) -->
	<select id="getLastDecomposeRpt" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select convert(varchar,t2.OPPOSING_DATE,23)OPPOSING_DATE,t4.CUST_NAME,t4.CUST_CODE,t4.LEASE_CODE,t1.ficb_item,t1.REAL_PRICE,
			bank_name,t1.FIIN_ID,t3.RECP_ID,t1.RECD_PERIOD,t1.FICB_ID,t2.RECEIPT_BANKNO from 
			T_FINA_COLLECTIONBILL t1
			left join
			t_fina_income t2
			on t1.FIIN_ID = t2.FIIN_ID and t2.status=0
			left join
			t_rent_collectionplan t3
			on t1.RECP_ID = t3.RECP_ID and t3.status=0
			left join
			t_rent_contract t4
			on t4.rect_id=t3.RECT_ID and t4.status=0
			left join
			T_BANK_BANKACCOUNT tbbc
			on t2.RECEIPT_BANKNO=tbbc.account_no
			left join
			T_BANK_BANKINFO tbbi
			on tbbc.babi_id=tbbi.BABI_ID
			where t1.status=0
			and t1.FICB_STATE=5 and t1.ficb_item<>#ficb_type#
			and convert(varchar,t1.CHECK_DATE,23)=convert(varchar,getdate(),23)
			and convert(varchar,t2.upload_time,23)<>convert(varchar,getdate(),23)
		]]>
	</select>	
	
		<!-- Add by Michael 2012-3-15 每日销账报表 -->
		<!-- 暂收看余额变动表 -->
	<select id="getLastDynamicDecomposeRpt" parameterClass="map" resultClass="java.util.HashMap">
		<!-- 当日上传，非当日分解  （本期新增） -->
		<![CDATA[
			select convert(varchar,opposing_date,23) opposing_date ,opposing_unit,convert(varchar,upload_time,23) upload_time,0 income_money,income_money current_new,0 current_reduce,bank_name,t1.FIIN_ID   
			from T_FINA_INCOME t1
			left join
			T_BANK_BANKACCOUNT tbbc
			on t1.RECEIPT_BANKNO=tbbc.account_no
			left join
			T_BANK_BANKINFO tbbi
			on tbbc.babi_id=tbbi.BABI_ID
			where convert(varchar,upload_time,23)=convert(varchar,getDate(),23)
			and decompose_status in('1','2','3','4','6') and t1.STATUS=0
			union all
		]]>
		<!-- 非当日上传，非当日分解（期初余额） -->
		<![CDATA[
			select convert(varchar,opposing_date,23) opposing_date,opposing_unit,convert(varchar,upload_time,23) upload_time,income_money,0 current_new,0 current_reduce,bank_name,t1.FIIN_ID
			from T_FINA_INCOME t1
			left join
			T_BANK_BANKACCOUNT tbbc
			on t1.RECEIPT_BANKNO=tbbc.account_no
			left join
			T_BANK_BANKINFO tbbi
			on tbbc.babi_id=tbbi.BABI_ID
			where convert(varchar,upload_time,23)<>convert(varchar,getDate(),23)
			and decompose_status in('1','2','3','4','6') and t1.STATUS=0
			and (left_id not in
			(select t2.FIIN_ID
			from T_FINA_INCOME t1
			left join
			T_FINA_COLLECTIONBILL t2
			on t1.FIIN_ID = t2.FIIN_ID 
			where convert(varchar,upload_time,23)<>convert(varchar,getDate(),23)
			and t1.STATUS=0 and convert(varchar,t2.CHECK_DATE,23)=convert(varchar,getDate(),23)
			and t2.ficb_item=#ficb_type# and t2.status=0 and t2.FICB_STATE=5
			) or left_id is null)
			union all
		]]>	
		<!-- 非当日上传的，当日分解(本期减少) -->
		<![CDATA[
			select convert(varchar,opposing_date,23) opposing_date,opposing_unit,convert(varchar,upload_time,23) upload_time,
			case when t2.IS_PLEDGE_B='1' then 
				0
			else
				income_money
			end 
			income_money,
			0 current_new,t2.REAL_PRICE current_reduce,bank_name,t1.FIIN_ID
			from T_FINA_INCOME t1
			left join
			(select sum(REAL_PRICE) REAL_PRICE,FIIN_ID, convert(varchar,CHECK_DATE,23) CHECK_DATE,IS_PLEDGE_B from T_FINA_COLLECTIONBILL
			where ficb_item<>#ficb_type# and status=0 and FICB_STATE=5
			group by FIIN_ID,convert(varchar,CHECK_DATE,23),IS_PLEDGE_B) t2
			on t1.FIIN_ID = t2.FIIN_ID 
			left join
			T_BANK_BANKACCOUNT tbbc
			on t1.RECEIPT_BANKNO=tbbc.account_no
			left join
			T_BANK_BANKINFO tbbi
			on tbbc.babi_id=tbbi.BABI_ID
			where convert(varchar,upload_time,23)<>convert(varchar,getDate(),23) 
			and t1.STATUS=0 and convert(varchar,t2.CHECK_DATE,23)=convert(varchar,getDate(),23)
		order by opposing_date
		]]>					
	</select>
	
	<!-- 增加查询与暂收款金额一致支付表信息 -->
	<select id="getCustRecpFundReturn" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select trct.CUST_NAME,trct.LEASE_CODE,min(trcd.PERIOD_NUM) PERIOD_NUM,convert(date,min(trcd.PAY_DATE),23) PAY_DATE,(trcd.IRR_MONTH_PRICE-ISNULL(trcd.REDUCE_OWN_PRICE,0))IRR_MONTH_PRICE,tuu.NAME from t_rent_collectionplan trcp
			left join
			T_RENT_COLLECTIONDETAIL trcd
			on trcp.RECP_ID=trcd.RECP_ID and trcd.STATUS=0 and (trcd.REDUCE_OWN_PRICE is null or trcd.REDUCE_OWN_PRICE<>trcd.IRR_MONTH_PRICE)
			left join
			t_rent_contract trct
			on trcp.RECT_ID=trct.RECT_ID and trct.STATUS=0
			left join
			T_USER_USER tuu
			on tuu.ID=trct.SENSOR_ID
			where trcp.FUND_STATUS=0 and trcp.STATUS=0
			and trcd.PERIOD_NUM is not null
			and (trcd.IRR_MONTH_PRICE-ISNULL(trcd.REDUCE_OWN_PRICE,0))=#FOUND#
			group by trct.CUST_NAME,trct.LEASE_CODE,(trcd.IRR_MONTH_PRICE-ISNULL(trcd.REDUCE_OWN_PRICE,0)),tuu.NAME		
		]]>					
	</select>	
	<!-- Add by Michael 2012 6-13 对账单For业务 -->
	<select id="getCustBillForSales" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from(			
			select pay_date,sum(fine) SHOULD_PRICE,' ' INCOME_MONEY,'合同:'+LEASE_CODE+'  第'+CONVERT(varchar,period_num)+'期  罚息' MEMO from (
			select tfcbd.recd_period as period_num,convert(varchar,tfcbd.pay_date, 23) pay_date,
			(case when trcp.fine_type = 2 then
			round(should_price *
			     power(1 + trcp.fine_rate / 100, dun_day) -
			     should_price,2)
			else
			 round(should_price * dun_day * fine_rate / 100,2)
			end) fine,trc.LEASE_CODE
			from              
			(select tfcb.RECP_ID,tfcb.recp_code,tfcb.pay_date,tfcb.recd_period,tfcb.ficb_item,max(tfcb.should_price) should_price ,
			sum(tfcb.real_price) real_price,tfcb.cust_code,tfi.opposing_date opposing_date,datediff(d,tfcb.pay_date,opposing_date)  dun_day
			from t_fina_collectionbill tfcb
			left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
			where
			 (tfcb.ficb_state=4 or tfcb.ficb_state=5)
			and tfi.red_type is null and tfcb.FICB_type='0'
			and tfcb.FICB_ITEM='租金' 
			and datediff(d,tfcb.pay_date,opposing_date)>0 
			group by RECP_ID,recp_code,pay_date,recd_period,ficb_item,cust_code,opposing_date,datediff(d,tfcb.pay_date,opposing_date)) tfcbd
			left join
			t_rent_collectionplan  trcp
			on tfcbd.recp_id=trcp.RECP_ID and trcp.STATUS=0 
			left join t_rent_contract trc 
			on trcp.rect_id =trc.rect_id and trc.status=0
			left join
			t_rent_collectiondetail trcd
			on trcd.RECP_ID = trcp.RECP_ID and trcd.PERIOD_NUM=tfcbd.recd_period and trcd.status=0
			where trc.CUST_ID=#CUST_ID#
			union all
			select 
			trcp.period_num,
			convert(varchar,trcp.pay_date, 23) pay_date,
			(case when trcp.fine_type = 2 then
			round((trcp.month_price-reduce_price) *
			     power(1 + trcp.fine_rate / 100, datediff(d,trcp.pay_date,getdate())) -
			     (trcp.month_price-reduce_price),2)
			else
			 round((trcp.month_price-reduce_price) * datediff(d,trcp.pay_date,getdate()) * fine_rate / 100,2)
			end) fine,trcp.LEASE_CODE
			from (          
			 select trcp.recp_code,
			     trcp.recp_id,
			     trcp.rect_id,
			     trcp.warn_status,
			     trcd.pay_date,
			     trcd.period_num, 
			     trcp.fine_type,
			     trcp.fine_rate,
			     isnull(trcd.IRR_MONTH_PRICE, 0) month_price,  
			     isnull(trcd.reduce_own_price, 0) reduce_price,trc.CUST_ID,trc.LEASE_CODE
			from t_rent_collectionplan trcp
			left join t_rent_contract trc on trcp.rect_id =
			trc.rect_id
			left join t_rent_collectiondetail trcd on trcp.recp_id =
			trcd.recp_id
			where trcp.status = 0 and trc.status=0
			  and (trcp.fund_status=0 or trcp.fund_status=1) 
			 and  trcd.pay_date < = cast(getdate() as datetime)-1
			and isnull(trcd.IRR_MONTH_PRICE, 0)-isnull(trcd.reduce_own_price, 0)>0.001) trcp 
			left join  
			(select tfcb.recp_id, max(tfi.opposing_date) opposing_date,max(tfcb.RECD_PERIOD) RECD_PERIOD
			  from t_fina_collectionbill tfcb
			  left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
			 where tfi.opposing_date <= cast(getdate() as datetime)
			 and (tfcb.ficb_state=4 or tfcb.ficb_state=5)
			 and tfi.red_type is null 
			 group by recp_id
			 ) tfcd 
			on trcp.recp_id = tfcd.recp_id and tfcd.RECD_PERIOD=trcp.period_num
			where (case when tfcd.opposing_date is null or
			tfcd.opposing_date <= trcp.pay_date then
			datediff(d,trcp.pay_date,getdate()) else
			datediff(d,tfcd.opposing_date,getdate()) end) > 0 
			and trcp.cust_id=#CUST_ID#
			) ttt
			group by period_num,pay_date,LEASE_CODE
			union all
			select distinct PAY_DATE,
			case when FICB_ITEM='租金' then IRR_MONTH_PRICE
			else SHOULD_PRICE
			end SHOULD_PRICE,' ' INCOME_MONEY,
			case when RECD_PERIOD<>0 then 
			'合同:'+LEASE_CODE+'  第'+convert(varchar,RECD_PERIOD)+'期  '+convert(varchar,FICB_ITEM)
			else 
			FICB_ITEM
			end MEMO
			from (
			select convert(date,tfcb.PAY_DATE,23) PAY_DATE,tfcb.SHOULD_PRICE,trcd.VALUE_ADDED_TAX,trcd.IRR_MONTH_PRICE,tfcb.FICB_ITEM,trc.LEASE_CODE,
			tfcb.RECD_PERIOD
			from T_CUST_CUSTOMER tcc
			left join t_rent_contract trc
			on tcc.CUST_ID=trc.CUST_ID and trc.STATUS=0
			left join T_RENT_COLLECTIONPLAN trct 
			on trct.RECT_ID=trc.RECT_ID and trct.STATUS=0 
			left join T_FINA_COLLECTIONBILL tfcb
			on trct.RECP_ID=tfcb.RECP_ID and tfcb.FICB_STATE=5 and tfcb.FICB_ITEM<>'待分解来款' and tfcb.FICB_ITEM<>'租金罚息' and tfcb.FICB_TYPE=0
			left join T_RENT_COLLECTIONDETAIL  trcd
			on trcd.RECP_ID=tfcb.RECP_ID and trcd.PAY_DATE=tfcb.PAY_DATE
			where tcc.CUST_ID=#CUST_ID# and tfcb.FICB_ID is not null and tfcb.FICB_TYPE=0
			) ttt
			union all
			select convert(date,trcd.PAY_DATE,23) PAY_DATE,
			IRR_MONTH_PRICE+isnull( VALUE_ADDED_TAX,0) SHOULD_PRICE,' ' INCOME_MONEY,
			'合同:'+LEASE_CODE+'  第'+convert(varchar,PERIOD_NUM)+'期  租金' MEMO
			from T_CUST_CUSTOMER tcc
			left join t_rent_contract trc
			on tcc.CUST_ID=trc.CUST_ID and trc.STATUS=0
			left join T_RENT_COLLECTIONPLAN trct 
			on trct.RECT_ID=trc.RECT_ID and trct.STATUS=0 
			left join T_RENT_COLLECTIONDETAIL  trcd
			on trcd.RECP_ID=trct.RECP_ID and trcd.PAY_DATE<=GETDATE() and isnull(trcd.REDUCE_OWN_PRICE ,0)=0
			where tcc.CUST_ID=#CUST_ID# and trcd.RECD_ID is not null
			union all
			select convert(date,tfi.OPPOSING_DATE,23) OPPOSING_DATE,' ' SHOULD_PRICE,tfi.INCOME_MONEY,'银行收款' OPPOSING_TYPE
			from T_FINA_INCOME tfi
			where tfi.FIIN_ID in
			(
				select MIN(tfi.FIIN_ID) FIIN_ID		
				 from T_CUST_CUSTOMER tcc
				left join t_rent_contract trc
				on tcc.CUST_ID=trc.CUST_ID and trc.STATUS=0
				left join T_RENT_COLLECTIONPLAN trct 
				on trct.RECT_ID=trc.RECT_ID and trct.STATUS=0 
				left join T_FINA_COLLECTIONBILL tfcb
				on trct.RECP_ID=tfcb.RECP_ID and tfcb.FICB_STATE=5 and tfcb.FICB_TYPE=0
				left join T_FINA_INCOME tfi
				on tfi.FIIN_ID=tfcb.FIIN_ID
				where tcc.CUST_ID=#CUST_ID#  and tfi.FIIN_ID is not null and tfi.DECOMPOSE_STATUS=5	
				group by tfi.Income_Finance_Code
			)
			union all
			select  convert(date,trs.CREATE_DATE,23) OPPOSING_DATE,' ' SHOULD_PRICE, trs.DIFF_DUN_PRICE as INCOME_MONEY, '免除罚息' OPPOSING_TYPE
			 from T_CUST_CUSTOMER tcc
			left join t_rent_contract trc
			on tcc.CUST_ID=trc.CUST_ID and trc.STATUS=0
			left join T_RENT_COLLECTIONPLAN trct 
			on trct.RECT_ID=trc.RECT_ID and trct.STATUS=0 
			left join T_RENT_SETTLE trs
			on trct.RECP_ID=trs.RECP_ID and  trs.status = 0 and trs.state = 1
			where tcc.CUST_ID=#CUST_ID#  and trs.RECP_ID is not null	
			
			) TALL
			order by pay_date
		]]>	
	</select>	

	<!-- Add by Michael 2012 6-13 对账单For财务 -->
	<select id="getCustBillForFinance" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select * from(			
			select pay_date,sum(fine) SHOULD_PRICE,' ' INCOME_MONEY,'合同:'+LEASE_CODE+'  第'+CONVERT(varchar,period_num)+'期  罚息' MEMO from (
			select tfcbd.recd_period as period_num,convert(varchar,tfcbd.pay_date, 23) pay_date,
			(case when trcp.fine_type = 2 then
			round(should_price *
			     power(1 + trcp.fine_rate / 100, dun_day) -
			     should_price,2)
			else
			 round(should_price * dun_day * fine_rate / 100,2)
			end) fine,trc.LEASE_CODE
			from              
			(select tfcb.RECP_ID,tfcb.recp_code,tfcb.pay_date,tfcb.recd_period,tfcb.ficb_item,max(tfcb.should_price) should_price ,
			sum(tfcb.real_price) real_price,tfcb.cust_code,tfi.opposing_date opposing_date,datediff(d,tfcb.pay_date,opposing_date)  dun_day
			from t_fina_collectionbill tfcb
			left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
			where
			 (tfcb.ficb_state=4 or tfcb.ficb_state=5)
			and tfi.red_type is null and tfcb.FICB_type='0'
			and tfcb.FICB_ITEM='租金' 
			and datediff(d,tfcb.pay_date,opposing_date)>0 
			group by RECP_ID,recp_code,pay_date,recd_period,ficb_item,cust_code,opposing_date,datediff(d,tfcb.pay_date,opposing_date)) tfcbd
			left join
			t_rent_collectionplan  trcp
			on tfcbd.recp_id=trcp.RECP_ID and trcp.STATUS=0 
			left join t_rent_contract trc 
			on trcp.rect_id =trc.rect_id and trc.status=0
			left join
			t_rent_collectiondetail trcd
			on trcd.RECP_ID = trcp.RECP_ID and trcd.PERIOD_NUM=tfcbd.recd_period and trcd.status=0
			where trc.CUST_ID=#CUST_ID#
			union all
			select 
			trcp.period_num,
			convert(varchar,trcp.pay_date, 23) pay_date,
			(case when trcp.fine_type = 2 then
			round((trcp.month_price-reduce_price) *
			     power(1 + trcp.fine_rate / 100, datediff(d,trcp.pay_date,getdate())) -
			     (trcp.month_price-reduce_price),2)
			else
			 round((trcp.month_price-reduce_price) * datediff(d,trcp.pay_date,getdate()) * fine_rate / 100,2)
			end) fine,trcp.LEASE_CODE
			from (          
			 select trcp.recp_code,
			     trcp.recp_id,
			     trcp.rect_id,
			     trcp.warn_status,
			     trcd.pay_date,
			     trcd.period_num, 
			     trcp.fine_type,
			     trcp.fine_rate,
			     isnull(trcd.IRR_MONTH_PRICE, 0) month_price,  
			     isnull(trcd.reduce_own_price, 0) reduce_price,trc.CUST_ID,trc.LEASE_CODE
			from t_rent_collectionplan trcp
			left join t_rent_contract trc on trcp.rect_id =
			trc.rect_id
			left join t_rent_collectiondetail trcd on trcp.recp_id =
			trcd.recp_id
			where trcp.status = 0 and trc.status=0
			  and (trcp.fund_status=0 or trcp.fund_status=1) 
			 and  trcd.pay_date < = cast(getdate() as datetime)-1
			and isnull(trcd.IRR_MONTH_PRICE, 0)-isnull(trcd.reduce_own_price, 0)>0.001) trcp 
			left join  
			(select tfcb.recp_id, max(tfi.opposing_date) opposing_date,max(tfcb.RECD_PERIOD) RECD_PERIOD
			  from t_fina_collectionbill tfcb
			  left join t_fina_income tfi on tfcb.fiin_id = tfi.fiin_id
			 where tfi.opposing_date <= cast(getdate() as datetime)
			 and (tfcb.ficb_state=4 or tfcb.ficb_state=5)
			 and tfi.red_type is null 
			 group by recp_id
			 ) tfcd 
			on trcp.recp_id = tfcd.recp_id and tfcd.RECD_PERIOD=trcp.period_num
			where (case when tfcd.opposing_date is null or
			tfcd.opposing_date <= trcp.pay_date then
			datediff(d,trcp.pay_date,getdate()) else
			datediff(d,tfcd.opposing_date,getdate()) end) > 0 
			and trcp.cust_id=#CUST_ID#
			) ttt
			group by period_num,pay_date,LEASE_CODE
			union all
			select distinct PAY_DATE,
			case when FICB_ITEM='租金' then IRR_MONTH_PRICE
			else SHOULD_PRICE
			end SHOULD_PRICE,' ' INCOME_MONEY,
			case when RECD_PERIOD<>0 then 
			'合同:'+LEASE_CODE+'  第'+convert(varchar,RECD_PERIOD)+'期  '+convert(varchar,FICB_ITEM)
			else 
			FICB_ITEM
			end MEMO
			from (
			select convert(date,tfcb.PAY_DATE,23) PAY_DATE,tfcb.SHOULD_PRICE,trcd.VALUE_ADDED_TAX,trcd.IRR_MONTH_PRICE,tfcb.FICB_ITEM,trc.LEASE_CODE,
			tfcb.RECD_PERIOD
			from T_CUST_CUSTOMER tcc
			left join t_rent_contract trc
			on tcc.CUST_ID=trc.CUST_ID and trc.STATUS=0
			left join T_RENT_COLLECTIONPLAN trct 
			on trct.RECT_ID=trc.RECT_ID and trct.STATUS=0 
			left join T_FINA_COLLECTIONBILL tfcb
			on trct.RECP_ID=tfcb.RECP_ID and tfcb.FICB_STATE=5 and tfcb.FICB_ITEM<>'待分解来款' and tfcb.FICB_ITEM<>'租金罚息' and tfcb.FICB_TYPE=0
			left join T_RENT_COLLECTIONDETAIL  trcd
			on trcd.RECP_ID=tfcb.RECP_ID and trcd.PAY_DATE=tfcb.PAY_DATE
			where tcc.CUST_ID=#CUST_ID# and tfcb.FICB_ID is not null and tfcb.FICB_TYPE=0
			) ttt
			union all
			select convert(date,trcd.PAY_DATE,23) PAY_DATE,
			IRR_MONTH_PRICE+isnull( VALUE_ADDED_TAX,0) SHOULD_PRICE,' ' INCOME_MONEY,
			'合同:'+LEASE_CODE+'  第'+convert(varchar,PERIOD_NUM)+'期  租金' MEMO
			from T_CUST_CUSTOMER tcc
			left join t_rent_contract trc
			on tcc.CUST_ID=trc.CUST_ID and trc.STATUS=0
			left join T_RENT_COLLECTIONPLAN trct 
			on trct.RECT_ID=trc.RECT_ID and trct.STATUS=0 
			left join T_RENT_COLLECTIONDETAIL  trcd
			on trcd.RECP_ID=trct.RECP_ID and isnull(trcd.REDUCE_OWN_PRICE ,0)=0
			where tcc.CUST_ID=#CUST_ID# and trcd.RECD_ID is not null
			union all
			select convert(date,tfi.OPPOSING_DATE,23) OPPOSING_DATE,' ' SHOULD_PRICE,tfi.INCOME_MONEY,'银行收款' OPPOSING_TYPE
			from T_FINA_INCOME tfi
			where tfi.FIIN_ID in
			(
				select MIN(tfi.FIIN_ID) FIIN_ID		
				 from T_CUST_CUSTOMER tcc
				left join t_rent_contract trc
				on tcc.CUST_ID=trc.CUST_ID and trc.STATUS=0
				left join T_RENT_COLLECTIONPLAN trct 
				on trct.RECT_ID=trc.RECT_ID and trct.STATUS=0 
				left join T_FINA_COLLECTIONBILL tfcb
				on trct.RECP_ID=tfcb.RECP_ID and tfcb.FICB_STATE=5 and tfcb.FICB_TYPE=0
				left join T_FINA_INCOME tfi
				on tfi.FIIN_ID=tfcb.FIIN_ID
				where tcc.CUST_ID=#CUST_ID#  and tfi.FIIN_ID is not null and tfi.DECOMPOSE_STATUS=5	
				group by tfi.Income_Finance_Code
			)
			union all
			select  convert(date,trs.CREATE_DATE,23) OPPOSING_DATE,' ' SHOULD_PRICE, trs.DIFF_DUN_PRICE as INCOME_MONEY, '免除罚息' OPPOSING_TYPE
			 from T_CUST_CUSTOMER tcc
			left join t_rent_contract trc
			on tcc.CUST_ID=trc.CUST_ID and trc.STATUS=0
			left join T_RENT_COLLECTIONPLAN trct 
			on trct.RECT_ID=trc.RECT_ID and trct.STATUS=0 
			left join T_RENT_SETTLE trs
			on trct.RECP_ID=trs.RECP_ID and  trs.status = 0 and trs.state = 1
			where tcc.CUST_ID=#CUST_ID#  and trs.RECP_ID is not null	
			
			) TALL
			order by pay_date
		]]>	
	</select>	
	
	<!-- prc_Decompose_PledgeB 保证金B回冲处理 获取所有保证金B的支付表 -->
	<select id="queryAllDecomposePledgeBList" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
		  select tfcb.recp_id,tfcb.FICB_ID from T_FINA_COLLECTIONBILL  tfcb
		  left join T_RENT_COLLECTIONPLAN trcp on tfcb.RECP_ID=trcp.RECP_ID 
		  where FICB_ITEM='保证金B' and ficb_type='0' and (FICB_STATE='4' or FICB_STATE='5' )
		  and trcp.RECP_STATUS=0 and REAL_PRICE>0 and tfcb.FICB_TYPE='0'
		]]>	
	</select>	
	
		<!-- prc_Decompose_PledgeB 保证金B回冲处理 获取所有保证金B的抵充最后几期 -->
	<select id="queryAllDecomposePledgeBRecpID" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			 select * from
			 (
				  select top (select pledge_last_period from t_rent_collectionplan where STATUS=0 and recp_id=#RECP_ID#) recd_id,irr_month_price,pay_date,reduce_own_price,PERIOD_NUM 
				  from T_RENT_COLLECTIONDETAIL where recp_id=#RECP_ID# and status=0  
				  order by period_num desc 
			  )TT
			where TT.pay_date<getDate() and TT.reduce_own_price is null
		]]>	
	</select>	
	
		<!--  更新支付表的还款  -->
	<update id="updateRentDetailReduceOwnPrice" parameterClass="map">
		<![CDATA[
			   update T_RENT_COLLECTIONDETAIL set reduce_own_price=#IRR_MONTH_PRICE#
               where RECD_ID=#RECD_ID#
		]]>
	</update>
	<!--  查询销账记录表中的记录By FicbID  -->
	<select id="queryCollectionBillByFicbID" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
	        select RECP_ID, RECP_CODE, PAY_DATE, RECD_PERIOD, FICB_ITEM, SHOULD_PRICE, REAL_PRICE, FIIN_ID, CUST_CODE, FICB_STATE, FICB_TYPE, RECD_TYPE, ITEM_ORDER, DECOMPOSE_ID, DECOMPOSE_DATE, CHECK_ID, CHECK_DATE, TYPE, STATUS, CREATE_DATE, CREATE_NAME, MODIFY_DATE, DEPOSIT_STATUS, RED_CHECK_ID, RED_CHECK_DATE, DEPOSIT_FLAG from T_FINA_COLLECTIONBILL
	        where ficb_id=#FICB_ID#
   		]]>
	</select>
	
<!-- 插入一条分解单数据 -->
	<insert id="insertCollectionBillData" parameterClass="map">
		<![CDATA[
	        insert into T_FINA_COLLECTIONBILL(RECP_ID, RECP_CODE, PAY_DATE, RECD_PERIOD, FICB_ITEM, SHOULD_PRICE, REAL_PRICE, FIIN_ID, CUST_CODE, FICB_STATE, FICB_TYPE, RECD_TYPE, ITEM_ORDER, DECOMPOSE_ID, DECOMPOSE_DATE, CHECK_ID, CHECK_DATE, TYPE, STATUS, CREATE_DATE, CREATE_NAME, MODIFY_DATE, DEPOSIT_STATUS, RED_CHECK_ID, RED_CHECK_DATE, DEPOSIT_FLAG,IS_PLEDGE_B)
	        values(#RECP_ID#, #RECP_CODE#, #PAY_DATE#, #RECD_PERIOD#, #FICB_ITEM#, #SHOULD_PRICE#, #REAL_PRICE#, #FIIN_ID#, #CUST_CODE#, #FICB_STATE#, #FICB_TYPE#, #RECD_TYPE#, #ITEM_ORDER#, #DECOMPOSE_ID#, #DECOMPOSE_DATE#, #CHECK_ID#, getDate(), #TYPE#, #STATUS#, getDate(), #CREATE_NAME#, getDate(), #DEPOSIT_STATUS#, #RED_CHECK_ID#, #RED_CHECK_DATE#, '1','1')
		]]>		
	</insert>
	
	<!-- 查询来款数据表 -->
	<select id="queryFinanceIncomeByFiinID" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
	        select * from T_FINA_INCOME
	        where FIIN_ID=#FIIN_ID#
   		]]>
	</select>
	
	<!-- 插入一条待分解 来款数据 -->
	<insert id="insertFinaceIncomeData" parameterClass="map">
		insert into T_FINA_INCOME(RECEIPT_BANKNO, RECEIPT_UNIT, OPPOSING_BANKNO, OPPOSING_UNIT, OPPOSING_BANKNAME, OPPOSING_DATE, OPPOSING_TYPE, OPPOSING_FLAG, OPPOSING_ADDRESS, OPPOSING_SUMMARY, OPPOSING_EXPLAIN, OPPOSING_POSTSCRIPT, INCOME_MONEY, PAYMENT_MONEY, LEFT_MONEY, COMMISSION_MONEY, LOCKED, DECOMPOSE_STATUS, OPERATE_REMARK, OPERATE_ID, OPERATE_TIME, FINANCE_REMARK, FINANCE_ID, FINANCE_TIME, LEFT_ID, TRANSFER_ID, RED_ID, RED_TYPE, EXPORT_FLAG, EXPORT_COUNT, EXPORT_NAME, EXPORT_TIME, TYPE, STATUS, UPLOAD_USER_ID, UPLOAD_TIME, UPLOAD_PATH, MODIFY__USER_ID, MODIFY_TIME, OPPOSING_DATETAG, FICB_FLAG, virtual_code, Abnormal_Status, Income_Finance_Code)
		values(#RECEIPT_BANKNO#, #RECEIPT_UNIT#, #OPPOSING_BANKNO#, #OPPOSING_UNIT#, #OPPOSING_BANKNAME#, #OPPOSING_DATE#, #OPPOSING_TYPE#, #OPPOSING_FLAG#, #OPPOSING_ADDRESS#, #OPPOSING_SUMMARY#, #OPPOSING_EXPLAIN#, #OPPOSING_POSTSCRIPT#, #INCOME_MONEY#, #PAYMENT_MONEY#, #LEFT_MONEY#, #COMMISSION_MONEY#, #LOCKED#, #DECOMPOSE_STATUS#, #OPERATE_REMARK#, #OPERATE_ID#, #OPERATE_TIME#, #FINANCE_REMARK#, #FINANCE_ID#, #FINANCE_TIME#, #LEFT_ID#, #TRANSFER_ID#, #RED_ID#, #RED_TYPE#, #EXPORT_FLAG#, #EXPORT_COUNT#, #EXPORT_NAME#, #EXPORT_TIME#, #TYPE#, #STATUS#, #UPLOAD_USER_ID#, #UPLOAD_TIME#, #UPLOAD_PATH#, #MODIFY__USER_ID#, #MODIFY_TIME#, #OPPOSING_DATETAG#, #FICB_FLAG#, #virtual_code#, #Abnormal_Status#, #Income_Finance_Code#)
		<selectKey resultClass="java.lang.Long" keyProperty="FIIN_ID">
			SELECT @@IDENTITY AS FIIN_ID
		</selectKey>  	
	</insert>
	<!-- 插入日志 -->
	<insert id="insertPledgeBLog" parameterClass="map">
		<![CDATA[
	        insert into t_log_pledgeB(recp_id,oppo_date,recd_id,CREATE_TIME)
	        values(#RECP_ID#, #OPPO_DATE#, #RECD_ID#,getDate())
		]]>		
	</insert>
	
	<!-- Add by Michael 2012 10-25 取出此次分解所对应的利息+税金 -->
		<select id="queryRenTaxPriceForDecompose" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			select (convert(decimal(18,2),irr_month_price+isnull( VALUE_ADDED_TAX,0)))-convert(decimal(18,2),isnull(REDUCE_OWN_PRICE,0)) CAL_PRICE,convert(decimal(18,2),REN_PRICE) REN_PRICE,irr_month_price,isnull( VALUE_ADDED_TAX,0) VALUE_ADDED_TAX ,isnull(REDUCE_OWN_PRICE,0) REDUCE_OWN_PRICE,convert(decimal(18,2),isnull(REDUCE_OWN_PRICE,0)-isnull( VALUE_ADDED_TAX,0)) CAL_VALUE_ADDED_PRICE from T_RENT_COLLECTIONDETAIL
			where status='0' and recp_id=#recp_id# and PERIOD_NUM=#recd_period#
   		]]>
	</select>
	
	<!-- Add by Michael 2012 11-05 增加本金收据 -->
	<select id="queryOwnPriceprincipalDetail" parameterClass="map"  resultClass="java.util.HashMap">
		<![CDATA[	
		select convert(varchar,t2.OPPOSING_DATE,23)OPPOSING_DATE,t4.CUST_NAME,t4.CUST_CODE,t4.LEASE_CODE,t1.ficb_item,t1.REAL_OWN_PRICE,
		bank_name,t1.CHECK_DATE,t1.RECD_PERIOD,t1.PRINCIPAL_RUNCODE from 
		T_FINA_COLLECTIONBILL t1
		left join
		t_fina_income t2
		on t1.FIIN_ID = t2.FIIN_ID and t2.status=0
		left join
		t_rent_collectionplan t3
		on t1.RECP_ID = t3.RECP_ID and t3.status=0
		left join
		t_rent_contract t4
		on t4.rect_id=t3.RECT_ID and t4.status=0
		left join
		T_BANK_BANKACCOUNT tbbc
		on t2.RECEIPT_BANKNO=tbbc.account_no
		left join
		T_BANK_BANKINFO tbbi
		on tbbc.babi_id=tbbi.BABI_ID
		where t1.status=0 and t1.REAL_OWN_PRICE >0 and t1.FICB_ITEM='租金'
   		]]>
	</select>
	
		<!-- Add by Michael 2012 11-13 查询一笔资金分解分解明细 -->
	<select id="queryFinanceIncomeCode" parameterClass="map"  resultClass="java.util.HashMap">
		<![CDATA[		 
		 select Income_Finance_Code from T_FINA_INCOME where fiin_id=#FIIN_ID#
  		]]>
	</select>
	
	<!-- Add by Michael 2012 11-13 查询一笔资金分解分解明细 -->
	<select id="queryFinanceBillDetailByFiinCode" parameterClass="map"  resultClass="java.util.HashMap">
		<![CDATA[		 
		 select convert(varchar,tfcb.CHECK_DATE,23)CHECK_DATE,tfcb.FICB_ITEM,tfcb.REAL_PRICE,tuu.name,tfcb.recp_code from T_FINA_INCOME tfi
		 left join T_FINA_COLLECTIONBILL tfcb
		 on tfi.FIIN_ID = tfcb.FIIN_ID
		 left join T_USER_USER tuu on tuu.id=tfcb.DECOMPOSE_ID
		 where tfi.Income_Finance_Code=#INCOME_FINANCE_CODE# and tfcb.ficb_item<>'待分解来款'
  		]]>
	</select>
	
	<!-- Add by Michael 2013 01-23 查询可以退货的保证金C和保险费押金 -->
	<select id="queryPledgeRedBack" parameterClass="map"  resultClass="java.util.HashMap">	
		select trct.LEASE_CODE,trct.CUST_NAME,tt.* from (     
		select sum(real_price) real_price,FICB_ITEM,recp_id,MAX(RETURN_FLAG) RETURN_FLAG from T_FINA_COLLECTIONBILL 
		where  FICB_ITEM in ('保险费押金代收款','保证金C') and FICB_STATE='5'
		group by FICB_ITEM,recp_id
		having  sum(real_price) >0 ) TT
		left join T_RENT_COLLECTIONPLAN trcp on tt.recp_id=trcp.recp_id
		left join T_RENT_CONTRACT trct on trcp.RECT_ID = trct.RECT_ID
		where 1=1
		<isNotEmpty prepend="and" property="QSEARCH_VALUE">
			<![CDATA[
			 	(trct.CUST_NAME LIKE '%$QSEARCH_VALUE$%' or trct.LEASE_CODE LIKE '%$QSEARCH_VALUE$%' or TT.FICB_ITEM LIKE '%$QSEARCH_VALUE$%') 
			]]>
		</isNotEmpty>
	</select>
	
	<!--  更新分解单的保证金、押金冲回状态  -->
	<update id="updatePledgeReturnBackFlag" parameterClass="map">
		<![CDATA[
		   update T_FINA_COLLECTIONBILL set RETURN_FLAG='1'
           where RECP_ID=#RECP_ID# and FICB_ITEM=#FICB_ITEM#
		]]>
	</update>
	
	<!-- Add by Michael 2013 01-23 查询可以退货的保证金C和保险费押金 -->
	<select id="queryPledgeBillList" parameterClass="map"  resultClass="java.util.HashMap">	
		select * from T_FINA_COLLECTIONBILL 
		where  FICB_ITEM =#FICB_ITEM# and RECP_ID=#RECP_ID# and FICB_STATE='5'
	</select>
	
	<insert id="insertPledgeBillList" parameterClass="map">
        insert into T_FINA_COLLECTIONBILL(RECP_ID, RECP_CODE, PAY_DATE, RECD_PERIOD, FICB_ITEM, SHOULD_PRICE, REAL_PRICE, FIIN_ID, CUST_CODE, FICB_STATE, FICB_TYPE, RECD_TYPE, ITEM_ORDER, DECOMPOSE_ID, DECOMPOSE_DATE, CHECK_ID, CHECK_DATE, [TYPE], STATUS, CREATE_DATE, CREATE_NAME, MODIFY_DATE, DEPOSIT_STATUS, RED_CHECK_ID, RED_CHECK_DATE, DEPOSIT_FLAG, IS_PLEDGE_B, PRINCIPAL_RUNCODE, REAL_OWN_PRICE, ORI_PRINCIPAL_RUNCODE, IS_PRINT)
        values(#RECP_ID#, #RECP_CODE#, #PAY_DATE#, #RECD_PERIOD#, #FICB_ITEM#, #SHOULD_PRICE#, #REAL_PRICE#, #FIIN_ID#, #CUST_CODE#, #FICB_STATE#, #FICB_TYPE#, #RECD_TYPE#, #ITEM_ORDER#, #DECOMPOSE_ID#, getDate(), #s_employeeId#, getDate(), #TYPE#, #STATUS#, getDate(), #s_employeeId#, getDate(), #DEPOSIT_STATUS#, #s_employeeId#, getDate(), #DEPOSIT_FLAG#, #IS_PLEDGE_B#, #PRINCIPAL_RUNCODE#, #REAL_OWN_PRICE#, #ORI_PRINCIPAL_RUNCODE#, #IS_PRINT#)
	</insert>
	
	<select id="queryPledgeIncome" parameterClass="map"  resultClass="java.util.HashMap">	
		select * from T_FINA_INCOME 
		where  FIIN_ID=#FIIN_ID#
	</select>

	<insert id="insertPledgeIncome" parameterClass="map">
        insert into T_FINA_INCOME
        (RECEIPT_BANKNO, RECEIPT_UNIT, OPPOSING_BANKNO, OPPOSING_UNIT, OPPOSING_BANKNAME, OPPOSING_DATE, OPPOSING_TYPE, OPPOSING_FLAG, OPPOSING_ADDRESS, OPPOSING_SUMMARY, OPPOSING_EXPLAIN, OPPOSING_POSTSCRIPT, INCOME_MONEY,  DECOMPOSE_STATUS, OPERATE_REMARK, OPERATE_ID, OPERATE_TIME, FINANCE_REMARK, FINANCE_ID, FINANCE_TIME, LEFT_ID, TRANSFER_ID, RED_ID, RED_TYPE,   EXPORT_NAME, EXPORT_TIME, [TYPE], STATUS,  UPLOAD_TIME, UPLOAD_PATH,  MODIFY_TIME, OPPOSING_DATETAG, FICB_FLAG, VIRTUAL_CODE, ABNORMAL_STATUS,INCOME_FINANCE_CODE)
        values(
        #RECEIPT_BANKNO#, #RECEIPT_UNIT#, #OPPOSING_BANKNO#, #OPPOSING_UNIT#, #OPPOSING_BANKNAME#, #OPPOSING_DATE#, #OPPOSING_TYPE#, #OPPOSING_FLAG#, #OPPOSING_ADDRESS#, #OPPOSING_SUMMARY#, #OPPOSING_EXPLAIN#, #OPPOSING_POSTSCRIPT#, #INCOME_MONEY#,  #DECOMPOSE_STATUS#, #OPERATE_REMARK#,#OPERATE_ID#, #OPERATE_TIME#, #FINANCE_REMARK#, #FINANCE_ID#, #FINANCE_TIME#, #LEFT_ID#, #TRANSFER_ID#, #RED_ID#, #RED_TYPE#,  #EXPORT_NAME#, #EXPORT_TIME#, #TYPE#, #STATUS#, #UPLOAD_TIME#, #UPLOAD_PATH#,  #MODIFY_TIME#, #OPPOSING_DATETAG#, #FICB_FLAG#, #VIRTUAL_CODE#, #ABNORMAL_STATUS#,#INCOME_FINANCE_CODE#
		)
	</insert>	
	
	<select id="getFundsDetailByFiinID" parameterClass="map"  resultClass="java.util.HashMap">	
		select * from T_FINA_INCOME 
		where  FIIN_ID=#FIIN_ID#
	</select>	

	<insert id="insertReturnPayMoney" parameterClass="map">
		insert into T_SUPL_PLAYDETIL
		  (APPLICATION_DATE, PAY_MONEY,  CREATE_DATE, CREATE_ID, 
		  STATUS,BANK_NAME,BANK_ACCOUNT,PAYCOUNT,PAYED,STATE,
		  BACKSTATE,BACKCOMP,EXPECTEDDATE,FSS_ID)
		values
		  (getDate(),#amount#,getdate(),#s_employeeId#,
		  0,#bank_name#,#bank_account#,#amount#,#amount#,0,
		  5,#payee#,#return_date#,#FSS_ID#)
   	</insert>
   	
	<select id="getFundsReturnDetailByID" parameterClass="map"  resultClass="java.util.HashMap">	
		select *,convert(varchar,RETURN_DATE,23) RETURNDATE from T_INCOME_RETURN 
		where  ID=#ID#
	</select>
	<!-- 查询退款操作日志  -->
	<select id="getFundsReturnLogList" parameterClass="map"  resultClass="java.util.HashMap">	
		select tirl.*,tuu.[NAME] from T_INCOME_RETURN_LOG  tirl
		left join T_USER_USER tuu on tuu.ID=tirl.create_id
		where  tirl.RETURN_PAY_ID=#return_id#
		order by id desc
	</select>
	
	<!-- Add by Michael 2013 04-15 根据客户编号查询供应商列表 -->
	<select id="querySuppListByCustCode" parameterClass="map"  resultClass="java.util.HashMap">		
         select tss.[NAME],tss.ID,trcp.RECP_ID,tss.CODE from T_PRJT_CREDIT tpc 
         left join T_PRJT_CREDITEQUIPMENT tpce on tpc.id=tpce.CREDIT_ID and tpce.EQMT_STATUS = 0
         left join T_SUPL_EQUIPMENT tsep on tsep.SUEQ_ID = tpce.SUEQ_ID and tsep.STATUS = 0
         left join T_SUPL_SUPPLIER tss on tsep.SUPPLIER_ID = tss.ID and tss.STATUS = 0
         left join T_CUST_CUSTOMER tcc on tpc.CUST_ID = tcc.CUST_ID and tcc.STATUS = 0
         left join T_RENT_CONTRACT trct on tpc.id=trct.PRCD_ID and trct.STATUS = 0
         left join T_RENT_COLLECTIONPLAN trcp on trcp.RECT_ID = trct.RECT_ID and trcp.STATUS = 0
         where tpc.STATUS =0 and trcp.RECP_ID is not null and tss.ID is not null
         and tcc.CUST_CODE =#cust_code#
         group by tss.[NAME],tss.ID,trcp.RECP_ID ,tss.CODE
   	</select>     	
	
	<update id="updateMailMemo">
		UPDATE T_FINA_INCOME
		   SET MAIL_MEMO=#mailMemo#
		 WHERE FIIN_ID=#updateKey# 
	</update>
	
	<select id="getUnknownMoney" resultClass="java.util.HashMap">
            SELECT 
			  T1.INCOME_MONEY
			  ,(T1.INCOME_MONEY+ISNULL(O1.RECORD_MONEY,0)+ISNULL(O2.RECORD_MONEY,0)) REST_MONEY
			  , T1.INCOME_DATE
			  , T1.INCOME_NAME
			  , T1.RECEIPT_ACCOUNT
			  , ISNULL(T1.REMARK,'请认领!') MAIL_MEMO
			FROM T_RENT_INCOME T1 
			LEFT JOIN (SELECT SUM(T2.RECORD_MONEY) RECORD_MONEY,T2.INCOME_ID 
			      FROM T_RENT_RECORD T2 
			     WHERE T2.STATUS=0
			<![CDATA[       AND T2.RECORD_MONEY<0 ]]>
			       AND (T2.RECORD_STATUS=0 OR T2.RECORD_STATUS=1) 
			  GROUP BY T2.INCOME_ID) O1 ON T1.INCOME_ID=O1.INCOME_ID
			LEFT JOIN (SELECT SUM(T2.RECORD_MONEY) RECORD_MONEY,T2.INCOME_ID 
			      FROM T_RENT_RECORD T2 
			     WHERE T2.STATUS=0
			       AND T2.RECORD_MONEY>0 
			       AND T2.RECORD_STATUS=1 
			  GROUP BY T2.INCOME_ID) O2 ON T1.INCOME_ID=O2.INCOME_ID 
			WHERE T1.STATUS=0
			and (T1.INCOME_MONEY+ISNULL(O1.RECORD_MONEY,0)+ISNULL(O2.RECORD_MONEY,0)) > 0
			order by T1.INCOME_DATE desc
	</select>
	
	<update id="updateDeposeCustName">
		UPDATE t_fina_income
		   SET DEPOSE_CUSTOMER=#CUST_NAME#
		 WHERE fiin_id=#select_income_id#
	</update>
	
	<select id="getEmaliContent" resultClass="java.util.HashMap">
		select t1.BACKCOMP,T1.PAY_MONEY,CONVERT(DATE,T1.EXPECTEDDATE) EXPECTEDDATE,
		t6.NAME,upper.NAME UPPER_NAME,t9.DECP_NAME_CN
							FROM T_SUPL_PLAYDETIL T1
							LEFT JOIN T_USER_USER T6 ON T1.CREATE_ID = T6.ID
						    left join T_USER_USER upper on upper.id = T6.upper_user
			  				left join T_DEPT_DEPARTMENT dept on dept.ID = T6.DEPT_ID and dept.STATUS = 0
			  				left join T_DEPT_COMPANY t9 on dept.DECP_ID = t9.DECP_ID and t9.STATUS = 0
							where  T1.BACKSTATE = #BACKSTATE# AND T1.ID=#PK#
	</select>
	<select id="getPeriodNumByRecpCode" parameterClass="map"  resultClass="java.util.HashMap">	
	        SELECT TFCBD.RECD_PERIOD AS PERIOD_NUM,COUNT(TFCBD.RECD_PERIOD) AS ROWS
        FROM              
  			(SELECT TFCB.RECP_ID,TFCB.RECP_CODE,TFCB.PAY_DATE,TFCB.RECD_PERIOD,MAX(TFCB.SHOULD_PRICE) SHOULD_PRICE ,
  			SUM(TFCB.REAL_PRICE) REAL_PRICE,TFCB.CUST_CODE,TFI.OPPOSING_DATE OPPOSING_DATE,DATEDIFF(D,TFCB.PAY_DATE,OPPOSING_DATE)  DUN_DAY
  			FROM T_FINA_COLLECTIONBILL TFCB
  			LEFT JOIN T_FINA_INCOME TFI ON TFCB.FIIN_ID = TFI.FIIN_ID
  			WHERE
  			 (TFCB.FICB_STATE=4 OR TFCB.FICB_STATE=5) 
  			AND TFI.RED_TYPE IS NULL AND TFCB.FICB_TYPE='0'
  			AND (TFCB.FICB_ITEM='租金' OR TFCB.FICB_ITEM='增值税')
  			GROUP BY RECP_ID,RECP_CODE,PAY_DATE,RECD_PERIOD,CUST_CODE,OPPOSING_DATE,DATEDIFF(D,TFCB.PAY_DATE,OPPOSING_DATE)) TFCBD
        LEFT JOIN T_RENT_COLLECTIONPLAN  TRCP 	ON TFCBD.RECP_ID=TRCP.RECP_ID AND TRCP.STATUS=0
        WHERE TRCP.RECP_CODE=#RECP_CODE#
        GROUP BY TFCBD.RECD_PERIOD
	</select>
	<!-- 根据合同号得到承租人名称 -->
	<select  id="getCustNameByLeaseCode" parameterClass="map"  resultClass="java.util.HashMap">
		SELECT  CUST_NAME  FROM   T_RENT_CONTRACT WHERE LEASE_CODE=#leaseCode#
	</select>
	
	 <insert id="addOneBarcode" parameterClass="map">
		INSERT INTO T_RENT_ONEBARCODE
		(ONE_BARCODE,
		EXPRESS_ID,
		EXPRESS_NAME_ID,
		RECP_CODE,
		PERIOD,
		CREATE_TIME,
		CREATE_USER,
		STATUS,
		DELETE_TIME,
		DELETE_USER_ID
		)
		values
		(
		#ONE_BARCODE#,
		#EXPRESS_ID#,
		#EXPRESS_NAME_ID#,
		#RECP_CODE#,
		#PERIOD#,
		getdate(),
		#CREATE_USER#,
		0,
		NULL,
		NULL
		)
	</insert>
	<select id="getOneBarcodeList" parameterClass="map"  resultClass="java.util.HashMap">
		SELECT TDD.FLAG, TRO.ID, TRO.ONE_BARCODE, TRO.EXPRESS_ID, TRO.RECP_CODE, TRO.PERIOD, TRO.CREATE_TIME, TRO.CREATE_USER ,
		TRC.CUST_NAME,TDC.DECP_NAME_CN,TUU.[NAME],TRO.DELETE_TIME, TRO.DELETE_USER_ID, U.NAME DELETE_USER_NAME
		FROM T_RENT_ONEBARCODE TRO
		LEFT JOIN  T_RENT_COLLECTIONPLAN  TRCP ON TRCP.RECP_CODE=TRO.RECP_CODE
		LEFT JOIN T_RENT_CONTRACT TRC  ON  TRC.RECT_ID=TRCP.RECT_ID
		LEFT JOIN T_DATA_DICTIONARY TDD ON TDD.CODE=TRO.EXPRESS_NAME_ID AND TDD.TYPE='快递公司'
		LEFT JOIN T_DEPT_COMPANY TDC ON TRC.DECP_ID=TDC.DECP_ID
        LEFT JOIN T_USER_USER TUU ON TRC.SENSOR_ID =TUU.ID
        left join t_prjt_credit tpc on tpc.id = TRC.prcd_id and tpc.status = 0
        LEFT JOIN T_USER_USER U ON U.ID = TRO.DELETE_USER_ID
		where
			(TRCP.STATUS=0 or TRCP.STATUS is null) 
			AND TRO.STATUS = #status#
			<isEqual prepend="and" property="p_usernode" compareValue="2">
				exists(select ID from T_USER_USER
				where DEPT_ID in
				(select uc.DEPT_ID
				from dbo.T_USER_USER2COMPANY uc
				where uc.USER_ID = #s_employeeId#)
				and ID = TRC.SENSOR_ID)

			</isEqual>
			<isEqual prepend="and" property="p_usernode" compareValue="1">
				(TRC.SENSOR_ID=#s_employeeId# )
			</isEqual>
			<isNotEmpty prepend="and" property="content">
			<![CDATA[
			( TRO.EXPRESS_ID LIKE '%$content$%' OR TRO.RECP_CODE LIKE '%$content$%'  OR TRC.CUST_NAME like '%$content$%')
			  ]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="expressNameId">
				<![CDATA[
					TRO.EXPRESS_NAME_ID=#expressNameId#
				  ]]>
			</isNotEmpty>
			
			<isNotEmpty prepend="and" property="QSTART_DATE">
			<![CDATA[	CONVERT(date,TRO.CREATE_TIME)  >=  CONVERT(date,#QSTART_DATE#) ]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="QEND_DATE">
			<![CDATA[	 CONVERT(date,TRO.CREATE_TIME)  <= CONVERT(date,#QEND_DATE# )]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="companyCode">
				tpc.company_code = #companyCode#
			</isNotEmpty>
	</select>
		<select id="getNewProjectForRentDecompose" parameterClass="map" resultClass="java.util.HashMap">
 		select distinct  t1.*
		  from (select distinct 
				                fiin.opposing_unit,fiin.virtual_code
				  from t_fina_income fiin
				  left join (select tbba.account_no, tbbi.bank_name
				               from t_bank_bankaccount tbba
				               left join t_bank_bankinfo tbbi on tbba.babi_id = tbbi.babi_id
				              where tbba.status = 0
				                and tbbi.status = 0) baba on fiin.receipt_bankno =
				                                             baba.account_no
				  left join t_user_user usus on fiin.operate_id = usus.id
				 where fiin.status = 0and fiin.decompose_status in (1,2)
          ) t
         left join (
            select p.CREDIT_RUNCODE,c.LEASE_CODE,u.CUST_NAME ,u.virtual_code 
            FROM T_PRJT_CREDIT p
            left join T_RENT_CONTRACT c on c.PRCD_ID = p.ID
            LEFT JOIN T_RENT_COLLECTIONPLAN r ON r.RECT_ID = c.RECT_ID AND r.STATUS = 0 
            LEFT JOIN T_RENT_COLLECTIONPLAN t ON t.RECT_ID = c.RECT_ID AND t.STATUS = 0
            LEFT JOIN T_CUST_CUSTOMER u ON p.CUST_ID = u.CUST_ID 
            WHERE p.STATUS=0 AND (p.WIND_STATE=1 OR p.WIND_STATE=2) 
            AND (c.STATUS!=-2 OR c.STATUS IS NULL) 
            and (t.RECP_STATUS != 3 and t.RECP_STATUS != 1) and month(p.FINANCECONTRACT_DATE) =month(getdate()) and year(p.FINANCECONTRACT_DATE)= year(getdate())
         ) t1  on (t.OPPOSING_UNIT = t1.CUST_NAME or t.virtual_code = t1.virtual_code)
         where t1.CUST_NAME is not null 	
	</select>
	
	<select id="getLeftId" resultClass="java.lang.String">
		SELECT LEFT_ID FROM T_FINA_INCOME WHERE STATUS=0 AND FIIN_ID=#select_income_id#
	</select>
	
	<select id="getOriginalFiinId" resultClass="java.lang.String">
		SELECT FIIN_ID FROM T_FINA_INCOME WHERE STATUS=0 AND FIIN_ID=#select_income_id# AND LEFT_ID IS NULL AND RED_ID IS NULL
	</select>
	
	<select id="getDecomposeListById" resultClass="java.util.HashMap">
		SELECT RECP_ID,CONVERT(DATE,PAY_DATE) PAY_DATE,RECD_PERIOD PERIOD_NUM,CASE WHEN FICB_ITEM='保证金'THEN 'DEPOSIT_A' ELSE(SELECT CODE FROM T_DATA_DICTIONARY WHERE FLAG=FICB_ITEM AND STATUS=0 AND TYPE='租金分解类型') END FICB_ITEM,
      		   SHOULD_PRICE,-REAL_PRICE DECOMPOSE_PRICE,DECOMPOSE_ID,DECOMPOSE_DATE,
      		   CASE WHEN LEN(ISNULL(SUPL_CODE,''))&lt;12 THEN '客户' ELSE '供应商' END DECOMPOSE_FROM,FICB_ID
          FROM T_FINA_COLLECTIONBILL 
         WHERE STATUS=0 
           AND FIIN_ID=#select_income_id# 
           AND FICB_ITEM!='待分解来款'
	</select>
	
	<select id="getIncomeIdByFiinId" resultClass="java.lang.String">
		SELECT INCOME_ID FROM T_RENT_INCOME WHERE STATUS=0 AND FIIN_ID=#fiin_id#
	</select>
	
	<update id="confirmOrRejectDecompose">
		UPDATE T_RENT_DECOMPOSE SET DECOMPOSE_STATUS=#decomposeStatus#,MODIFY_TIME=GETDATE(),AUDIT_ID=#s_employeeId#,AUDIT_TIME=GETDATE()
		 WHERE FICB_ID=#ficbId# AND STATUS=0
	</update>
	
	<select id="getFicbId" resultClass="java.util.HashMap">
		SELECT T1.FICB_ID,T2.BILL_ID FROM T_FINA_COLLECTIONBILL T1 
	 LEFT JOIN T_RENT_DECOMPOSE T2 ON T1.FICB_ID=T2.FICB_ID
		 WHERE T1.FIIN_ID=#select_income_id# 
		   AND T2.BILL_ID IS NOT NULL
	</select>
	
	<select id="getFicbId1" resultClass="java.util.HashMap">
		SELECT T1.FICB_ID,(-T1.REAL_PRICE) DECOMPOSE_PRICE,SHOULD_PRICE,FICB_ITEM FROM T_FINA_COLLECTIONBILL T1 
		 WHERE T1.FIIN_ID=#select_income_id# 
	  ORDER BY T1.FICB_ID DESC
	</select>
	<!-- 已交款产生的罚息 -->
	<select id="getTotalFineByMap" parameterClass="map" resultClass="java.util.HashMap">
SELECT CONVERT(DECIMAL(18,2),(SUM(FINE.FINE )-ISNULL(PAYFINE.PAYFINE, 0)))  SHOULD_PRICE,CONVERT(DECIMAL(18,2),(SUM(FINE.FINE )-ISNULL(PAYFINE.PAYFINE, 0))) FINE, FINE.RECP_ID, FINE.LEASE_CODE,'租金罚息' DESCR,'RENT_FINE' FICB_CODE,FINE.RECP_CODE RECP_CODE,CONVERT(DATE,GETDATE()) PAY_DATE
,FINE.RECP_ID RECD_ID
FROM
(<!-- 已缴租金产生的罚息（举例:10月应缴租金,但是客户11月缴完了租金,产生的罚息） -->
	SELECT PAY.RECP_ID ,PAY.LEASE_CODE,ROUND(PAY.REAL_PRICE * PAY.DUN_DAY *PAY.FINE_RATE / 100,2) FINE,PAY.RECP_CODE RECP_CODE
	FROM (     SELECT TRDSE.RECP_ID RECP_ID,TRDSE.PAY_DATE PAY_DATE,TRDSE.PERIOD_NUM PERIOD_NUM,MAX(TRDSE.SHOULD_PRICE)
				SHOULD_PRICE,SUM(TRDSE.DECOMPOSE_PRICE*(-1)) REAL_PRICE,INCONE.INCOME_DATE INCOME_DATE,DATEDIFF(D,TRDSE.PAY_DATE,INCONE.INCOME_DATE) DUN_DAY
				,TRCP.FINE_RATE FINE_RATE,TRC.LEASE_CODE LEASE_CODE,TRCP.RECP_CODE RECP_CODE
				FROM T_RENT_DECOMPOSE TRDSE
				LEFT JOIN T_RENT_INCOME INCONE ON TRDSE.INCOME_ID =INCONE.INCOME_ID
				LEFT JOIN T_RENT_COLLECTIONPLAN TRCP ON TRDSE.RECP_ID=TRCP.RECP_ID AND TRCP.STATUS=0
				LEFT JOIN T_RENT_CONTRACT TRC ON TRCP.RECT_ID =TRC.RECT_ID AND TRC.STATUS=0
				LEFT JOIN T_RENT_COLLECTIONDETAIL TRCD ON TRCD.RECP_ID = TRCP.RECP_ID AND TRCD.PERIOD_NUM=TRDSE.PERIOD_NUM AND TRCD.STATUS=0
				WHERE TRDSE.DECOMPOSE_STATUS='2' AND TRDSE.DECOMPOSE_TYPE ='0' AND TRDSE.HAS_RED_DECOMPOSE='0' and
						(TRDSE.BILL_CODE='RENT' OR TRDSE.BILL_CODE='VALUE_ADD_TAX')
				AND DATEDIFF(D,TRDSE.PAY_DATE,INCONE.INCOME_DATE )>0 AND TRCP.FUND_STATUS='0'
				 <isNotEmpty prepend="and" property="CUST_CODE">
						TRC.CUST_CODE=#CUST_CODE#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="CUST_ID">
					TRC.CUST_ID=#CUST_ID#
				 </isNotEmpty>
				<isNotEmpty prepend="and" property="RECP_ID">
					TRDSE.RECP_ID=#RECP_ID#
				 </isNotEmpty>
				GROUP BY
				TRDSE.RECP_ID,TRDSE.PAY_DATE,TRDSE.PERIOD_NUM,INCOME_DATE,DATEDIFF(D,TRDSE.PAY_DATE,INCONE.INCOME_DATE)
				,TRCP.FINE_RATE ,TRC.LEASE_CODE,TRCP.RECP_CODE
	) PAY
UNION ALL
<!-- 未缴租金产生的罚息 -->
SELECT 
	UNPAY.RECP_ID ,
	UNPAY.LEASE_CODE ,
	<isNotEmpty property="COM_DATE">
		ROUND((UNPAY.MONTH_PRICE-UNPAY.REDUCE_PRICE)*DATEDIFF(D,UNPAY.PAY_DATE,#COM_DATE#)*UNPAY.FINE_RATE/ 100,2) FINE,
	</isNotEmpty>
	<isEmpty property="COM_DATE">
		ROUND((UNPAY.MONTH_PRICE-UNPAY.REDUCE_PRICE)*DATEDIFF(D,UNPAY.PAY_DATE,GETDATE())*UNPAY.FINE_RATE/ 100,2) FINE,
	</isEmpty>
	UNPAY.RECP_CODE RECP_CODE
FROM (
		SELECT TRCP.TAX_PLAN_CODE,TRC.CUST_ID,TRC.CUST_CODE,TRCP.RECP_ID,TRCP.RECT_ID,TRCP.RECP_CODE,TRC.LEASE_CODE,TRCP.FUND_STATUS,TRCD.PAY_DATE,TRCD.PERIOD_NUM,TRCP.FINE_TYPE,TRCP.FINE_RATE
		,ISNULL(TRCD.IRR_MONTH_PRICE, 0)+ISNULL(TRCD.VALUE_ADDED_TAX, 0) MONTH_PRICE,ISNULL(TRCD.REDUCE_OWN_PRICE, 0) REDUCE_PRICE
		FROM T_RENT_COLLECTIONPLAN TRCP
		LEFT JOIN T_RENT_CONTRACT TRC ON TRCP.RECT_ID = TRC.RECT_ID
		LEFT JOIN T_RENT_COLLECTIONDETAIL TRCD ON TRCP.RECP_ID = TRCD.RECP_ID
		WHERE TRCP.STATUS = 0 AND TRC.STATUS=0 AND (TRCP.FUND_STATUS=0 OR TRCP.FUND_STATUS=1)
		<isNotEmpty property="COM_DATE">
			AND CAST(#COM_DATE# AS DATETIME) > TRCD.PAY_DATE 
		</isNotEmpty>
		<isEmpty property="COM_DATE">
			AND CAST(GETDATE() AS DATETIME) > TRCD.PAY_DATE 
		</isEmpty>
		AND ISNULL(TRCD.IRR_MONTH_PRICE, 0)+ISNULL(TRCD.VALUE_ADDED_TAX,0)>ISNULL(TRCD.REDUCE_OWN_PRICE, 0) AND TRCP.FUND_STATUS='0'
		 <isNotEmpty prepend="and" property="CUST_CODE">
				TRC.CUST_CODE=#CUST_CODE#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="CUST_ID">
			TRC.CUST_ID=#CUST_ID#
		 </isNotEmpty>
		<isNotEmpty prepend="and" property="RECP_ID">
			TRCP.RECP_ID=#RECP_ID#
		 </isNotEmpty>
	) UNPAY
)FINE
	LEFT JOIN (
		SELECT SUM(DECOMPOSE.DECOMPOSE_PRICE *(-1)) PAYFINE,DECOMPOSE.RECP_ID 
		FROM T_RENT_DECOMPOSE DECOMPOSE
		WHERE DECOMPOSE.DECOMPOSE_STATUS=2 AND DECOMPOSE.STATUS = 0 AND (DECOMPOSE.BILL_CODE ='RENT_FINE' OR
		DECOMPOSE.BILL_CODE = 'SETTLEMENT_RENT_FINE')
		GROUP BY DECOMPOSE.RECP_ID
	)PAYFINE ON PAYFINE.RECP_ID= FINE.RECP_ID
	GROUP BY FINE.RECP_ID, FINE.LEASE_CODE,PAYFINE.PAYFINE,FINE.RECP_CODE
</select>

<select id="getTotalFineByMapForDecompose" parameterClass="map" resultClass="java.util.HashMap">
SELECT (SUM(FINE.FINE )-ISNULL(PAYFINE.PAYFINE, 0)) SHOULD_PRICE,(SUM(FINE.FINE )-ISNULL(PAYFINE.PAYFINE, 0)) FINE, FINE.RECP_ID, FINE.LEASE_CODE,'租金罚息' DESCR,'RENT_FINE' FICB_CODE,FINE.RECP_CODE RECP_CODE,CONVERT(DATE,GETDATE()) PAY_DATE
,FINE.RECP_ID RECD_ID,ISNULL((SELECT DISTINCT 'Y' FROM T_RENT_DECOMPOSE TT WHERE TT.RECP_ID=FINE.RECP_ID AND TT.STATUS=0 AND (TT.DECOMPOSE_STATUS=1 OR TT.DECOMPOSE_STATUS=0)),'N') IS_LOCK
FROM
(<!-- 已缴租金产生的罚息（举例:10月应缴租金,但是客户11月缴完了租金,产生的罚息） -->
	SELECT PAY.RECP_ID ,PAY.LEASE_CODE,ROUND(PAY.REAL_PRICE * PAY.DUN_DAY *PAY.FINE_RATE / 100,2) FINE,PAY.RECP_CODE RECP_CODE
	FROM (     SELECT TRDSE.RECP_ID RECP_ID,TRDSE.PAY_DATE PAY_DATE,TRDSE.PERIOD_NUM PERIOD_NUM,MAX(TRDSE.SHOULD_PRICE)
				SHOULD_PRICE,SUM(TRDSE.DECOMPOSE_PRICE*(-1)) REAL_PRICE,INCONE.INCOME_DATE INCOME_DATE,DATEDIFF(D,TRDSE.PAY_DATE,INCONE.INCOME_DATE) DUN_DAY
				,TRCP.FINE_RATE FINE_RATE,TRC.LEASE_CODE LEASE_CODE,TRCP.RECP_CODE RECP_CODE
				FROM T_RENT_DECOMPOSE TRDSE
				LEFT JOIN T_RENT_INCOME INCONE ON TRDSE.INCOME_ID =INCONE.INCOME_ID
				LEFT JOIN T_RENT_COLLECTIONPLAN TRCP ON TRDSE.RECP_ID=TRCP.RECP_ID AND TRCP.STATUS=0
				LEFT JOIN T_RENT_CONTRACT TRC ON TRCP.RECT_ID =TRC.RECT_ID AND TRC.STATUS=0
				LEFT JOIN T_RENT_COLLECTIONDETAIL TRCD ON TRCD.RECP_ID = TRCP.RECP_ID AND TRCD.PERIOD_NUM=TRDSE.PERIOD_NUM AND TRCD.STATUS=0
				WHERE (TRDSE.DECOMPOSE_STATUS='2' OR TRDSE.DECOMPOSE_STATUS='1' OR TRDSE.DECOMPOSE_STATUS='0') AND TRDSE.DECOMPOSE_TYPE ='0' AND TRDSE.HAS_RED_DECOMPOSE='0' and
						(TRDSE.BILL_CODE='RENT' OR TRDSE.BILL_CODE='VALUE_ADD_TAX')
				AND DATEDIFF(D,TRDSE.PAY_DATE,INCONE.INCOME_DATE )>0 AND TRCP.FUND_STATUS='0'
				 <isNotEmpty prepend="and" property="CUST_CODE">
						TRC.CUST_CODE=#CUST_CODE#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="CUST_ID">
					TRC.CUST_ID=#CUST_ID#
				 </isNotEmpty>
				<isNotEmpty prepend="and" property="RECP_ID">
					TRDSE.RECP_ID=#RECP_ID#
				 </isNotEmpty>
				 AND TRCP.RECP_STATUS=0
				GROUP BY
				TRDSE.RECP_ID,TRDSE.PAY_DATE,TRDSE.PERIOD_NUM,INCOME_DATE,DATEDIFF(D,TRDSE.PAY_DATE,INCONE.INCOME_DATE)
				,TRCP.FINE_RATE ,TRC.LEASE_CODE,TRCP.RECP_CODE
	) PAY
UNION ALL
<!-- 未缴租金产生的罚息 -->
SELECT UNPAY.RECP_ID ,UNPAY.LEASE_CODE ,ROUND((UNPAY.MONTH_PRICE-UNPAY.REDUCE_PRICE)*DATEDIFF(D,UNPAY.PAY_DATE,GETDATE())*UNPAY.FINE_RATE/ 100,2) FINE,UNPAY.RECP_CODE RECP_CODE
FROM (
		SELECT TRCP.TAX_PLAN_CODE,TRC.CUST_ID,TRC.CUST_CODE,TRCP.RECP_ID,TRCP.RECT_ID,TRCP.RECP_CODE,TRC.LEASE_CODE,TRCP.FUND_STATUS,TRCD.PAY_DATE,TRCD.PERIOD_NUM,TRCP.FINE_TYPE,TRCP.FINE_RATE
		,ISNULL(TRCD.IRR_MONTH_PRICE, 0)+ISNULL(TRCD.VALUE_ADDED_TAX, 0) MONTH_PRICE,ISNULL(TRCD.REDUCE_OWN_PRICE, 0) REDUCE_PRICE
		FROM T_RENT_COLLECTIONPLAN TRCP
		LEFT JOIN T_RENT_CONTRACT TRC ON TRCP.RECT_ID = TRC.RECT_ID
		LEFT JOIN T_RENT_COLLECTIONDETAIL TRCD ON TRCP.RECP_ID = TRCD.RECP_ID
		WHERE TRCP.STATUS = 0 AND TRC.STATUS=0 AND (TRCP.FUND_STATUS=0 OR TRCP.FUND_STATUS=1)
		AND CAST(GETDATE() AS DATETIME) > TRCD.PAY_DATE AND ISNULL(TRCD.IRR_MONTH_PRICE, 0)+ISNULL(TRCD.VALUE_ADDED_TAX,0)>ISNULL(TRCD.REDUCE_OWN_PRICE, 0) AND TRCP.FUND_STATUS='0'
		 <isNotEmpty prepend="and" property="CUST_CODE">
				TRC.CUST_CODE=#CUST_CODE#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="CUST_ID">
			TRC.CUST_ID=#CUST_ID#
		 </isNotEmpty>
		<isNotEmpty prepend="and" property="RECP_ID">
			TRCP.RECP_ID=#RECP_ID#
		 </isNotEmpty>
		 AND TRCP.RECP_STATUS=0
	) UNPAY
)FINE
	LEFT JOIN (
		SELECT SUM(DECOMPOSE.DECOMPOSE_PRICE *(-1)) PAYFINE,DECOMPOSE.RECP_ID 
		FROM T_RENT_DECOMPOSE DECOMPOSE
		WHERE (DECOMPOSE.DECOMPOSE_STATUS=2 OR DECOMPOSE.DECOMPOSE_STATUS=1 OR DECOMPOSE.DECOMPOSE_STATUS=0) AND DECOMPOSE.STATUS = 0 AND (DECOMPOSE.BILL_CODE ='RENT_FINE' OR
		DECOMPOSE.BILL_CODE = 'SETTLEMENT_RENT_FINE')
		GROUP BY DECOMPOSE.RECP_ID
	)PAYFINE ON PAYFINE.RECP_ID= FINE.RECP_ID
	WHERE NOT EXISTS (SELECT 1 FROM T_RENT_SETTLEMENT TRSE WHERE TRSE.STATUS=0 AND TRSE.RECP_ID=FINE.RECP_ID AND (TRSE.STATE=0 OR TRSE.STATE='' OR TRSE.STATE IS NULL))
	GROUP BY FINE.RECP_ID, FINE.LEASE_CODE,PAYFINE.PAYFINE,FINE.RECP_CODE
</select>

		<select id="getClaimDetail" resultClass="java.util.HashMap">
			SELECT * FROM T_INCOME_CLAIM WHERE ID=#ID#
		</select>
		<insert id="insertClaim">
			INSERT INTO T_RENT_CLAIM
			(INCOME_ID,AMOUNT,REASON,IS_OPEN_INVOICE,STATE,CREATE_TIME,CREATE_BY,STATUS,AUTH_TIME,AUTH_BY)
			VALUES
			(#claimIncomeId#,#claimMoney#,#claimReason#,#claimIsOpenInvoice#,#claimState#,#createTime#,#createBy#,0,#authTime#,#authBy#)
		</insert>
		<select id="getRefundDetail" resultClass="java.util.HashMap">
			SELECT * FROM T_INCOME_RETURN WHERE ID=#ID#
		</select>
		<insert id="insertRefund">
			INSERT INTO T_RENT_REFUND
			(SERIAL_NUMBER,INCOME_ID,AMOUNT,PAYEE,REFUND_MONEY,FEE,REFUND_DATE,REFUND_TYPE,PAY_WAY,BANK_NAME,BANK_ACCOUNT,REMARK,STATE,CREATE_TIME,CREATE_BY,STATUS,AUTH_TIME,AUTH_BY)
			VALUES
			(#serialNumber#,#refundIncomeId#,#amount#,#payee#,ISNULL(#refundMoney#,0),ISNULL(#fee#,0),#refundDate#,#refundType#,#payWay#,#bankName#,#bankAccount#,#remark#,#refundState#,#createTime#,#createBy#,0,#authTime#,#authBy#)
		</insert>
		
		
		<select id="getBankPayMoney" resultClass="java.util.HashMap">
			      SELECT U.RENTTYPE,U.SORDER,U.O,U.SPRICE-ISNULL(O.REAL_PRICE,0) SPRICE,U.LEASE_CODE,U.LEASE_ID,U.PAYLIST_ID,U.RECP_CODE,U.TAX_PLAN_CODE,
				         U.SDATE,U.PAYLIST_CODE,U.SOBJ,U.RECD_PERIOD,U.FICB_ITEM,U.RECD_TYPE,U.PRICE_TYPE 
				    FROM
				        (
				          SELECT 0 RENTTYPE,2 SORDER,'0000z' O,SUM(ISNULL(TPCE.INCOME_PAY,0)) SPRICE,TRC.LEASE_CODE,
				                 TRCN.RECT_ID LEASE_ID,TRCN.RECP_ID PAYLIST_ID,TRCN.RECP_CODE,TRCN.TAX_PLAN_CODE,
				                 TRCN.START_DATE SDATE,TRCN.RECP_CODE PAYLIST_CODE,'银行手续费收入' SOBJ,0 RECD_PERIOD,
				                 '银行手续费收入' FICB_ITEM,0 RECD_TYPE,00000 PRICE_TYPE
							      FROM T_PRJT_CREDITSCHEME TPCE
							 LEFT JOIN T_RENT_CONTRACT TRC ON TRC.STATUS=0 AND TPCE.CREDIT_ID=TRC.PRCD_ID
							 LEFT JOIN T_RENT_COLLECTIONPLAN TRCN ON TRCN.STATUS=0 AND TRC.RECT_ID=TRCN.RECT_ID       
							     WHERE TPCE.STATUS=0
				             AND EXISTS (SELECT 1 FROM T_SUPL_PLAYDETIL T WHERE T.STATUS=0 AND T.BACKSTATE=0 AND T.MANAGER=1 AND T.CREDIT_ID=TPCE.CREDIT_ID)
							       AND TRCN.TAX_PLAN_CODE=5
							       AND TRC.CUST_CODE=#cust_code#
				        GROUP BY TRCN.RECP_ID,TRCN.RECP_CODE,TRCN.TAX_PLAN_CODE,TRC.LEASE_CODE,TRCN.START_DATE,TRCN.RECP_CODE,TRCN.RECT_ID
				        ) U
	           LEFT JOIN (SELECT SUM(REAL_PRICE) REAL_PRICE,RECP_ID FROM T_FINA_COLLECTIONBILL
				             WHERE STATUS=0
				               AND (FICB_STATE=4 OR FICB_STATE=5)
				               AND FICB_ITEM='银行手续费收入'
				          GROUP BY RECP_ID) O ON O.RECP_ID=U.PAYLIST_ID
				           WHERE U.SPRICE-ISNULL(O.REAL_PRICE,0)>0
		</select>
		
		<select id="findDunDetailByRecpIdNew" parameterClass="map" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT TFCBD.PERIOD_NUM AS PERIOD_NUM,CONVERT(VARCHAR,TFCBD.PAY_DATE, 23) PAY_DATE,
			CONVERT(VARCHAR,TFCBD.OPPOSING_DATE, 23) OPPOSING_DATE,DUN_DAY,
			(CONVERT(DECIMAL(18,2),SHOULD_PRICE)-CONVERT(DECIMAL(18,2),TFCBD.REAL_PRICE) ) AS DUN_PRICE,
			CONVERT(DECIMAL(18,2),TRCD.IRR_MONTH_PRICE + ISNULL(TRCD.VALUE_ADDED_TAX,0))  AS MONTH_PRICE,
			CONVERT(DECIMAL(18,2),TFCBD.REAL_PRICE) REAL_PRICE,
			(CASE WHEN TRCP.FINE_TYPE = 2 THEN
			ROUND(REAL_PRICE *
			     POWER(1 + TRCP.FINE_RATE / 100, DUN_DAY) -
			     REAL_PRICE,2)
			ELSE
			 ROUND(REAL_PRICE * DUN_DAY * FINE_RATE / 100,2)
			END) FINE,TRCP.RECP_CODE,TRCP.RECP_ID,TRC.CUST_NAME
			FROM              
			(
      SELECT TRDSE.RECP_ID,TRDSE.PAY_DATE,TRDSE.PERIOD_NUM,MAX(TRDSE.SHOULD_PRICE )SHOULD_PRICE,
      SUM(TRDSE.DECOMPOSE_PRICE *(-1))REAL_PRICE,TRI.INCOME_DATE OPPOSING_DATE,DATEDIFF(D,TRDSE.PAY_DATE,TRI.INCOME_DATE)  DUN_DAY
        
      FROM  T_RENT_DECOMPOSE TRDSE

      LEFT JOIN T_RENT_INCOME TRI ON TRI.INCOME_ID=TRDSE.INCOME_ID
      
			WHERE  (TRDSE.DECOMPOSE_STATUS=2) AND TRDSE.HAS_RED_DECOMPOSE=0 AND TRDSE.DECOMPOSE_TYPE='0' 	   AND (TRDSE.BILL_CODE ='VALUE_ADD_TAX' OR TRDSE.BILL_CODE='RENT') 
			
      GROUP BY TRDSE.RECP_ID,TRDSE.PAY_DATE,TRDSE.PERIOD_NUM,TRI.INCOME_DATE,DATEDIFF(D,TRDSE.PAY_DATE,TRI.INCOME_DATE)
      
      ) TFCBD
			LEFT JOIN
			T_RENT_COLLECTIONPLAN  TRCP 	ON TFCBD.RECP_ID=TRCP.RECP_ID AND TRCP.STATUS=0
			LEFT JOIN T_RENT_CONTRACT TRC  	ON TRCP.RECT_ID =TRC.RECT_ID AND TRC.STATUS=0
			LEFT JOIN T_RENT_COLLECTIONDETAIL TRCD 	ON TRCD.RECP_ID = TRCP.RECP_ID AND TRCD.PERIOD_NUM=TFCBD.PERIOD_NUM AND TRCD.STATUS=0
			WHERE TRCP.RECP_ID=#RECP_ID#
			]]>
	</select>
	
	<select id="getPeriodNumByRecpIdNew" parameterClass="map"  resultClass="java.util.HashMap">	
	        SELECT TFCBD.PERIOD_NUM AS PERIOD_NUM,COUNT(TFCBD.PERIOD_NUM) AS ROWS
        FROM              
  			(
        SELECT TRDSE.RECP_ID,TRDSE.PAY_DATE,TRDSE.PERIOD_NUM,SUM(TRDSE.SHOULD_PRICE )SHOULD_PRICE,
        SUM(TRDSE.DECOMPOSE_PRICE *(-1))REAL_PRICE,TRI.INCOME_DATE OPPOSING_DATE,DATEDIFF(D,TRDSE.PAY_DATE,TRI.INCOME_DATE)  DUN_DAY
        FROM  T_RENT_DECOMPOSE TRDSE
        LEFT JOIN T_RENT_INCOME TRI ON TRI.INCOME_ID=TRDSE.INCOME_ID
        WHERE  (TRDSE.DECOMPOSE_STATUS=2) AND TRDSE.HAS_RED_DECOMPOSE=0 AND TRDSE.DECOMPOSE_TYPE='0' 	   AND (TRDSE.BILL_CODE ='VALUE_ADD_TAX' OR TRDSE.BILL_CODE='RENT') 
			  GROUP BY TRDSE.RECP_ID,TRDSE.PAY_DATE,TRDSE.PERIOD_NUM,TRI.INCOME_DATE,DATEDIFF(D,TRDSE.PAY_DATE,TRI.INCOME_DATE) 
        ) TFCBD
        LEFT JOIN T_RENT_COLLECTIONPLAN  TRCP 	ON TFCBD.RECP_ID=TRCP.RECP_ID AND TRCP.STATUS=0
        WHERE TRCP.RECP_ID=#RECP_ID#
        GROUP BY TFCBD.PERIOD_NUM
	</select>
	
	<select id="findDunDetailInComeMoneyByRecpIDForNew" parameterClass="map" resultClass="java.util.HashMap">
			SELECT (CASE WHEN TRDSE.BILL_CODE = 'SETTLEMENT_RENT_FINE' THEN '结清罚息'
					ELSE '已缴罚息'
					END) FICB_ITEM, Convert(decimal(18,2),(TRDSE.DECOMPOSE_PRICE *-1))  REAL_PRICE,CONVERT(VARCHAR,TRI.INCOME_DATE ,23) OPPOSING_DATE
		FROM T_RENT_DECOMPOSE TRDSE
		LEFT JOIN  T_RENT_INCOME TRI ON TRI.INCOME_ID=TRDSE.INCOME_ID
		WHERE(TRDSE.DECOMPOSE_STATUS=2) AND TRDSE.HAS_RED_DECOMPOSE=0 AND TRDSE.DECOMPOSE_TYPE='0' 	   
		AND (TRDSE.BILL_CODE ='SETTLEMENT_RENT_FINE' OR TRDSE.BILL_CODE='RENT_FINE') AND TRDSE.RECP_ID=#RECP_ID#	
				UNION ALL
		SELECT MAX(FICB_ITEM) FICB_ITEM,SUM(REAL_PRICE) REAL_PRICE,MAX(CREATE_DATE) OPPOSING_DATE FROM (
		SELECT '免除罚息' AS FICB_ITEM, TDFDR.DIFF_DUN_PRICE AS REAL_PRICE,CONVERT(VARCHAR,TDFDR.CREATE_DATE,23) CREATE_DATE
		FROM T_RENT_SETTLE  TDFDR
		WHERE TDFDR.STATUS = 0 AND TDFDR.STATE = 1 AND TDFDR.RECP_ID=#RECP_ID#	
    UNION ALL
    SELECT '免除罚息' AS FICB_ITEM, SHOULD_FINE-PAY_FINE REAL_PRICE,CONVERT(VARCHAR,CREATE_TIME,23)  CREATE_DATE
    FROM T_RENT_SETTLEMENT 
    WHERE STATE=1
      AND STATUS=0
      AND RECP_ID=#RECP_ID#
      )	O
	</select>
	<!-- 小车代开发票 -->
	
	<select id="getCarInvoicedAmount" parameterClass="map" resultClass="java.util.HashMap">
      SELECT CONVERT(DECIMAL(18,2),TAMOUNT.INVOICED_AMOUNT) INVOICED_AMOUNT,TAMOUNT.CUST_NAME ,tcCUSTOMER.NATU_IDCARD
      FROM T_CUST_INVOICED_AMOUNT   TAMOUNT
     left join  T_RENT_CONTRACT trCONTRACT on trCONTRACT.LEASE_CODE =TAMOUNT.LEASE_CODE
     left join  T_CUST_CUSTOMER tcCUSTOMER on tcCUSTOMER.CUST_ID=trCONTRACT.CUST_ID
	</select>
	<!-- 来款 应缴资金明细 -->
	<select id="getCustBillForSalesForNew" parameterClass="map" resultClass="java.util.HashMap">
		SELECT * FROM
			(
      SELECT  CONVERT(DATE, PAY_DATE,23) PAY_DATE,SUM(FINE) SHOULD_PRICE,' ' INCOME_MONEY,LEASE_CODE,PERIOD_NUM,'FINE' MEMO 
      FROM (
			  SELECT TFCBD.PERIOD_NUM AS PERIOD_NUM,TRC.LEASE_CODE,TFCBD.PAY_DATE,
			(CASE WHEN TRCP.FINE_TYPE = 2 THEN
		    	ROUND(REAL_PRICE *  POWER(1 + TRCP.FINE_RATE / 100, DUN_DAY) -  REAL_PRICE,2)
			 ELSE  ROUND(REAL_PRICE * DUN_DAY * FINE_RATE / 100,2)
			END) FINE
			FROM              
			(
      SELECT TRDSE.RECP_ID,TRDSE.PAY_DATE,TRDSE.PERIOD_NUM,MAX(TRDSE.SHOULD_PRICE )SHOULD_PRICE,
      SUM(TRDSE.DECOMPOSE_PRICE *(-1))REAL_PRICE,TRI.INCOME_DATE OPPOSING_DATE,DATEDIFF(D,TRDSE.PAY_DATE,TRI.INCOME_DATE)  DUN_DAY
      FROM  T_RENT_DECOMPOSE TRDSE
      LEFT JOIN T_RENT_INCOME TRI ON TRI.INCOME_ID=TRDSE.INCOME_ID
			WHERE  (TRDSE.DECOMPOSE_STATUS=2) AND TRDSE.HAS_RED_DECOMPOSE=0 AND TRDSE.DECOMPOSE_TYPE='0' AND (TRDSE.BILL_CODE ='VALUE_ADD_TAX' OR TRDSE.BILL_CODE='RENT') 
      GROUP BY TRDSE.RECP_ID,TRDSE.PAY_DATE,TRDSE.PERIOD_NUM,TRI.INCOME_DATE,DATEDIFF(D,TRDSE.PAY_DATE,TRI.INCOME_DATE)
      ) TFCBD
			LEFT JOIN T_RENT_COLLECTIONPLAN  TRCP 	ON TFCBD.RECP_ID=TRCP.RECP_ID AND TRCP.STATUS=0
			LEFT JOIN T_RENT_CONTRACT TRC  	ON TRCP.RECT_ID =TRC.RECT_ID AND TRC.STATUS=0
			LEFT JOIN T_RENT_COLLECTIONDETAIL TRCD 	ON TRCD.RECP_ID = TRCP.RECP_ID AND TRCD.PERIOD_NUM=TFCBD.PERIOD_NUM AND TRCD.STATUS=0
			WHERE  TRC.CUST_ID=#CUST_ID#
			
      UNION ALL
      
      SELECT 
			TRCP.PERIOD_NUM,TRCP.LEASE_CODE,TRCP.PAY_DATE,
			(CASE WHEN TRCP.FINE_TYPE = 2 THEN
			ROUND((TRCP.MONTH_PRICE-REDUCE_PRICE) *
			     POWER(1 + TRCP.FINE_RATE / 100, DATEDIFF(D,TRCP.PAY_DATE,GETDATE())) -
			     (TRCP.MONTH_PRICE-REDUCE_PRICE),2)
			ELSE
			 ROUND((TRCP.MONTH_PRICE-REDUCE_PRICE) * DATEDIFF(D,TRCP.PAY_DATE,GETDATE()) * FINE_RATE / 100,2)
			END) FINE
			FROM (          
			 SELECT  TRCD.PAY_DATE,  TRCD.PERIOD_NUM,TRC.LEASE_CODE, TRCP.FINE_TYPE, TRCP.FINE_RATE,
			     ISNULL(TRCD.IRR_MONTH_PRICE, 0)+ISNULL(TRCD.VALUE_ADDED_TAX, 0) MONTH_PRICE,
			    ISNULL(TRCD.REDUCE_OWN_PRICE, 0) REDUCE_PRICE
          ,TRC.CUST_NAME
			FROM T_RENT_COLLECTIONPLAN TRCP
			LEFT JOIN T_RENT_CONTRACT TRC ON TRCP.RECT_ID = 	TRC.RECT_ID
			LEFT JOIN T_RENT_COLLECTIONDETAIL TRCD ON TRCP.RECP_ID = TRCD.RECP_ID
			WHERE TRCP.STATUS = 0 AND TRC.STATUS=0
			  AND (TRCP.FUND_STATUS=0 OR TRCP.FUND_STATUS=1)
			AND ISNULL(TRCD.IRR_MONTH_PRICE, 0)+ISNULL(TRCD.VALUE_ADDED_TAX, 0)-ISNULL(TRCD.REDUCE_OWN_PRICE, 0)>0.001
			AND TRC.CUST_ID=#CUST_ID#
			) TRCP 
			) TTT
			 where TTT.FINE >0
			GROUP BY PERIOD_NUM,PAY_DATE,LEASE_CODE
			
     UNION ALL
			  SELECT  TEDETAIL.PAY_DATE, (ISNULL( TEDETAIL.IRR_MONTH_PRICE , 0)+ ISNULL( TEDETAIL.VALUE_ADDED_TAX , 0) ) SHOULD_PRICE
        ,'' INCOME_MONEY
        , TRC.LEASE_CODE LEASE_CODE,TEDETAIL.PERIOD_NUM PERIOD_NUM,'RENT'MEMO
        FROM T_RENT_COLLECTIONDETAIL  TEDETAIL
        LEFT JOIN  T_RENT_COLLECTIONPLAN TRPLAN ON TRPLAN.RECP_ID=TEDETAIL.RECP_ID
        LEFT JOIN T_RENT_CONTRACT TRC ON TRC.RECT_ID=TRPLAN.RECT_ID
        LEFT JOIN T_CUST_CUSTOMER TCC ON  TCC.CUST_ID=TRC.CUST_ID
        WHERE TCC.CUST_ID=#CUST_ID#
		  UNION ALL
			SELECT    CONVERT(DATE, TRIN.INCOME_DATE,23) OPPOSING_DATE,' ' SHOULD_PRICE,TRIN.INCOME_MONEY ,'',0,'BANK' MEMO
			FROM T_RENT_INCOME TRIN
			WHERE TRIN.INCOME_ID IN
			(
				SELECT TRIN.INCOME_ID  INCOME_ID		
				 FROM T_CUST_CUSTOMER TCC
				LEFT JOIN T_RENT_CONTRACT TRC ON TCC.CUST_ID=TRC.CUST_ID AND TRC.STATUS=0
				LEFT JOIN T_RENT_COLLECTIONPLAN TRCT  ON TRCT.RECT_ID=TRC.RECT_ID AND TRCT.STATUS=0 
        LEFT JOIN  T_RENT_DECOMPOSE  TRDSE ON TRDSE.RECP_ID=TRCT.RECP_ID AND TRCT.STATUS=0
        LEFT JOIN T_RENT_INCOME TRIN ON TRIN.INCOME_ID=TRDSE.INCOME_ID
				WHERE TCC.CUST_ID=#CUST_ID# AND  (TRDSE.DECOMPOSE_STATUS=2) AND TRDSE.HAS_RED_DECOMPOSE=0
        AND TRDSE.DECOMPOSE_TYPE='0' 	   AND (TRDSE.BILL_CODE ='VALUE_ADD_TAX' OR TRDSE.BILL_CODE='RENT') 
				
			)
      UNION ALL
      
      SELECT  CONVERT(DATE,TRS.CREATE_DATE,23) OPPOSING_DATE,' ' SHOULD_PRICE, CONVERT(VARCHAR,TRS.DIFF_DUN_PRICE) INCOME_MONEY
      ,'',0,'NOFINE' MEMO
      FROM T_RENT_SETTLE TRS
      LEFT JOIN T_RENT_COLLECTIONPLAN TRCT ON TRCT.RECP_ID=TRS.RECP_ID AND  TRS.STATUS = 0 AND TRS.STATE = 1
      LEFT JOIN T_RENT_CONTRACT TRC ON TRCT.RECT_ID=TRC.RECT_ID AND TRCT.STATUS=0
      LEFT JOIN   T_CUST_CUSTOMER TCC  ON TCC.CUST_ID=TRC.CUST_ID AND TRC.STATUS=0
      WHERE TCC.CUST_ID=#CUST_ID#) TT
      ORDER BY TT.PAY_DATE
			
	</select>
	
	<!-- 删除发票寄发记录 -->
	<update id="deleteOneBarcode" parameterClass="map">
		UPDATE T_RENT_ONEBARCODE
		SET STATUS = 1,DELETE_TIME = GETDATE(),DELETE_USER_ID = #s_employeeId#
		WHERE ID = #id#
	</update>
	
	<select id="getSettlementPay" resultClass="java.util.HashMap">
		SELECT * FROM T_RENT_SETTLEMENT WHERE STATE=1 AND STATUS=0 AND RECP_ID=#RECP_ID#
	</select>
</sqlMap>